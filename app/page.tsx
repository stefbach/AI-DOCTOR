"use client"

import { useState } from "react"
import {
  Brain,
  Pill,
  FileText,
  User,
  Stethoscope,
  CheckCircle,
  Loader,
  Search,
  Shield,
  Activity,
  Target,
  Award,
  Settings,
  HelpCircle,
  MessageSquare,
  ChevronRight,
  AlertTriangle,
  Heart,
  Thermometer,
  Download,
  Printer,
  Users,
} from "lucide-react"

import ConsultationReportPanel from "../components/consultation-report"

// ========================================
// üß† SYST√àME M√âDICAL EXPERT AVANC√â - NIVEAU INTERNISTE
// ========================================
export class AdvancedMedicalExpert {
  constructor() {
    this.isDemo = false
    this.confidence = 0
    this.processingTime = 0

    // Configuration APIs m√©dicales
    this.apiConfig = {
      openai: {
        baseURL: "https://api.openai.com/v1/chat/completions",
        key: typeof window !== "undefined" ? window.localStorage?.getItem("openai_key") || "" : "",
        model: "gpt-4",
      },
      drugAPIs: {
        openFDA: {
          baseURL: "https://api.fda.gov/drug/label.json",
          enabled: true,
        },
        rxNorm: {
          baseURL: "https://rxnav.nlm.nih.gov/REST",
          enabled: true,
        },
        dailyMed: {
          baseURL: "https://dailymed.nlm.nih.gov/dailymed/services/v2",
          enabled: true,
        },
      },
      medicalResearch: {
        pubmed: { 
          apiKey: typeof window !== "undefined" ? window.localStorage?.getItem("pubmed_key") || "" : "",
          enabled: true 
        },
        clinicalTrials: { enabled: true },
        umls: { 
          apiKey: typeof window !== "undefined" ? window.localStorage?.getItem("umls_key") || "" : "",
          enabled: true 
        },
      },
    }

    // Initialise les sous-services API ultra-avanc√©s
    this.pubmed = new PubMedService({ pubmed: this.apiConfig.medicalResearch.pubmed })
    this.clinicalTrials = new ClinicalTrialsService({ clinicalTrials: this.apiConfig.medicalResearch.clinicalTrials })
    this.umls = new UMLSService({ umls: this.apiConfig.medicalResearch.umls })

    // Local DB fallback (tu peux l‚Äôenrichir si besoin)
    this.medicationDatabase = this.initializeComprehensiveMedicationDatabase()
    this.medicalHistoryDatabase = this.initializeMedicalHistoryDatabase()
    this.drugInteractionChecker = this.initializeDrugInteractionChecker()
    this.clinicalQuestions = this.initializeClinicalQuestions()
    this.drugAPICache = new Map()
    this.researchCache = new Map()
    this.cacheExpiry = 24 * 60 * 60 * 1000
  }
  // ========================================
  // üè• DIAGNOSTIC M√âDICAL EXPERT NIVEAU INTERNISTE
  // ========================================
  async generateComprehensiveDiagnosis(patientData, clinicalPresentation) {
    const startTime = Date.now()

    try {
      // Analyse clinique compl√®te avec IA experte
      const aiAnalysis = await this.performExpertClinicalAnalysis(patientData, clinicalPresentation)

      this.processingTime = Date.now() - startTime

      return {
        clinicalAnalysis: aiAnalysis,
        processingTime: this.processingTime,
        confidence: aiAnalysis.confidence || 0.8,
        source: "Expert Medical AI + Clinical Guidelines",
        timestamp: new Date().toISOString(),
        consultationId: this.generateConsultationId(),
        clinicalQuestions: aiAnalysis.clinicalQuestions || [],
        differentialWorkup: aiAnalysis.differentialWorkup || [],
      }
    } catch (error) {
      console.error("Erreur diagnostic expert:", error)
      return this.generateLocalExpertDiagnosis(patientData, clinicalPresentation)
    }
  }

  // Ajouter apr√®s la m√©thode generateComprehensiveDiagnosis
  async generateInitialClinicalQuestions(patientData, clinicalPresentation) {
    const startTime = Date.now()

    try {
      if (!this.isAPIConfigured()) {
        return this.generateLocalClinicalQuestions(patientData, clinicalPresentation)
      }

      const questionsAnalysis = await this.performInitialClinicalAnalysis(patientData, clinicalPresentation)

      return {
        clinicalQuestions: questionsAnalysis.clinical_questions || [],
        preliminaryThoughts: questionsAnalysis.preliminary_thoughts || "",
        processingTime: Date.now() - startTime,
        source: "Expert Clinical Questions AI",
        timestamp: new Date().toISOString(),
        questionId: this.generateQuestionId(),
      }
    } catch (error) {
      console.error("Erreur questions cliniques:", error)
      return this.generateLocalClinicalQuestions(patientData, clinicalPresentation)
    }
  }

  async performInitialClinicalAnalysis(patientData, clinicalPresentation) {
    const vitalSigns = []
    if (clinicalPresentation.systolicBP && clinicalPresentation.diastolicBP) {
      vitalSigns.push(`TA: ${clinicalPresentation.systolicBP}/${clinicalPresentation.diastolicBP} mmHg`)
    }
    if (clinicalPresentation.heartRate) {
      vitalSigns.push(`FC: ${clinicalPresentation.heartRate} bpm`)
    }
    if (clinicalPresentation.temperature) {
      vitalSigns.push(`T¬∞: ${clinicalPresentation.temperature}¬∞C`)
    }
    if (clinicalPresentation.oxygenSaturation) {
      vitalSigns.push(`SpO2: ${clinicalPresentation.oxygenSaturation}%`)
    }

    const prompt = `Tu es un m√©decin interniste senior expert √† Maurice. Tu dois d'abord R√âFL√âCHIR et poser des QUESTIONS CLINIQUES PERTINENTES avant de faire un diagnostic.

√âTAPE 1: ANALYSE INITIALE ET QUESTIONS CLINIQUES

DONN√âES DISPONIBLES:
Patient: ${JSON.stringify(patientData, null, 2)}
Pr√©sentation: ${JSON.stringify(clinicalPresentation, null, 2)}

SIGNES VITAUX:
${vitalSigns.join(", ")}

ANT√âC√âDENTS:
M√©dicaux: ${patientData.medicalHistory?.map((h) => `${h.condition} (${h.year})`).join(", ") || "Non renseign√©s"}
Familiaux: ${patientData.familyHistory?.map((h) => `${h.condition} (${h.relation})`).join(", ") || "Non renseign√©s"}
Traitements: ${patientData.currentMedications?.map((m) => `${m.name} ${m.dosage}`).join(", ") || "Aucun"}

INSTRUCTIONS:
1. Analyse la pr√©sentation clinique
2. Identifie les HYPOTH√àSES DIAGNOSTIQUES PR√âLIMINAIRES
3. Pose 5-8 QUESTIONS CLINIQUES PR√âCISES pour affiner le diagnostic
4. Justifie chaque question m√©dicalement
5. Classe les questions par priorit√©

R√©ponds en JSON:

{
  "preliminary_thoughts": "R√©flexion clinique initiale sur les hypoth√®ses diagnostiques possibles",
  "clinical_questions": [
    {
      "question": "Question clinique pr√©cise et pertinente",
      "rationale": "Justification m√©dicale de cette question",
      "category": "symptomatology|examination|history|risk_factors|timeline",
      "priority": "high|medium|low",
      "diagnostic_value": "Valeur diagnostique de cette question"
    }
  ]
}`

    const response = await fetch(this.apiConfig.openai.baseURL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.apiConfig.openai.key}`,
      },
      body: JSON.stringify({
        model: this.apiConfig.openai.model,
        messages: [{ role: "user", content: prompt }],
        temperature: 0.1,
        max_tokens: 3000,
      }),
    })

    if (!response.ok) {
      throw new Error(`OpenAI API Error: ${response.status}`)
    }

    const data = await response.json()
    const aiResponse = data.choices?.[0]?.message?.content

    try {
      return JSON.parse(aiResponse)
    } catch (parseError) {
      throw new Error("R√©ponse questions IA non parsable")
    }
  }

  generateQuestionId() {
    return `QUEST-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
  }

  async generateLocalClinicalQuestions(patientData, clinicalPresentation) {
    await this.simulateProcessing(1500)

    const questions = [
      {
        question: "Pouvez-vous d√©crire pr√©cis√©ment la chronologie d'apparition des sympt√¥mes ?",
        rationale: "La chronologie aide √† diff√©rencier les causes aigu√´s des chroniques",
        category: "timeline",
        priority: "high",
        diagnostic_value: "Essentielle pour orientation diagnostique",
      },
      {
        question: "Y a-t-il des facteurs d√©clenchants ou aggravants identifi√©s ?",
        rationale: "Identifier les facteurs d√©clenchants oriente vers certaines √©tiologies",
        category: "symptomatology",
        priority: "high",
        diagnostic_value: "Aide au diagnostic diff√©rentiel",
      },
      {
        question: "Avez-vous des ant√©c√©dents familiaux de maladies similaires ?",
        rationale: "Les ant√©c√©dents familiaux peuvent r√©v√©ler une pr√©disposition g√©n√©tique",
        category: "history",
        priority: "medium",
        diagnostic_value: "Importante pour maladies h√©r√©ditaires",
      },
    ]

    return {
      clinicalQuestions: questions,
      preliminaryThoughts:
        "Analyse bas√©e sur la pr√©sentation clinique. Questions pour affiner le diagnostic diff√©rentiel.",
      processingTime: 1500,
      source: "Expert Local Questions Database",
      questionId: this.generateQuestionId(),
    }
  }

  // Modifier la m√©thode performExpertClinicalAnalysis pour inclure les r√©ponses aux questions
  async performExpertClinicalAnalysisWithAnswers(patientData, clinicalPresentation, clinicalAnswers) {
    if (!this.isAPIConfigured()) {
      // Fallback local si pas d'API
      return this.generateLocalDiagnosisWithAnswers(patientData, clinicalPresentation, clinicalAnswers)
    }

    const vitalSigns = []
    if (clinicalPresentation.systolicBP && clinicalPresentation.diastolicBP) {
      vitalSigns.push(`TA: ${clinicalPresentation.systolicBP}/${clinicalPresentation.diastolicBP} mmHg`)
    }
    if (clinicalPresentation.heartRate) {
      vitalSigns.push(`FC: ${clinicalPresentation.heartRate} bpm`)
    }
    if (clinicalPresentation.temperature) {
      vitalSigns.push(`T¬∞: ${clinicalPresentation.temperature}¬∞C`)
    }
    if (clinicalPresentation.oxygenSaturation) {
      vitalSigns.push(`SpO2: ${clinicalPresentation.oxygenSaturation}%`)
    }

    const answersText = Object.entries(clinicalAnswers)
      .map(([index, answer]) => `Question ${Number.parseInt(index) + 1}: ${answer}`)
      .join("\n")

    const prompt = `Tu es un m√©decin interniste senior expert √† Maurice. 

√âTAPE 2: DIAGNOSTIC FINAL APR√àS QUESTIONS CLINIQUES

DONN√âES COMPL√àTES:
Patient: ${JSON.stringify(patientData, null, 2)}
Pr√©sentation: ${JSON.stringify(clinicalPresentation, null, 2)}

SIGNES VITAUX:
${vitalSigns.join(", ")}

R√âPONSES AUX QUESTIONS CLINIQUES:
${answersText || "Aucune r√©ponse fournie"}

ANT√âC√âDENTS COMPLETS:
M√©dicaux: ${patientData.medicalHistory?.map((h) => `${h.condition || h.customCondition} (${h.year}) - ${h.status}`).join("\n") || "Aucun"}
Familiaux: ${patientData.familyHistory?.map((h) => `${h.condition} (${h.relation}) - ${h.age || "√¢ge non pr√©cis√©"}`).join("\n") || "Aucun"}
Chirurgicaux: ${patientData.surgicalHistory?.map((s) => `${s.procedure} (${s.year})`).join("\n") || "Aucun"}
Traitements: ${patientData.currentMedications?.map((m) => `${m.name} ${m.dosage} ${m.frequency}`).join("\n") || "Aucun"}

CONTEXTE MAURICIEN:
- Pr√©valences: HTA 40%, DT2 25%, Ob√©sit√© 35%, Dyslipid√©mie 45%
- Maladies tropicales: Dengue, Chikungunya, Paludisme (rare)

INSTRUCTIONS FINALES:
1. Int√®gre TOUTES les informations disponibles
2. Utilise les r√©ponses aux questions cliniques pour affiner ton diagnostic
3. Propose un diagnostic diff√©rentiel COMPLET et HI√âRARCHIS√â
4. Justifie chaque diagnostic avec les √©l√©ments cliniques
5. Indique la conduite √† tenir

R√©ponds en JSON avec diagnostic FINAL:

{
  "differential_diagnosis": [
    {
      "diagnosis": "Diagnostic m√©dical pr√©cis",
      "icd10_code": "Code ICD-10",
      "probability_percent": 85,
      "clinical_reasoning": "Raisonnement clinique d√©taill√© int√©grant les r√©ponses aux questions",
      "severity": "mild|moderate|severe|critical",
      "urgency": "routine|urgent|emergent",
      "prognosis": "Pronostic d√©taill√©",
      "supporting_evidence": ["√âl√©ments en faveur"],
      "differential_points": ["Points diff√©rentiels"],
      "red_flags": ["Signes d'alarme"],
      "complications": ["Complications possibles"]
    }
  ],
  "differential_workup": [
    {
      "test_category": "laboratory|imaging|functional|biopsy",
      "tests": ["Examens recommand√©s"],
      "rationale": "Justification",
      "urgency": "immediate|within_24h|within_week|routine"
    }
  ],
  "confidence_level": "high|moderate|low",
  "expert_notes": "Notes finales apr√®s int√©gration des questions cliniques"
}`

    try {
      const response = await fetch(this.apiConfig.openai.baseURL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.apiConfig.openai.key}`,
        },
        body: JSON.stringify({
          model: this.apiConfig.openai.model,
          messages: [{ role: "user", content: prompt }],
          temperature: 0.1,
          max_tokens: 6000,
        }),
      })

      if (!response.ok) {
        throw new Error(`OpenAI API Error: ${response.status}`)
      }

      const data = await response.json()
      const aiResponse = data.choices?.[0]?.message?.content

      try {
        const parsedResponse = JSON.parse(aiResponse)
        return {
          ...parsedResponse,
          confidence: this.mapConfidenceToNumeric(parsedResponse.confidence_level),
          diagnoses: parsedResponse.differential_diagnosis || [],
        }
      } catch (parseError) {
        throw new Error("R√©ponse diagnostic final IA non parsable")
      }
    } catch (error) {
      console.error("Erreur API OpenAI:", error)
      // Fallback vers diagnostic local
      return this.generateLocalDiagnosisWithAnswers(patientData, clinicalPresentation, clinicalAnswers)
    }
  }

  async generateLocalDiagnosisWithAnswers(patientData, clinicalPresentation, clinicalAnswers) {
    await this.simulateProcessing(2000)

    const localDiagnoses = []
    const symptoms = clinicalPresentation.symptoms?.toLowerCase() || ""
    const complaint = clinicalPresentation.chiefComplaint?.toLowerCase() || ""

    // Diagnostic expert local pour ZONA
    if (
      symptoms.includes("zona") ||
      symptoms.includes("√©ruption") ||
      symptoms.includes("v√©sicule") ||
      (symptoms.includes("douleur") && symptoms.includes("unilat√©ral"))
    ) {
      localDiagnoses.push({
        diagnosis: "Zona (Herp√®s Zoster)",
        icd10_code: "B02.9",
        probability_percent: 85,
        clinical_reasoning:
          "√âruption v√©siculeuse unilat√©rale suivant un trajet dermatomal √©vocatrice de zona. R√©ponses aux questions cliniques confirment le diagnostic. N√©cessite traitement antiviral pr√©coce (< 72h).",
        severity: "moderate",
        urgency: "urgent",
        prognosis: "Bon avec traitement antiviral pr√©coce. Risque de douleurs post-zost√©riennes chez sujet √¢g√©",
        supporting_evidence: ["√âruption dermatomale", "Douleur neuropathique", "V√©sicules sur base √©ryth√©mateuse"],
        red_flags: ["Atteinte ophtalmique", "Immunod√©pression", "Zona g√©n√©ralis√©"],
        complications: ["Douleurs post-zost√©riennes", "Surinfection bact√©rienne", "Atteinte neurologique"],
      })
    }

    // Ajouter d'autres diagnostics selon les sympt√¥mes
    if (symptoms.includes("hypertension") || symptoms.includes("tension")) {
      localDiagnoses.push({
        diagnosis: "Hypertension art√©rielle",
        icd10_code: "I10",
        probability_percent: 75,
        clinical_reasoning:
          "Signes cliniques et r√©ponses aux questions √©vocateurs d'HTA. N√©cessite confirmation par mesures r√©p√©t√©es.",
        severity: "moderate",
        urgency: "routine",
        prognosis: "Bon avec traitement adapt√© et suivi r√©gulier",
        supporting_evidence: ["Signes vitaux", "Facteurs de risque"],
        red_flags: ["Crise hypertensive", "Retentissement d'organe"],
        complications: ["AVC", "Infarctus", "Insuffisance r√©nale"],
      })
    }

    return {
      differential_diagnosis: localDiagnoses,
      confidence_level: "moderate",
      diagnoses: localDiagnoses,
      confidence: 0.75,
      expert_notes:
        "Diagnostic bas√© sur pr√©sentation clinique et r√©ponses aux questions. Confirmation par examen clinique recommand√©e.",
    }
  }

  async performExpertClinicalAnalysis(patientData, clinicalPresentation) {
    if (!this.isAPIConfigured()) {
      throw new Error("Configuration API requise pour analyse experte")
    }

    const vitalSigns = []
    if (clinicalPresentation.systolicBP && clinicalPresentation.diastolicBP) {
      vitalSigns.push(`TA: ${clinicalPresentation.systolicBP}/${clinicalPresentation.diastolicBP} mmHg`)
    }
    if (clinicalPresentation.heartRate) {
      vitalSigns.push(`FC: ${clinicalPresentation.heartRate} bpm`)
    }
    if (clinicalPresentation.temperature) {
      vitalSigns.push(`T¬∞: ${clinicalPresentation.temperature}¬∞C`)
    }
    if (clinicalPresentation.oxygenSaturation) {
      vitalSigns.push(`SpO2: ${clinicalPresentation.oxygenSaturation}%`)
    }

    const prompt = `Tu es un m√©decin interniste senior avec 25+ ans d'exp√©rience clinique √† Maurice, expert en diagnostic diff√©rentiel et m√©decine interne. Tu dois effectuer une analyse diagnostique EXPERTE et RIGOUREUSE comme un vrai clinicien.

DONN√âES CLINIQUES COMPL√àTES:
Patient: ${JSON.stringify(patientData, null, 2)}
Pr√©sentation: ${JSON.stringify(clinicalPresentation, null, 2)}

SIGNES VITAUX:
${vitalSigns.join(", ")}

ANT√âC√âDENTS M√âDICAUX:
${patientData.medicalHistory?.map((h) => `- ${h.condition} (${h.year}) - ${h.severity} - ${h.status}`).join("\n") || "Aucun ant√©c√©dent renseign√©"}

ANT√âC√âDENTS CHIRURGICAUX:
${patientData.surgicalHistory?.map((s) => `- ${s.procedure} (${s.year}) - Complications: ${s.complications}`).join("\n") || "Aucun ant√©c√©dent chirurgical"}

TRAITEMENTS ACTUELS:
${patientData.currentMedications?.map((m) => `- ${m.name} ${m.dosage} ${m.frequency} (${m.indication})`).join("\n") || "Aucun traitement en cours"}

FACTEURS DE RISQUE:
- Tabac: ${patientData.smokingStatus || "Non renseign√©"} ${patientData.packYears ? `(${patientData.packYears} PA)` : ""}
- Alcool: ${patientData.alcoholStatus || "Non renseign√©"}
- Activit√© physique: ${patientData.activityLevel || "Non renseign√©"}

CONTEXTE M√âDICAL MAURICIEN:
- Pr√©valences: HTA 40%, DT2 25%, Ob√©sit√© 35%, Dyslipid√©mie 45%
- Maladies tropicales: Dengue, Chikungunya, Paludisme (rare)
- Populations: Indo-mauricienne 68%, Cr√©ole 27%, Chinoise 3%, Europ√©enne 2%

INSTRUCTIONS EXPERTES:
1. Analyse comme un VRAI interniste senior
2. Pose des questions cliniques PERTINENTES pour affiner le diagnostic
3. Propose un diagnostic diff√©rentiel RIGOUREUX avec probabilit√©s
4. Sugg√®re des examens compl√©mentaires APPROPRI√âS
5. Raisonne selon les guidelines internationales et le contexte mauricien

R√©ponds en JSON structur√© avec analyse m√©dicale EXPERTE:

{
  "clinical_questions": [
    {
      "question": "Question clinique pr√©cise pour affiner le diagnostic",
      "rationale": "Pourquoi cette question est importante",
      "category": "symptomatology|examination|history|risk_factors"
    }
  ],
  "differential_diagnosis": [
    {
      "diagnosis": "Diagnostic m√©dical pr√©cis selon nomenclature internationale",
      "icd10_code": "Code ICD-10 exact",
      "probability_percent": 85,
      "clinical_reasoning": "Raisonnement clinique d√©taill√© d'interniste avec physiopathologie",
      "severity": "mild|moderate|severe|critical",
      "urgency": "routine|urgent|emergent",
      "prognosis": "Pronostic d√©taill√© court/moyen/long terme",
      "supporting_evidence": ["√âl√©ments cliniques en faveur"],
      "differential_points": ["Points diff√©rentiels importants"],
      "red_flags": ["Signes d'alarme √† surveiller"],
      "complications": ["Complications possibles"]
    }
  ],
  "differential_workup": [
    {
      "test_category": "laboratory|imaging|functional|biopsy",
      "tests": ["Examens sp√©cifiques recommand√©s"],
      "rationale": "Justification m√©dicale",
      "urgency": "immediate|within_24h|within_week|routine"
    }
  ],
  "confidence_level": "high|moderate|low",
  "expert_notes": "Notes d'expert sur la complexit√© du cas"
}`

    const response = await fetch(this.apiConfig.openai.baseURL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.apiConfig.openai.key}`,
      },
      body: JSON.stringify({
        model: this.apiConfig.openai.model,
        messages: [{ role: "user", content: prompt }],
        temperature: 0.1, // Plus pr√©cis pour diagnostic m√©dical
        max_tokens: 6000,
      }),
    })

    if (!response.ok) {
      throw new Error(`OpenAI API Error: ${response.status}`)
    }

    const data = await response.json()
    const aiResponse = data.choices?.[0]?.message?.content

    try {
      const parsedResponse = JSON.parse(aiResponse)
      return {
        ...parsedResponse,
        confidence: this.mapConfidenceToNumeric(parsedResponse.confidence_level),
        diagnoses: parsedResponse.differential_diagnosis || [],
      }
    } catch (parseError) {
      throw new Error("R√©ponse IA non parsable")
    }
  }

  // ========================================
  // üíä SYST√àME DE PRESCRIPTION EXPERT NIVEAU INTERNISTE
  // ========================================
  async generateExpertPrescription(diagnoses, patientData, clinicalContext) {
    try {
      const startTime = Date.now()

      if (!this.isAPIConfigured()) {
        return this.generateLocalExpertPrescription(diagnoses, patientData)
      }

      // Prescription experte avec IA
      const expertPrescription = await this.performExpertPrescriptionAnalysis(diagnoses, patientData, clinicalContext)

      return {
        prescription: expertPrescription.prescription,
        interactionAnalysis: this.checkDrugInteractions([
          ...(patientData.currentMedications || []),
          ...(expertPrescription.prescription?.medications || []),
        ]),
        prescriptionId: this.generatePrescriptionId(),
        prescribedBy: "Expert Medical AI System",
        prescriptionDate: new Date().toISOString(),
        validityPeriod: "30 jours",
        processingTime: Date.now() - startTime,
        source: "Expert Prescription AI + Clinical Guidelines",
        isEditable: true,
        clinicalJustification: expertPrescription.clinical_justification,
        monitoringPlan: expertPrescription.monitoring_plan,
      }
    } catch (error) {
      console.error("Erreur prescription experte:", error)
      return this.generateLocalExpertPrescription(diagnoses, patientData)
    }
  }

  async performExpertPrescriptionAnalysis(diagnoses, patientData, clinicalContext) {
    const prompt = `Tu es un m√©decin interniste senior expert en th√©rapeutique √† Maurice. Tu dois prescrire comme un VRAI m√©decin expert avec une connaissance approfondie des m√©dicaments disponibles √† Maurice.

DIAGNOSTICS RETENUS:
${diagnoses.map((d, i) => `${i + 1}. ${d.diagnosis} (${d.icd10_code}) - ${d.probability_percent}% - ${d.severity}`).join("\n")}

PATIENT:
${JSON.stringify(patientData, null, 2)}

CONTEXTE CLINIQUE:
${JSON.stringify(clinicalContext, null, 2)}

M√âDICAMENTS DISPONIBLES √Ä MAURICE (exemples par pathologie):
- Zona/Herp√®s: Aciclovir 800mg, Valaciclovir 1g, Famciclovir
- HTA: Amlodipine, Enalapril, Losartan, Hydrochlorothiazide, Bisoprolol
- Diab√®te: Metformine, Gliclazide, Insuline, Sitagliptine
- Infections: Amoxicilline, Azithromycine, Ciprofloxacine, Ceftriaxone
- Douleur: Parac√©tamol, Ibuprof√®ne, Tramadol, Morphine
- Anticoagulants: Warfarine, Rivaroxaban, Enoxaparine

INSTRUCTIONS EXPERTES:
1. Prescris selon les GUIDELINES internationales
2. Adapte aux disponibilit√©s et co√ªts mauriciens
3. Consid√®re les interactions avec traitements actuels
4. Justifie CHAQUE prescription m√©dicalement
5. Propose un plan de surveillance appropri√©
6. √âvite les prescriptions inappropri√©es (ex: parac√©tamol pour zona)

R√©ponds en JSON avec prescription EXPERTE:

{
  "prescription": {
    "medications": [
      {
        "medication_name": "Nom exact du m√©dicament",
        "brand_name": "Marque disponible √† Maurice",
        "strength": "Dosage pr√©cis",
        "pharmaceutical_form": "Forme gal√©nique",
        "quantity": "Quantit√© √† d√©livrer",
        "dosage_regimen": {
          "dose": "Dose unitaire",
          "frequency": "Fr√©quence pr√©cise",
          "timing": "Moment de prise",
          "duration": "Dur√©e de traitement",
          "route": "Voie d'administration"
        },
        "instructions": {
          "french": "Instructions d√©taill√©es en fran√ßais"
        },
        "indication": "Indication pr√©cise",
        "contraindications": ["Contre-indications"],
        "side_effects": ["Effets secondaires principaux"],
        "cost_information": {
          "total_cost_mur": "Co√ªt estim√© en MUR"
        }
      }
    ],
    "follow_up_instructions": {
      "next_appointment": "D√©lai de suivi",
      "warning_signs": ["Signes d'alarme"],
      "monitoring_parameters": ["Param√®tres √† surveiller"]
    }
  },
  "clinical_justification": "Justification m√©dicale d√©taill√©e de chaque prescription",
  "monitoring_plan": "Plan de surveillance et suivi th√©rapeutique"
}`

    const response = await fetch(this.apiConfig.openai.baseURL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.apiConfig.openai.key}`,
      },
      body: JSON.stringify({
        model: this.apiConfig.openai.model,
        messages: [{ role: "user", content: prompt }],
        temperature: 0.1,
        max_tokens: 4000,
      }),
    })

    if (!response.ok) {
      throw new Error(`OpenAI API Error: ${response.status}`)
    }

    const data = await response.json()
    const aiResponse = data.choices?.[0]?.message?.content

    try {
      return JSON.parse(aiResponse)
    } catch (parseError) {
      throw new Error("R√©ponse prescription IA non parsable")
    }
  }

  // ========================================
  // üî¨ PRESCRIPTION EXAMENS PARACLINIQUES
  // ========================================
  async generateExpertWorkup(diagnoses, patientData, clinicalContext) {
    try {
      if (!this.isAPIConfigured()) {
        return this.generateLocalExpertWorkup(diagnoses, patientData)
      }

      const workupAnalysis = await this.performExpertWorkupAnalysis(diagnoses, patientData, clinicalContext)

      return {
        workup: workupAnalysis.workup,
        workupId: this.generateWorkupId(),
        prescribedBy: "Expert Medical AI System",
        workupDate: new Date().toISOString(),
        source: "Expert Workup AI + Clinical Guidelines",
        clinicalJustification: workupAnalysis.clinical_justification,
        urgencyLevel: workupAnalysis.urgency_level,
      }
    } catch (error) {
      console.error("Erreur prescription examens:", error)
      return this.generateLocalExpertWorkup(diagnoses, patientData)
    }
  }

  async performExpertWorkupAnalysis(diagnoses, patientData, clinicalContext) {
    const prompt = `Tu es un m√©decin interniste senior expert √† Maurice. Tu dois prescrire les examens paracliniques appropri√©s selon les guidelines internationales et le contexte mauricien.

DIAGNOSTICS SUSPECT√âS:
${diagnoses.map((d, i) => `${i + 1}. ${d.diagnosis} (${d.icd10_code}) - ${d.probability_percent}% - ${d.severity}`).join("\n")}

PATIENT:
${JSON.stringify(patientData, null, 2)}

CONTEXTE CLINIQUE:
${JSON.stringify(clinicalContext, null, 2)}

EXAMENS DISPONIBLES √Ä MAURICE:
- Biologie: NFS, CRP, VS, Glyc√©mie, HbA1c, Cr√©atinine, Ur√©e, Ionogramme, Bilan lipidique, TSH, Troponines, D-dim√®res
- Imagerie: Radiographie, √âchographie, Scanner, IRM, Scintigraphie
- Fonctionnels: ECG, √âcho-c≈ìur, EFR, Holter, √âpreuve d'effort
- Microbiologie: ECBU, H√©mocultures, Coproculture, S√©rologies

INSTRUCTIONS EXPERTES:
1. Prescris selon les guidelines internationales
2. Adapte aux disponibilit√©s mauriciennes
3. Justifie CHAQUE examen m√©dicalement
4. Classe par urgence (imm√©diat, 24h, semaine, routine)
5. √âvite les examens non contributifs

R√©ponds en JSON avec prescription d'examens EXPERTE:

{
  "workup": {
    "laboratory_tests": [
      {
        "test_name": "Nom exact de l'examen",
        "category": "hematology|biochemistry|immunology|microbiology",
        "indication": "Indication pr√©cise",
        "urgency": "immediate|within_24h|within_week|routine",
        "expected_results": "R√©sultats attendus",
        "interpretation_notes": "Notes d'interpr√©tation"
      }
    ],
    "imaging_studies": [
      {
        "study_name": "Nom exact de l'imagerie",
        "modality": "xray|ultrasound|ct|mri|nuclear",
        "indication": "Indication pr√©cise",
        "urgency": "immediate|within_24h|within_week|routine",
        "specific_protocol": "Protocole sp√©cifique si n√©cessaire"
      }
    ],
    "functional_tests": [
      {
        "test_name": "Nom exact du test fonctionnel",
        "indication": "Indication pr√©cise",
        "urgency": "immediate|within_24h|within_week|routine"
      }
    ]
  },
  "clinical_justification": "Justification m√©dicale d√©taill√©e de chaque examen",
  "urgency_level": "high|moderate|low"}`

    const response = await fetch(this.apiConfig.openai.baseURL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.apiConfig.openai.key}`,
      },
      body: JSON.stringify({
        model: this.apiConfig.openai.model,
        messages: [{ role: "user", content: prompt }],
        temperature: 0.1,
        max_tokens: 4000,
      }),
    })

    if (!response.ok) {
      throw new Error(`OpenAI API Error: ${response.status}`)
    }

    const data = await response.json()
    const aiResponse = data.choices?.[0]?.message?.content

    try {
      return JSON.parse(aiResponse)
    } catch (parseError) {
      throw new Error("R√©ponse examens IA non parsable")
    }
  }

  generateWorkupId() {
    return `WORKUP-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
  }

  async generateLocalExpertWorkup(diagnoses, patientData) {
    await this.simulateProcessing(1000)

    const laboratoryTests = []
    const imagingStudies = []
    const functionalTests = []

    diagnoses.forEach((diag) => {
      if (diag.diagnosis.toLowerCase().includes("zona")) {
        // Examens pour zona si compliqu√©
        if (diag.severity === "severe") {
          laboratoryTests.push({
            test_name: "NFS avec formule",
            category: "hematology",
            indication: "Recherche immunod√©pression",
            urgency: "within_24h",
            expected_results: "Lymphop√©nie possible si immunod√©pression",
          })
        }
      }

      if (diag.diagnosis.toLowerCase().includes("hypertension")) {
        laboratoryTests.push(
          {
            test_name: "Cr√©atinine, Ur√©e",
            category: "biochemistry",
            indication: "√âvaluation fonction r√©nale",
            urgency: "within_week",
            expected_results: "Fonction r√©nale normale ou alt√©r√©e",
          },
          {
            test_name: "Ionogramme sanguin",
            category: "biochemistry",
            indication: "Bilan √©lectrolytique",
            urgency: "within_week",
          },
          {
            test_name: "Bilan lipidique",
            category: "biochemistry",
            indication: "√âvaluation risque cardiovasculaire",
            urgency: "routine",
          },
        )

        functionalTests.push({
          test_name: "ECG 12 d√©rivations",
          indication: "Recherche retentissement cardiaque",
          urgency: "within_week",
        })
      }
    })

    return {
      workup: {
        laboratory_tests: laboratoryTests,
        imaging_studies: imagingStudies,
        functional_tests: functionalTests,
      },
      workupId: this.generateWorkupId(),
      source: "Expert Local Workup Database",
      clinicalJustification: "Examens de premi√®re intention selon diagnostic suspect√©",
      urgencyLevel: "moderate",
    }
  }

  // ========================================
  // üíä BASE M√âDICAMENTEUSE COMPL√àTE MAURICE
  // ========================================
  initializeComprehensiveMedicationDatabase() {
    return {
      antivirals: [
        {
          name: "Aciclovir",
          brands: ["Zovirax", "Aciclovir Teva", "Herpevir"],
          strengths: ["200mg", "400mg", "800mg"],
          forms: ["Comprim√©", "Suspension", "Cr√®me", "Injectable"],
          indications: ["Herp√®s simplex", "Zona", "Varicelle"],
          dosage: {
            zona: "800mg 5x/j pendant 7 jours",
            herpes: "400mg 3x/j pendant 5 jours",
          },
          contraindications: ["Hypersensibilit√©", "Insuffisance r√©nale s√©v√®re"],
          cost: "250-400 MUR/traitement",
          availability: "high",
        },
        {
          name: "Valaciclovir",
          brands: ["Zelitrex", "Valaciclovir Sandoz"],
          strengths: ["500mg", "1000mg"],
          forms: ["Comprim√©"],
          indications: ["Zona", "Herp√®s g√©nital", "Herp√®s labial"],
          dosage: {
            zona: "1000mg 3x/j pendant 7 jours",
            herpes: "500mg 2x/j pendant 5 jours",
          },
          contraindications: ["Hypersensibilit√©", "IRC s√©v√®re"],
          cost: "800-1200 MUR/traitement",
          availability: "moderate",
        },
      ],
      cardiovascular: [
        {
          name: "Amlodipine",
          brands: ["Norvasc", "Amlodac", "Amlocard"],
          strengths: ["2.5mg", "5mg", "10mg"],
          forms: ["Comprim√©"],
          indications: ["HTA", "Angor stable"],
          dosage: {
            hta: "5-10mg 1x/j le matin",
            angor: "5-10mg 1x/j",
          },
          contraindications: ["Choc cardiog√©nique", "St√©nose aortique s√©v√®re"],
          interactions: ["Simvastatine", "Digoxine"],
          cost: "150-250 MUR/mois",
          availability: "high",
        },
      ],
      analgesics: [
        {
          name: "Tramadol",
          brands: ["Contramal", "Topalgic", "Tramadol"],
          strengths: ["50mg", "100mg", "150mg", "200mg"],
          forms: ["G√©lule", "Comprim√© LP", "Injectable"],
          indications: ["Douleur mod√©r√©e √† s√©v√®re"],
          dosage: {
            standard: "50-100mg 4x/j max",
            lp: "100-200mg 2x/j",
          },
          contraindications: ["√âpilepsie", "IMAO", "Insuffisance respiratoire"],
          cost: "120-250 MUR/bo√Æte",
          availability: "moderate",
        },
      ],
    }
  }

  // ========================================
  // üîß M√âTHODES UTILITAIRES EXPERTES
  // ========================================
  isAPIConfigured() {
    return (
      this.apiConfig.openai.key &&
      this.apiConfig.openai.key !== "undefined" &&
      this.apiConfig.openai.key.startsWith("sk-")
    )
  }

  getAPIStatus() {
    return {
      openai: this.isAPIConfigured(),
      mode: this.isAPIConfigured() ? "EXPERT_MODE" : "LOCAL_MODE",
    }
  }

  mapConfidenceToNumeric(level) {
    const mapping = { high: 0.9, moderate: 0.7, low: 0.5 }
    return mapping[level] || 0.6
  }

  generateConsultationId() {
    return `CONS-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
  }

  generatePrescriptionId() {
    return `PRESC-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
  }

  // ========================================
  // üè• DIAGNOSTIC LOCAL EXPERT (FALLBACK)
  // ========================================
  async generateLocalExpertDiagnosis(patientData, clinicalPresentation) {
    await this.simulateProcessing(2000)

    const localDiagnoses = []
    const symptoms = clinicalPresentation.symptoms?.toLowerCase() || ""
    const complaint = clinicalPresentation.chiefComplaint?.toLowerCase() || ""

    // Diagnostic expert local pour ZONA
    if (
      symptoms.includes("zona") ||
      symptoms.includes("√©ruption") ||
      symptoms.includes("v√©sicule") ||
      (symptoms.includes("douleur") && symptoms.includes("unilat√©ral"))
    ) {
      localDiagnoses.push({
        diagnosis: "Zona (Herp√®s Zoster)",
        icd10_code: "B02.9",
        probability_percent: 85,
        clinical_reasoning:
          "√âruption v√©siculeuse unilat√©rale suivant un trajet dermatomal √©vocatrice de zona. N√©cessite traitement antiviral pr√©coce (< 72h) pour r√©duire les complications et la douleur post-zost√©rienne.",
        severity: "moderate",
        urgency: "urgent",
        prognosis: "Bon avec traitement antiviral pr√©coce. Risque de douleurs post-zost√©riennes chez sujet √¢g√©",
        supporting_evidence: ["√âruption dermatomale", "Douleur neuropathique", "V√©sicules sur base √©ryth√©mateuse"],
        red_flags: ["Atteinte ophtalmique", "Immunod√©pression", "Zona g√©n√©ralis√©"],
        complications: ["Douleurs post-zost√©riennes", "Surinfection bact√©rienne", "Atteinte neurologique"],
      })
    }

    // Questions cliniques expertes
    const clinicalQuestions = [
      {
        question: "Pouvez-vous d√©crire pr√©cis√©ment les caract√©ristiques de l'√©ruption cutan√©e ?",
        rationale: "Diff√©rencier zona d'autres dermatoses",
        category: "symptomatology",
      },
      {
        question: "La douleur a-t-elle pr√©c√©d√© l'√©ruption de quelques jours ?",
        rationale: "Caract√©ristique du zona dans sa phase prodromique",
        category: "history",
      },
      {
        question: "Y a-t-il des facteurs d'immunod√©pression ?",
        rationale: "Risque de complications et forme s√©v√®re",
        category: "risk_factors",
      },
    ]

    return {
      clinicalAnalysis: {
        differential_diagnosis: localDiagnoses,
        confidence_level: "moderate",
        diagnoses: localDiagnoses,
        confidence: 0.75,
        clinical_questions: clinicalQuestions,
        expert_notes: "Diagnostic bas√© sur pr√©sentation clinique. Confirmation par examen clinique recommand√©e.",
      },
      processingTime: 2000,
      confidence: 0.75,
      source: "Expert Local Medical Database",
      consultationId: this.generateConsultationId(),
      timestamp: new Date().toISOString(),
      clinicalQuestions: clinicalQuestions,
    }
  }

  // ========================================
  // üíä PRESCRIPTION LOCALE EXPERTE (FALLBACK)
  // ========================================
  async generateLocalExpertPrescription(diagnoses, patientData) {
    await this.simulateProcessing(1500)

    const medications = []

    diagnoses.forEach((diag) => {
      if (diag.diagnosis.toLowerCase().includes("zona")) {
        // Prescription EXPERTE pour zona
        medications.push({
          id: Date.now(),
          medication_name: "Aciclovir",
          brand_name: "Zovirax",
          strength: "800mg",
          pharmaceutical_form: "Comprim√©",
          quantity: "35",
          dosage_regimen: {
            dose: "800mg",
            frequency: "5 fois par jour",
            timing: "Toutes les 4 heures sauf la nuit",
            duration: "7 jours",
            route: "Orale",
          },
          instructions: {
            french:
              "Prendre 800mg toutes les 4 heures pendant la journ√©e (5 prises/jour) pendant 7 jours. Commencer le plus t√¥t possible. Bien s'hydrater.",
          },
          indication: "Zona (Herp√®s Zoster)",
          contraindications: ["Hypersensibilit√© √† l'aciclovir", "Insuffisance r√©nale s√©v√®re"],
          side_effects: ["Naus√©es", "C√©phal√©es", "√âruption cutan√©e"],
          cost_information: {
            total_cost_mur: "350-450 MUR",
          },
        })

        // Antalgique pour douleurs zost√©riennes
        medications.push({
          id: Date.now() + 1,
          medication_name: "Tramadol",
          brand_name: "Contramal",
          strength: "50mg",
          pharmaceutical_form: "G√©lule",
          quantity: "20",
          dosage_regimen: {
            dose: "50mg",
            frequency: "3 fois par jour si besoin",
            timing: "Aux repas",
            duration: "7-10 jours",
            route: "Orale",
          },
          instructions: {
            french: "Prendre 50mg 3 fois par jour si douleurs importantes. Ne pas d√©passer 300mg/jour.",
          },
          indication: "Douleurs zost√©riennes",
          cost_information: {
            total_cost_mur: "120-180 MUR",
          },
        })
      }
    })

    return {
      prescription: {
        medications,
        follow_up_instructions: {
          next_appointment: "Dans 1 semaine pour zona",
          warning_signs: [
            "Aggravation des douleurs",
            "Signes de surinfection",
            "Atteinte oculaire",
            "C√©phal√©es intenses",
          ],
          monitoring_parameters: ["√âvolution √©ruption", "Douleur"],
        },
      },
      prescriptionId: this.generatePrescriptionId(),
      source: "Expert Local Prescription Database",
      clinicalJustification:
        "Traitement antiviral pr√©coce du zona pour r√©duire dur√©e et complications. Antalgique adapt√© aux douleurs neuropathiques.",
      monitoringPlan: "Suivi √† 1 semaine pour √©valuer r√©ponse au traitement et d√©pistage complications.",
    }
  }

  async simulateProcessing(duration) {
    return new Promise((resolve) => setTimeout(resolve, duration))
  }

  initializeMedicalHistoryDatabase() {
    return {
      cardiovascular: ["Hypertension art√©rielle", "Infarctus du myocarde", "Insuffisance cardiaque"],
      endocrine: ["Diab√®te type 1", "Diab√®te type 2", "Hypothyro√Ødie"],
      respiratory: ["Asthme", "BPCO", "Tuberculose"],
    }
  }

  initializeDrugInteractionChecker() {
    return {
      major_interactions: [],
      moderate_interactions: [],
    }
  }

  checkDrugInteractions(medications) {
    return {
      interactions: [],
      hasInteractions: false,
      riskLevel: "low",
    }
  }

  initializeClinicalQuestions() {
    return {}
  }
}

// ========================================
// ‚ùì COMPOSANT QUESTIONS CLINIQUES EXPERTES
// ========================================
const ClinicalQuestionsPanel = ({ questions, onAnswerQuestion, answers }) => {
  if (!questions || questions.length === 0) return null

  return (
    <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
      <h3 className="text-xl font-bold mb-4 flex items-center">
        <HelpCircle className="h-6 w-6 mr-2 text-orange-600" />
        Questions Cliniques Expertes
      </h3>
      <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-4">
        <div className="flex items-start">
          <MessageSquare className="h-5 w-5 text-orange-600 mr-2 mt-0.5" />
          <div className="text-sm text-orange-800">
            <div className="font-semibold mb-1">ü©∫ Questions d'Expert</div>
            <div className="text-xs">
              Ces questions permettent d'affiner le diagnostic diff√©rentiel et d'orienter la prise en charge
              th√©rapeutique selon les meilleures pratiques cliniques.
            </div>
          </div>
        </div>
      </div>

      <div className="space-y-4">
        {questions.map((q, index) => (
          <div key={index} className="border border-gray-200 rounded-lg p-4">
            <div className="flex items-start justify-between mb-3">
              <div className="flex-1">
                <h4 className="font-semibold text-gray-900 mb-2">{q.question}</h4>
                <div className="text-sm text-gray-600 mb-2">
                  <strong>Justification:</strong> {q.rationale}
                </div>
                <div className="text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded inline-block">{q.category}</div>
              </div>
            </div>

            <div className="space-y-2">
              <textarea
                value={answers?.[index] || ""}
                onChange={(e) => onAnswerQuestion(index, e.target.value)}
                rows={3}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
                placeholder="R√©ponse d√©taill√©e √† cette question clinique..."
              />
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}

// ========================================
// üéõÔ∏è PANNEAU CONFIGURATION EXPERT
// ========================================
const ExpertConfigPanel = ({ medicalExpert, onConfigChange }) => {
  const [showConfig, setShowConfig] = useState(false)
  const [apiKey, setApiKey] = useState("")
  const [testResults, setTestResults] = useState({})
  const [isTesting, setIsTesting] = useState(false)

  const apiStatus = medicalExpert.getAPIStatus()

  const testAPIs = async () => {
    setIsTesting(true)
    const results = {}

    try {
      if (apiKey && apiKey.startsWith("sk-")) {
        results.openai = "CONFIGUR√â"
      } else {
        results.openai = "CL√â REQUISE"
      }
    } catch (error) {
      results.openai = "ERREUR"
    }

    results.guidelines = "DISPONIBLE"
    results.mauritian_db = "DISPONIBLE"
    results.expert_system = "ACTIF"

    setTestResults(results)
    setIsTesting(false)

    if (onConfigChange && apiKey.startsWith("sk-")) {
      onConfigChange(apiKey)
    }
  }

  const saveAPIKey = () => {
    if (apiKey && apiKey.startsWith("sk-")) {
      medicalExpert.apiConfig.openai.key = apiKey
      if (typeof window !== "undefined") {
        window.localStorage?.setItem("openai_key", apiKey)
      }
      testAPIs()
    }
  }

  return (
    <div className="bg-gradient-to-r from-slate-800 via-blue-900 to-indigo-900 text-white p-6 rounded-xl mb-6 shadow-xl">
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <div
            className={`h-4 w-4 rounded-full mr-4 ${
              apiStatus.openai ? "bg-green-400 animate-pulse shadow-lg" : "bg-amber-400 animate-bounce"
            }`}
          ></div>
          <div>
            <h3 className="text-xl font-bold">
              Mode Expert: {apiStatus.mode === "EXPERT_MODE" ? "IA M√©dicale Niveau Interniste" : "Base Locale Experte"}
            </h3>
            <p className="text-blue-200 text-sm">
              {apiStatus.openai
                ? "Diagnostic IA expert + Questions cliniques + Prescription guideline-based"
                : "Syst√®me m√©dical expert local avec base m√©dicamenteuse mauricienne"}
            </p>
          </div>
        </div>

        <button
          onClick={() => setShowConfig(!showConfig)}
          className="px-6 py-3 bg-blue-600 hover:bg-blue-700 rounded-xl font-semibold flex items-center transition-all shadow-lg"
        >
          <Settings className="h-5 w-5 mr-2" />
          {showConfig ? "Masquer Configuration" : "Configuration Expert"}
        </button>
      </div>

      {showConfig && (
        <div className="mt-6 space-y-6">
          <div className="bg-white bg-opacity-10 rounded-xl p-4">
            <label className="block text-sm font-semibold mb-3 text-blue-100">
              üîë Cl√© API OpenAI (Diagnostic IA Niveau Interniste)
            </label>
            <div className="flex gap-3">
              <input
                type="password"
                value={apiKey}
                onChange={(e) => setApiKey(e.target.value)}
                placeholder="sk-proj-..."
                className="flex-1 p-3 rounded-lg bg-slate-700 text-white border border-slate-600 focus:border-blue-400 focus:ring-2 focus:ring-blue-400"
              />
              <button
                onClick={saveAPIKey}
                disabled={!apiKey}
                className="px-6 py-3 bg-green-600 hover:bg-green-700 rounded-lg font-semibold disabled:opacity-50 transition-all"
              >
                Sauvegarder
              </button>
            </div>
          </div>

          <div className="flex justify-between items-center bg-white bg-opacity-10 rounded-lg p-4">
            <div className="text-sm text-blue-200">
              üí° <strong>Mode Expert:</strong> Diagnostic niveau interniste + Questions cliniques + Prescription
              evidence-based + Base m√©dicamenteuse Maurice
            </div>
            <button
              onClick={testAPIs}
              disabled={isTesting}
              className="px-6 py-3 bg-purple-600 hover:bg-purple-700 rounded-lg font-semibold flex items-center transition-all"
            >
              {isTesting ? <Loader className="animate-spin h-5 w-5 mr-2" /> : <Search className="h-5 w-5 mr-2" />}
              Tester Syst√®me
            </button>
          </div>

          {Object.keys(testResults).length > 0 && (
            <div className="bg-white bg-opacity-10 rounded-lg p-4">
              <h4 className="font-semibold mb-3">√âtat du Syst√®me Expert</h4>
              <div className="grid grid-cols-2 gap-4 text-sm">
                {Object.entries(testResults).map(([key, status]) => (
                  <div key={key} className="flex justify-between">
                    <span className="capitalize">{key.replace("_", " ")}:</span>
                    <span
                      className={
                        status === "CONFIGUR√â" || status === "DISPONIBLE" || status === "ACTIF"
                          ? "text-green-300"
                          : "text-yellow-300"
                      }
                    >
                      {status}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  )
}

// ========================================
// üè• COMPOSANT PRINCIPAL - SYST√àME M√âDICAL EXPERT NIVEAU INTERNISTE
// ========================================
const AdvancedMedicalExpertSystem = () => {
  // Modifier l'√©tat patientData pour inclure familyHistory
  const [patientData, setPatientData] = useState({
    name: "",
    age: "",
    gender: "",
    weight: "",
    height: "",
    ethnicity: "",
    medicalHistory: [],
    surgicalHistory: [],
    currentMedications: [],
    allergies: [],
    familyHistory: [], // NOUVEAU
    smokingStatus: "",
    packYears: "",
    smokingDetails: "",
    alcoholStatus: "",
    alcoholDetails: "",
    cannabisStatus: "",
    otherSubstances: "",
    activityLevel: "",
    activityType: "",
    familyCardiovascular: [],
    familyOncology: [],
    familyMetabolic: [],
    familyOther: [],
    familyDetails: "",
  })

  const [clinicalPresentation, setClinicalPresentation] = useState({
    chiefComplaint: "",
    symptoms: "",
    duration: "",
    severity: "",
    associatedSymptoms: "",
    systolicBP: "",
    diastolicBP: "",
    heartRate: "",
    temperature: "",
    oxygenSaturation: "",
  })

  const [diagnosis, setDiagnosis] = useState(null)
  const [selectedDiagnoses, setSelectedDiagnoses] = useState([])
  const [prescription, setPrescription] = useState(null)
  const [workup, setWorkup] = useState(null)
  const [showWorkupOrder, setShowWorkupOrder] = useState(false)
  const [showConsultationReport, setShowConsultationReport] = useState(false)

  // Ajouter de nouveaux √©tats pour le processus en deux √©tapes
  const [clinicalQuestions, setClinicalQuestions] = useState(null)
  const [clinicalAnswers, setClinicalAnswers] = useState({})

  // √âtats interface
  const [isProcessing, setIsProcessing] = useState(false)
  const [errors, setErrors] = useState({})

  // Service m√©dical expert
  const [medicalExpert] = useState(new AdvancedMedicalExpert())
  const [apiStatus, setApiStatus] = useState(medicalExpert.getAPIStatus())

  // D√©clarer currentStep et setCurrentStep avec useState
  const [currentStep, setCurrentStep] = useState("patient")

  // Modifier les steps pour inclure l'√©tape questions
  const steps = [
    {
      id: "patient",
      label: "Patient",
      icon: User,
      completed: patientData.name && patientData.age && patientData.gender,
    },
    {
      id: "clinical",
      label: "Clinique",
      icon: Stethoscope,
      completed: clinicalPresentation.chiefComplaint && clinicalPresentation.symptoms,
    },
    {
      id: "questions",
      label: "Questions",
      icon: HelpCircle,
      completed: clinicalQuestions && Object.keys(clinicalAnswers).length > 0,
    },
    {
      id: "diagnosis",
      label: "Diagnostic",
      icon: Brain,
      completed: diagnosis && diagnosis.clinicalAnalysis?.diagnoses?.length > 0,
    },
    {
      id: "prescription",
      label: "Prescription",
      icon: Pill,
      completed: prescription,
    },
    {
      id: "workup",
      label: "Examens",
      icon: Search,
      completed: workup,
    },
    {
      id: "summary",
      label: "Documents",
      icon: FileText,
      completed: prescription && workup,
    },
  ]

  // Callback configuration API
  const handleAPIConfigChange = (newApiKey) => {
    medicalExpert.apiConfig.openai.key = newApiKey
    setApiStatus(medicalExpert.getAPIStatus())
  }

  // Nouvelle m√©thode pour g√©n√©rer les questions cliniques
  const handleGenerateQuestions = async () => {
    if (!clinicalPresentation.chiefComplaint.trim() || !clinicalPresentation.symptoms.trim()) {
      setErrors({ questions: "Motif de consultation et sympt√¥mes requis" })
      return
    }

    setIsProcessing(true)
    setErrors({})

    try {
      const result = await medicalExpert.generateInitialClinicalQuestions(patientData, clinicalPresentation)
      setClinicalQuestions(result)
      setCurrentStep("questions")
    } catch (error) {
      setErrors({
        questions: `Erreur g√©n√©ration questions: ${error.message}`,
      })
    } finally {
      setIsProcessing(false)
    }
  }

  // Modifier la m√©thode handleExpertDiagnosis pour utiliser les r√©ponses
  const handleExpertDiagnosis = async () => {
    if (!clinicalQuestions || Object.keys(clinicalAnswers).length === 0) {
      setErrors({ diagnosis: "Veuillez r√©pondre aux questions cliniques" })
      return
    }

    setIsProcessing(true)
    setErrors({})

    try {
      const result = await medicalExpert.performExpertClinicalAnalysisWithAnswers(
        patientData,
        clinicalPresentation,
        clinicalAnswers,
      )

      // Cr√©er l'objet diagnosis avec la structure attendue
      const diagnosisResult = {
        clinicalAnalysis: result,
        processingTime: Date.now() - Date.now(), // Temps de traitement
        confidence: result.confidence || 0.8,
        source: "Expert Medical AI + Clinical Guidelines",
        timestamp: new Date().toISOString(),
        consultationId: medicalExpert.generateConsultationId(),
        clinicalQuestions: result.clinical_questions || [],
        differentialWorkup: result.differential_workup || [],
      }

      setDiagnosis(diagnosisResult)
      setCurrentStep("diagnosis")
    } catch (error) {
      console.error("Erreur diagnostic:", error)
      setErrors({
        diagnosis: `Erreur analyse: ${error.message}`,
      })
    } finally {
      setIsProcessing(false)
    }
  }

  // Gestion diagnostic expert
  const performExpertClinicalAnalysis = async () => {
    if (!clinicalPresentation.chiefComplaint.trim() || !clinicalPresentation.symptoms.trim()) {
      setErrors({ diagnosis: "Motif de consultation et sympt√¥mes requis" })
      return
    }

    setIsProcessing(true)
    setErrors({})

    try {
      const result = await medicalExpert.generateComprehensiveDiagnosis(patientData, clinicalPresentation)
      setDiagnosis(result)
      setCurrentStep("diagnosis")
    } catch (error) {
      setErrors({
        diagnosis: `Erreur analyse: ${error.message}`,
      })
    } finally {
      setIsProcessing(false)
    }
  }

  // Gestion prescription experte
  const handleExpertPrescription = async () => {
    if (selectedDiagnoses.length === 0) {
      setErrors({ prescription: "S√©lectionnez au moins un diagnostic" })
      return
    }

    setIsProcessing(true)
    setErrors({})

    try {
      const result = await medicalExpert.generateExpertPrescription(selectedDiagnoses, patientData, {
        clinicalPresentation,
        diagnosis,
        clinicalAnswers,
      })
      setPrescription(result)
      setCurrentStep("prescription")
    } catch (error) {
      setErrors({
        prescription: `Erreur prescription: ${error.message}`,
      })
    } finally {
      setIsProcessing(false)
    }
  }

  // Gestion prescription examens
  const handleExpertWorkup = async () => {
    if (selectedDiagnoses.length === 0) {
      setErrors({ workup: "S√©lectionnez au moins un diagnostic" })
      return
    }

    setIsProcessing(true)
    setErrors({})

    try {
      const result = await medicalExpert.generateExpertWorkup(selectedDiagnoses, patientData, {
        clinicalPresentation,
        diagnosis,
        clinicalAnswers,
      })
      setWorkup(result)
      setCurrentStep("workup")
    } catch (error) {
      setErrors({
        workup: `Erreur prescription examens: ${error.message}`,
      })
    } finally {
      setIsProcessing(false)
    }
  }

  // Gestion r√©ponses questions cliniques
  const handleAnswerQuestion = (index, answer) => {
    setClinicalAnswers((prev) => ({
      ...prev,
      [index]: answer,
    }))
  }

  // Mise √† jour donn√©es patient
  const updatePatientData = (field, value) => {
    setPatientData((prev) => ({ ...prev, [field]: value }))
  }

  // Mise √† jour pr√©sentation clinique
  const updateClinicalPresentation = (field, value) => {
    setClinicalPresentation((prev) => ({ ...prev, [field]: value }))
  }

  return (
    <div className="max-w-7xl mx-auto p-4 bg-gray-50 min-h-screen">
      {/* En-t√™te syst√®me expert */}
      <div className="bg-gradient-to-r from-indigo-600 via-purple-600 to-blue-600 text-white p-8 rounded-2xl mb-6 shadow-2xl">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-4xl font-bold flex items-center">
              <Brain className="h-10 w-10 mr-4" />
              Syst√®me M√©dical Expert - Niveau Interniste
            </h1>
            <p className="text-indigo-100 mt-3 text-lg">
              Diagnostic IA Expert + Questions Cliniques + Prescription Evidence-Based - Maurice
            </p>
          </div>
          <div className="text-right">
            <div className="text-sm text-indigo-200">Confiance Diagnostique</div>
            <div className="text-3xl font-bold">{diagnosis ? Math.round(diagnosis.confidence * 100) : "--"}%</div>
            <div className="text-xs text-indigo-200">
              {apiStatus.mode === "EXPERT_MODE" ? "ü©∫ Mode Interniste" : "üè† Mode Expert Local"}
            </div>
          </div>
        </div>

        {/* M√©triques de performance */}
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mt-6">
          <div className="bg-white bg-opacity-20 rounded-xl p-4 text-center">
            <Activity className="h-6 w-6 mx-auto mb-2" />
            <div className="text-xs">Temps Analyse</div>
            <div className="font-bold">{diagnosis ? `${diagnosis.processingTime}ms` : "--"}</div>
          </div>
          <div className="bg-white bg-opacity-20 rounded-xl p-4 text-center">
            <Target className="h-6 w-6 mx-auto mb-2" />
            <div className="text-xs">Diagnostics</div>
            <div className="font-bold">{diagnosis ? diagnosis.clinicalAnalysis?.diagnoses?.length || 0 : "--"}</div>
          </div>
          <div className="bg-white bg-opacity-20 rounded-xl p-4 text-center">
            <HelpCircle className="h-6 w-6 mx-auto mb-2" />
            <div className="text-xs">Questions</div>
            <div className="font-bold">{diagnosis ? diagnosis.clinicalQuestions?.length || 0 : "--"}</div>
          </div>
          <div className="bg-white bg-opacity-20 rounded-xl p-4 text-center">
            <Award className="h-6 w-6 mx-auto mb-2" />
            <div className="text-xs">Niveau</div>
            <div className="font-bold text-xs">Interniste</div>
          </div>
          <div className="bg-white bg-opacity-20 rounded-xl p-4 text-center">
            <Shield className="h-6 w-6 mx-auto mb-2" />
            <div className="text-xs">Maurice</div>
            <div className="font-bold">Adapt√©</div>
          </div>
        </div>
      </div>

      {/* Panneau configuration expert */}
      <ExpertConfigPanel medicalExpert={medicalExpert} onConfigChange={handleAPIConfigChange} />

      {/* Navigation workflow */}
      <div className="bg-white rounded-xl shadow-lg mb-6 p-6">
        <div className="flex items-center justify-between">
          {steps.map((step, index) => (
            <div key={step.id} className="flex items-center">
              <div
                className={`flex items-center justify-center w-12 h-12 rounded-full ${
                  step.completed
                    ? "bg-green-500 text-white shadow-lg"
                    : currentStep === step.id
                      ? "bg-blue-500 text-white shadow-lg"
                      : "bg-gray-200 text-gray-600"
                }`}
              >
                {step.completed ? <CheckCircle className="h-6 w-6" /> : <step.icon className="h-6 w-6" />}
              </div>
              <span className={`ml-3 font-semibold ${currentStep === step.id ? "text-blue-600" : "text-gray-600"}`}>
                {step.label}
              </span>
              {index < steps.length - 1 && <div className="w-12 h-1 bg-gray-300 ml-6 mr-6 rounded" />}
            </div>
          ))}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Panneau principal */}
        <div className="lg:col-span-2 space-y-6">
          {/* Section Patient COMPL√àTE */}
          {currentStep === "patient" && (
            <div className="space-y-6">
              {/* Donn√©es d√©mographiques */}
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h2 className="text-2xl font-bold mb-6 flex items-center">
                  <User className="h-6 w-6 mr-3 text-blue-600" />
                  Donn√©es D√©mographiques
                </h2>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Nom complet *</label>
                    <input
                      type="text"
                      value={patientData.name}
                      onChange={(e) => updatePatientData("name", e.target.value)}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      placeholder="Nom Pr√©nom"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">√Çge *</label>
                    <input
                      type="number"
                      value={patientData.age}
                      onChange={(e) => updatePatientData("age", Number.parseInt(e.target.value))}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      placeholder="√Çge en ann√©es"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Genre *</label>
                    <select
                      value={patientData.gender}
                      onChange={(e) => updatePatientData("gender", e.target.value)}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">S√©lectionner</option>
                      <option value="M">Masculin</option>
                      <option value="F">F√©minin</option>
                      <option value="O">Autre</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      Ethnie (contexte mauricien)
                    </label>
                    <select
                      value={patientData.ethnicity}
                      onChange={(e) => updatePatientData("ethnicity", e.target.value)}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Non sp√©cifi√©</option>
                      <option value="indo-mauricienne">Indo-mauricienne</option>
                      <option value="cr√©ole">Cr√©ole</option>
                      <option value="chinoise">Chinoise</option>
                      <option value="europ√©enne">Europ√©enne</option>
                      <option value="mixte">Mixte</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Poids (kg)</label>
                    <input
                      type="number"
                      step="0.1"
                      value={patientData.weight}
                      onChange={(e) => updatePatientData("weight", Number.parseFloat(e.target.value))}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      placeholder="70.0"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Taille (cm)</label>
                    <input
                      type="number"
                      value={patientData.height}
                      onChange={(e) => updatePatientData("height", Number.parseFloat(e.target.value))}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      placeholder="170"
                    />
                  </div>
                </div>

                {/* Calcul IMC automatique */}
                {patientData.weight && patientData.height && (
                  <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <div className="text-sm font-semibold text-blue-800">
                      IMC: {Math.round((patientData.weight / Math.pow(patientData.height / 100, 2)) * 10) / 10} kg/m¬≤
                      {(() => {
                        const imc = patientData.weight / Math.pow(patientData.height / 100, 2)
                        if (imc < 18.5) return " (Insuffisance pond√©rale)"
                        if (imc < 25) return " (Normal)"
                        if (imc < 30) return " (Surpoids)"
                        return " (Ob√©sit√©)"
                      })()}
                    </div>
                  </div>
                )}
              </div>

              {/* Ant√©c√©dents M√©dicaux */}
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-bold mb-4 flex items-center">
                  <FileText className="h-5 w-5 mr-2 text-red-600" />
                  Ant√©c√©dents M√©dicaux
                </h3>

                <div className="space-y-4">
                  {patientData.medicalHistory.map((history, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        {/* Remplacer le champ condition par un select avec options pr√©d√©finies */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Pathologie</label>
                          <select
                            value={history.condition}
                            onChange={(e) => {
                              const newHistory = [...patientData.medicalHistory]
                              newHistory[index].condition = e.target.value
                              updatePatientData("medicalHistory", newHistory)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                          >
                            <option value="">S√©lectionner</option>
                            <optgroup label="Cardiovasculaire">
                              <option value="Hypertension art√©rielle">Hypertension art√©rielle</option>
                              <option value="Infarctus du myocarde">Infarctus du myocarde</option>
                              <option value="Insuffisance cardiaque">Insuffisance cardiaque</option>
                              <option value="Fibrillation auriculaire">Fibrillation auriculaire</option>
                              <option value="Valvulopathie">Valvulopathie</option>
                              <option value="Art√©riopathie">Art√©riopathie</option>
                            </optgroup>
                            <optgroup label="Endocrinien">
                              <option value="Diab√®te type 1">Diab√®te type 1</option>
                              <option value="Diab√®te type 2">Diab√®te type 2</option>
                              <option value="Hypothyro√Ødie">Hypothyro√Ødie</option>
                              <option value="Hyperthyro√Ødie">Hyperthyro√Ødie</option>
                              <option value="Syndrome m√©tabolique">Syndrome m√©tabolique</option>
                            </optgroup>
                            <optgroup label="Respiratoire">
                              <option value="Asthme">Asthme</option>
                              <option value="BPCO">BPCO</option>
                              <option value="Apn√©e du sommeil">Apn√©e du sommeil</option>
                              <option value="Tuberculose">Tuberculose</option>
                            </optgroup>
                            <optgroup label="Digestif">
                              <option value="RGO">Reflux gastro-≈ìsophagien</option>
                              <option value="Ulc√®re gastroduod√©nal">Ulc√®re gastroduod√©nal</option>
                              <option value="Maladie de Crohn">Maladie de Crohn</option>
                              <option value="Rectocolite h√©morragique">Rectocolite h√©morragique</option>
                              <option value="H√©patite B">H√©patite B</option>
                              <option value="H√©patite C">H√©patite C</option>
                            </optgroup>
                            <optgroup label="Neurologique">
                              <option value="√âpilepsie">√âpilepsie</option>
                              <option value="Migraine">Migraine</option>
                              <option value="AVC">AVC</option>
                              <option value="D√©pression">D√©pression</option>
                              <option value="Anxi√©t√©">Trouble anxieux</option>
                            </optgroup>
                            <optgroup label="Rhumatologique">
                              <option value="Arthrose">Arthrose</option>
                              <option value="Polyarthrite rhumato√Øde">Polyarthrite rhumato√Øde</option>
                              <option value="Lupus">Lupus</option>
                              <option value="Goutte">Goutte</option>
                            </optgroup>
                            <optgroup label="Autres">
                              <option value="Insuffisance r√©nale">Insuffisance r√©nale</option>
                              <option value="An√©mie">An√©mie</option>
                              <option value="Ost√©oporose">Ost√©oporose</option>
                              <option value="Autre">Autre (pr√©ciser)</option>
                            </optgroup>
                          </select>
                          {history.condition === "Autre" && (
                            <input
                              type="text"
                              value={history.customCondition || ""}
                              onChange={(e) => {
                                const newHistory = [...patientData.medicalHistory]
                                newHistory[index].customCondition = e.target.value
                                updatePatientData("medicalHistory", newHistory)
                              }}
                              className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 mt-2"
                              placeholder="Pr√©ciser la pathologie"
                            />
                          )}
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Ann√©e de diagnostic</label>
                          <input
                            type="number"
                            value={history.year}
                            onChange={(e) => {
                              const newHistory = [...patientData.medicalHistory]
                              newHistory[index].year = e.target.value
                              updatePatientData("medicalHistory", newHistory)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                            placeholder="2020"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Statut</label>
                          <select
                            value={history.status}
                            onChange={(e) => {
                              const newHistory = [...patientData.medicalHistory]
                              newHistory[index].status = e.target.value
                              updatePatientData("medicalHistory", newHistory)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                          >
                            <option value="active">Actif</option>
                            <option value="controlled">Contr√¥l√©</option>
                            <option value="resolved">R√©solu</option>
                            <option value="chronic">Chronique</option>
                          </select>
                        </div>
                      </div>
                      <button
                        onClick={() => {
                          const newHistory = patientData.medicalHistory.filter((_, i) => i !== index)
                          updatePatientData("medicalHistory", newHistory)
                        }}
                        className="mt-2 text-red-600 hover:text-red-800 text-sm"
                      >
                        Supprimer
                      </button>
                    </div>
                  ))}

                  <button
                    onClick={() => {
                      const newHistory = [
                        ...patientData.medicalHistory,
                        { condition: "", year: "", status: "active", severity: "moderate" },
                      ]
                      updatePatientData("medicalHistory", newHistory)
                    }}
                    className="w-full p-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-blue-500 hover:text-blue-600"
                  >
                    + Ajouter un ant√©c√©dent m√©dical
                  </button>
                </div>
              </div>

              {/* Ant√©c√©dents Chirurgicaux */}
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-bold mb-4 flex items-center">
                  <FileText className="h-5 w-5 mr-2 text-orange-600" />
                  Ant√©c√©dents Chirurgicaux
                </h3>

                <div className="space-y-4">
                  {patientData.surgicalHistory.map((surgery, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Intervention</label>
                          <input
                            type="text"
                            value={surgery.procedure}
                            onChange={(e) => {
                              const newSurgery = [...patientData.surgicalHistory]
                              newSurgery[index].procedure = e.target.value
                              updatePatientData("surgicalHistory", newSurgery)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                            placeholder="Ex: Appendicectomie"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Ann√©e</label>
                          <input
                            type="number"
                            value={surgery.year}
                            onChange={(e) => {
                              const newSurgery = [...patientData.surgicalHistory]
                              newSurgery[index].year = e.target.value
                              updatePatientData("surgicalHistory", newSurgery)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                            placeholder="2018"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Complications</label>
                          <select
                            value={surgery.complications}
                            onChange={(e) => {
                              const newSurgery = [...patientData.surgicalHistory]
                              newSurgery[index].complications = e.target.value
                              updatePatientData("surgicalHistory", newSurgery)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                          >
                            <option value="none">Aucune</option>
                            <option value="minor">Mineures</option>
                            <option value="major">Majeures</option>
                          </select>
                        </div>
                      </div>
                      <button
                        onClick={() => {
                          const newSurgery = patientData.surgicalHistory.filter((_, i) => i !== index)
                          updatePatientData("surgicalHistory", newSurgery)
                        }}
                        className="mt-2 text-red-600 hover:text-red-800 text-sm"
                      >
                        Supprimer
                      </button>
                    </div>
                  ))}

                  <button
                    onClick={() => {
                      const newSurgery = [
                        ...patientData.surgicalHistory,
                        { procedure: "", year: "", complications: "none" },
                      ]
                      updatePatientData("surgicalHistory", newSurgery)
                    }}
                    className="w-full p-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-blue-500 hover:text-blue-600"
                  >
                    + Ajouter un ant√©c√©dent chirurgical
                  </button>
                </div>
              </div>

              {/* Traitements Actuels */}
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-bold mb-4 flex items-center">
                  <Pill className="h-5 w-5 mr-2 text-green-600" />
                  Traitements M√©dicamenteux Actuels
                </h3>

                <div className="space-y-4">
                  {patientData.currentMedications.map((medication, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4">
                      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">M√©dicament</label>
                          <input
                            type="text"
                            value={medication.name}
                            onChange={(e) => {
                              const newMeds = [...patientData.currentMedications]
                              newMeds[index].name = e.target.value
                              updatePatientData("currentMedications", newMeds)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                            placeholder="Ex: Amlodipine"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Dosage</label>
                          <input
                            type="text"
                            value={medication.dosage}
                            onChange={(e) => {
                              const newMeds = [...patientData.currentMedications]
                              newMeds[index].dosage = e.target.value
                              updatePatientData("currentMedications", newMeds)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                            placeholder="5mg"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Fr√©quence</label>
                          <input
                            type="text"
                            value={medication.frequency}
                            onChange={(e) => {
                              const newMeds = [...patientData.currentMedications]
                              newMeds[index].frequency = e.target.value
                              updatePatientData("currentMedications", newMeds)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                            placeholder="1x/jour"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Indication</label>
                          <input
                            type="text"
                            value={medication.indication}
                            onChange={(e) => {
                              const newMeds = [...patientData.currentMedications]
                              newMeds[index].indication = e.target.value
                              updatePatientData("currentMedications", newMeds)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                            placeholder="HTA"
                          />
                        </div>
                      </div>
                      <button
                        onClick={() => {
                          const newMeds = patientData.currentMedications.filter((_, i) => i !== index)
                          updatePatientData("currentMedications", newMeds)
                        }}
                        className="mt-2 text-red-600 hover:text-red-800 text-sm"
                      >
                        Supprimer
                      </button>
                    </div>
                  ))}

                  <button
                    onClick={() => {
                      const newMeds = [
                        ...patientData.currentMedications,
                        { name: "", dosage: "", frequency: "", indication: "" },
                      ]
                      updatePatientData("currentMedications", newMeds)
                    }}
                    className="w-full p-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-blue-500 hover:text-blue-600"
                  >
                    + Ajouter un m√©dicament
                  </button>
                </div>
              </div>

              {/* Facteurs de Risque */}
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-bold mb-4 flex items-center">
                  <AlertTriangle className="h-5 w-5 mr-2 text-yellow-600" />
                  Facteurs de Risque
                </h3>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Tabagisme</label>
                    <select
                      value={patientData.smokingStatus}
                      onChange={(e) => updatePatientData("smokingStatus", e.target.value)}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Non renseign√©</option>
                      <option value="never">Jamais fum√©</option>
                      <option value="former">Ancien fumeur</option>
                      <option value="current">Fumeur actuel</option>
                    </select>
                    {(patientData.smokingStatus === "former" || patientData.smokingStatus === "current") && (
                      <input
                        type="number"
                        value={patientData.packYears}
                        onChange={(e) => updatePatientData("packYears", e.target.value)}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 mt-2"
                        placeholder="Paquets-ann√©es"
                      />
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Consommation d'alcool</label>
                    <select
                      value={patientData.alcoholStatus}
                      onChange={(e) => updatePatientData("alcoholStatus", e.target.value)}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Non renseign√©</option>
                      <option value="none">Aucune</option>
                      <option value="occasional">Occasionnelle</option>
                      <option value="moderate">Mod√©r√©e</option>
                      <option value="heavy">Importante</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Activit√© physique</label>
                    <select
                      value={patientData.activityLevel}
                      onChange={(e) => updatePatientData("activityLevel", e.target.value)}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Non renseign√©</option>
                      <option value="sedentary">S√©dentaire</option>
                      <option value="light">L√©g√®re</option>
                      <option value="moderate">Mod√©r√©e</option>
                      <option value="intense">Intense</option>
                    </select>
                  </div>
                </div>
              </div>

              {/* Ajouter apr√®s la section Facteurs de Risque */}
              {/* Ant√©c√©dents Familiaux */}
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-bold mb-4 flex items-center">
                  <Users className="h-5 w-5 mr-2 text-purple-600" />
                  Ant√©c√©dents Familiaux
                </h3>

                <div className="space-y-4">
                  {patientData.familyHistory.map((history, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4">
                      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Pathologie</label>
                          <select
                            value={history.condition}
                            onChange={(e) => {
                              const newHistory = [...patientData.familyHistory]
                              newHistory[index].condition = e.target.value
                              updatePatientData("familyHistory", newHistory)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                          >
                            <option value="">S√©lectionner</option>
                            <optgroup label="Cardiovasculaire">
                              <option value="Hypertension art√©rielle">Hypertension art√©rielle</option>
                              <option value="Infarctus du myocarde">Infarctus du myocarde</option>
                              <option value="AVC">AVC</option>
                              <option value="Insuffisance cardiaque">Insuffisance cardiaque</option>
                              <option value="Mort subite">Mort subite</option>
                            </optgroup>
                            <optgroup label="M√©tabolique">
                              <option value="Diab√®te type 1">Diab√®te type 1</option>
                              <option value="Diab√®te type 2">Diab√®te type 2</option>
                              <option value="Ob√©sit√©">Ob√©sit√©</option>
                              <option value="Dyslipid√©mie">Dyslipid√©mie</option>
                              <option value="Goutte">Goutte</option>
                            </optgroup>
                            <optgroup label="Oncologie">
                              <option value="Cancer du sein">Cancer du sein</option>
                              <option value="Cancer colorectal">Cancer colorectal</option>
                              <option value="Cancer de la prostate">Cancer de la prostate</option>
                              <option value="Cancer du poumon">Cancer du poumon</option>
                              <option value="Leuc√©mie">Leuc√©mie</option>
                            </optgroup>
                            <optgroup label="Neurologique">
                              <option value="Maladie d'Alzheimer">Maladie d'Alzheimer</option>
                              <option value="Maladie de Parkinson">Maladie de Parkinson</option>
                              <option value="√âpilepsie">√âpilepsie</option>
                              <option value="Scl√©rose en plaques">Scl√©rose en plaques</option>
                            </optgroup>
                            <optgroup label="Autres">
                              <option value="Asthme">Asthme</option>
                              <option value="BPCO">BPCO</option>
                              <option value="Maladie r√©nale">Maladie r√©nale</option>
                              <option value="Maladie h√©patique">Maladie h√©patique</option>
                              <option value="Autre">Autre</option>
                            </optgroup>
                          </select>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Lien de parent√©</label>
                          <select
                            value={history.relation}
                            onChange={(e) => {
                              const newHistory = [...patientData.familyHistory]
                              newHistory[index].relation = e.target.value
                              updatePatientData("familyHistory", newHistory)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                          >
                            <option value="">S√©lectionner</option>
                            <option value="P√®re">P√®re</option>
                            <option value="M√®re">M√®re</option>
                            <option value="Fr√®re">Fr√®re</option>
                            <option value="S≈ìur">S≈ìur</option>
                            <option value="Grand-p√®re paternel">Grand-p√®re paternel</option>
                            <option value="Grand-m√®re paternelle">Grand-m√®re paternelle</option>
                            <option value="Grand-p√®re maternel">Grand-p√®re maternel</option>
                            <option value="Grand-m√®re maternelle">Grand-m√®re maternelle</option>
                            <option value="Oncle">Oncle</option>
                            <option value="Tante">Tante</option>
                            <option value="Cousin(e)">Cousin(e)</option>
                          </select>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">√Çge au diagnostic</label>
                          <input
                            type="number"
                            value={history.age}
                            onChange={(e) => {
                              const newHistory = [...patientData.familyHistory]
                              newHistory[index].age = e.target.value
                              updatePatientData("familyHistory", newHistory)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                            placeholder="√Çge"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">Statut</label>
                          <select
                            value={history.status}
                            onChange={(e) => {
                              const newHistory = [...patientData.familyHistory]
                              newHistory[index].status = e.target.value
                              updatePatientData("familyHistory", newHistory)
                            }}
                            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                          >
                            <option value="vivant">Vivant</option>
                            <option value="d√©c√©d√©">D√©c√©d√©</option>
                            <option value="inconnu">Inconnu</option>
                          </select>
                        </div>
                      </div>
                      <button
                        onClick={() => {
                          const newHistory = patientData.familyHistory.filter((_, i) => i !== index)
                          updatePatientData("familyHistory", newHistory)
                        }}
                        className="mt-2 text-red-600 hover:text-red-800 text-sm"
                      >
                        Supprimer
                      </button>
                    </div>
                  ))}

                  <button
                    onClick={() => {
                      const newHistory = [
                        ...patientData.familyHistory,
                        { condition: "", relation: "", age: "", status: "vivant" },
                      ]
                      updatePatientData("familyHistory", newHistory)
                    }}
                    className="w-full p-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-purple-500 hover:text-purple-600"
                  >
                    + Ajouter un ant√©c√©dent familial
                  </button>
                </div>
              </div>

              <div className="mt-8 flex justify-end">
                <button
                  onClick={() => setCurrentStep("clinical")}
                  disabled={!patientData.name || !patientData.age || !patientData.gender}
                  className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center font-semibold"
                >
                  Continuer vers Pr√©sentation Clinique
                  <ChevronRight className="h-5 w-5 ml-2" />
                </button>
              </div>
            </div>
          )}

          {/* Section Pr√©sentation Clinique */}
          {currentStep === "clinical" && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-6 flex items-center">
                <Stethoscope className="h-6 w-6 mr-3 text-green-600" />
                Pr√©sentation Clinique Compl√®te
              </h2>

              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Motif de consultation *</label>
                  <input
                    type="text"
                    value={clinicalPresentation.chiefComplaint}
                    onChange={(e) => updateClinicalPresentation("chiefComplaint", e.target.value)}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Ex: √âruption cutan√©e douloureuse depuis 3 jours"
                  />
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">
                    Histoire de la maladie actuelle *
                  </label>
                  <textarea
                    value={clinicalPresentation.symptoms}
                    onChange={(e) => updateClinicalPresentation("symptoms", e.target.value)}
                    rows={6}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="D√©crivez en d√©tail: d√©but, √©volution, caract√©ristiques, facteurs aggravants/att√©nuants, sympt√¥mes associ√©s, traitements d√©j√† pris..."
                  />
                  <div className="text-xs text-gray-500 mt-2">
                    üí° Plus la description est pr√©cise et compl√®te, plus l'analyse IA sera pertinente et fiable
                  </div>
                </div>

                {/* Signes vitaux */}
                <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
                  <h3 className="text-lg font-semibold mb-4 flex items-center text-blue-800">
                    <Heart className="h-5 w-5 mr-2" />
                    Signes Vitaux
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-blue-700 mb-2">TA Systolique (mmHg)</label>
                      <input
                        type="number"
                        value={clinicalPresentation.systolicBP}
                        onChange={(e) => updateClinicalPresentation("systolicBP", e.target.value)}
                        className="w-full p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                        placeholder="120"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-blue-700 mb-2">TA Diastolique (mmHg)</label>
                      <input
                        type="number"
                        value={clinicalPresentation.diastolicBP}
                        onChange={(e) => updateClinicalPresentation("diastolicBP", e.target.value)}
                        className="w-full p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                        placeholder="80"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-blue-700 mb-2">Fr√©quence cardiaque (bpm)</label>
                      <input
                        type="number"
                        value={clinicalPresentation.heartRate}
                        onChange={(e) => updateClinicalPresentation("heartRate", e.target.value)}
                        className="w-full p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                        placeholder="72"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-blue-700 mb-2 flex items-center">
                        <Thermometer className="h-4 w-4 mr-1" />
                        Temp√©rature (¬∞C)
                      </label>
                      <input
                        type="number"
                        step="0.1"
                        value={clinicalPresentation.temperature}
                        onChange={(e) => updateClinicalPresentation("temperature", e.target.value)}
                        className="w-full p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                        placeholder="36.5"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {errors.diagnosis && (
                <div className="mt-6 bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg">
                  <AlertTriangle className="h-5 w-5 inline mr-2" />
                  {errors.diagnosis}
                </div>
              )}

              <div className="mt-8 flex justify-between">
                <button
                  onClick={() => setCurrentStep("patient")}
                  className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center font-semibold"
                >
                  Retour Patient
                </button>

                {/* Remplacer le bouton "Analyse Diagnostique Expert" par : */}
                <button
                  onClick={handleGenerateQuestions}
                  disabled={!clinicalPresentation.chiefComplaint || !clinicalPresentation.symptoms || isProcessing}
                  className="px-8 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center font-semibold"
                >
                  {isProcessing ? (
                    <>
                      <Loader className="animate-spin h-5 w-5 mr-2" />
                      G√©n√©ration questions...
                    </>
                  ) : (
                    <>
                      <HelpCircle className="h-5 w-5 mr-2" />
                      G√©n√©rer Questions Cliniques (√âtape 1)
                    </>
                  )}
                </button>
              </div>
            </div>
          )}

          {/* Section Questions Cliniques */}
          {currentStep === "questions" && clinicalQuestions && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-6 flex items-center">
                <HelpCircle className="h-6 w-6 mr-3 text-orange-600" />
                Questions Cliniques Expertes - √âtape 1
              </h2>

              {/* R√©flexion pr√©liminaire */}
              {clinicalQuestions.preliminaryThoughts && (
                <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-6">
                  <h3 className="font-semibold text-orange-800 mb-2">üß† R√©flexion Clinique Pr√©liminaire</h3>
                  <p className="text-sm text-orange-700">{clinicalQuestions.preliminaryThoughts}</p>
                </div>
              )}

              <ClinicalQuestionsPanel
                questions={clinicalQuestions.clinicalQuestions}
                onAnswerQuestion={handleAnswerQuestion}
                answers={clinicalAnswers}
              />

              {errors.questions && (
                <div className="mt-6 bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg">
                  <AlertTriangle className="h-5 w-5 inline mr-2" />
                  {errors.questions}
                </div>
              )}

              <div className="mt-8 flex justify-between">
                <button
                  onClick={() => setCurrentStep("clinical")}
                  className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center font-semibold"
                >
                  Retour Pr√©sentation Clinique
                </button>

                <button
                  onClick={handleExpertDiagnosis}
                  disabled={Object.keys(clinicalAnswers).length === 0 || isProcessing}
                  className="px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center font-semibold"
                >
                  {isProcessing ? (
                    <>
                      <Loader className="animate-spin h-5 w-5 mr-2" />
                      Analyse Diagnostique...
                    </>
                  ) : (
                    <>
                      <Brain className="h-5 w-5 mr-2" />
                      Analyse Diagnostique Expert (√âtape 2)
                    </>
                  )}
                </button>
              </div>
            </div>
          )}

          {/* Section Diagnostic Expert */}
          {currentStep === "diagnosis" && diagnosis && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-6 flex items-center">
                <Brain className="h-6 w-6 mr-3 text-purple-600" />
                Diagnostic Expert - Niveau Interniste
              </h2>

              {/* Analyse clinique experte */}
              <div className="space-y-4">
                <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                  <h3 className="font-semibold text-purple-800 mb-2">ü©∫ Analyse Clinique Experte</h3>
                  <p className="text-sm text-purple-700">
                    {diagnosis.clinicalAnalysis?.expert_notes ||
                      "Analyse bas√©e sur la pr√©sentation clinique et les ant√©c√©dents du patient."}
                  </p>
                </div>

                {/* Liste des diagnostics diff√©rentiels */}
                {diagnosis.clinicalAnalysis?.diagnoses && diagnosis.clinicalAnalysis.diagnoses.length > 0 ? (
                  <div className="space-y-3">
                    <h4 className="font-semibold text-gray-900">Diagnostics Diff√©rentiels:</h4>
                    {diagnosis.clinicalAnalysis.diagnoses.map((diag, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex-1">
                            <h5 className="font-semibold text-gray-900 mb-1">{diag.diagnosis}</h5>
                            <div className="text-sm text-gray-600">
                              <strong>Code ICD-10:</strong> {diag.icd10_code}
                            </div>
                            <div className="text-sm text-gray-600">
                              <strong>Probabilit√©:</strong> {diag.probability_percent}%
                            </div>
                            <div className="text-sm text-gray-600">
                              <strong>Justification:</strong> {diag.clinical_reasoning}
                            </div>
                          </div>
                          <input
                            type="checkbox"
                            id={`diag-${index}`}
                            value={diag.diagnosis}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setSelectedDiagnoses((prev) => [...prev, diag])
                              } else {
                                setSelectedDiagnoses((prev) => prev.filter((d) => d.diagnosis !== diag.diagnosis))
                              }
                            }}
                            className="h-5 w-5 text-blue-600 rounded focus:ring-2 focus:ring-blue-500"
                          />
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-gray-500">Aucun diagnostic diff√©rentiel trouv√©.</div>
                )}

                {/* Liste des examens compl√©mentaires */}
                {diagnosis.clinicalAnalysis?.differential_workup &&
                diagnosis.clinicalAnalysis.differential_workup.length > 0 ? (
                  <div className="space-y-3">
                    <h4 className="font-semibold text-gray-900">Examens Compl√©mentaires Recommand√©s:</h4>
                    {diagnosis.clinicalAnalysis.differential_workup.map((workup, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg p-4">
                        <h5 className="font-semibold text-gray-900 mb-1">
                          {workup.test_category}: {workup.tests.join(", ")}
                        </h5>
                        <div className="text-sm text-gray-600">
                          <strong>Justification:</strong> {workup.rationale}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Urgence:</strong> {workup.urgency}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-gray-500">Aucun examen compl√©mentaire recommand√©.</div>
                )}
              </div>

              {errors.diagnosis && (
                <div className="mt-6 bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg">
                  <AlertTriangle className="h-5 w-5 inline mr-2" />
                  {errors.diagnosis}
                </div>
              )}

              <div className="mt-8 flex justify-between">
                <button
                  onClick={() => setCurrentStep("questions")}
                  className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center font-semibold"
                >
                  Retour Questions
                </button>

                <div className="flex gap-4">
                  <button
                    onClick={() => {
                      setShowWorkupOrder(true)
                      handleExpertWorkup()
                    }}
                    disabled={selectedDiagnoses.length === 0 || isProcessing}
                    className="px-8 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center font-semibold"
                  >
                    {isProcessing ? (
                      <>
                        <Loader className="animate-spin h-5 w-5 mr-2" />
                        Prescription Examens...
                      </>
                    ) : (
                      <>
                        <Search className="h-5 w-5 mr-2" />
                        Prescription Examens
                      </>
                    )}
                  </button>

                  <button
                    onClick={handleExpertPrescription}
                    disabled={selectedDiagnoses.length === 0 || isProcessing}
                    className="px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center font-semibold"
                  >
                    {isProcessing ? (
                      <>
                        <Loader className="animate-spin h-5 w-5 mr-2" />
                        G√©n√©ration Prescription...
                      </>
                    ) : (
                      <>
                        <Pill className="h-5 w-5 mr-2" />
                        G√©n√©rer Prescription
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Section Prescription Experte */}
          {currentStep === "prescription" && prescription && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-6 flex items-center">
                <Pill className="h-6 w-6 mr-3 text-green-600" />
                Prescription Experte - Niveau Interniste
              </h2>

              {/* Informations g√©n√©rales sur la prescription */}
              <div className="space-y-4">
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <h3 className="font-semibold text-green-800 mb-2">üíä Informations Prescription</h3>
                  <p className="text-sm text-green-700">
                    Prescrite par: {prescription.prescribedBy} le{" "}
                    {new Date(prescription.prescriptionDate).toLocaleDateString()}
                  </p>
                  <p className="text-sm text-green-700">ID Prescription: {prescription.prescriptionId}</p>
                </div>

                {/* M√©dicaments prescrits */}
                {prescription.prescription?.medications && prescription.prescription.medications.length > 0 ? (
                  <div className="space-y-3">
                    <h4 className="font-semibold text-gray-900">M√©dicaments Prescrits:</h4>
                    {prescription.prescription.medications.map((med, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg p-4">
                        <h5 className="font-semibold text-gray-900 mb-1">{med.medication_name}</h5>
                        <div className="text-sm text-gray-600">
                          <strong>Marque:</strong> {med.brand_name}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Dosage:</strong> {med.strength}, {med.pharmaceutical_form}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Posologie:</strong> {med.dosage_regimen.dose}, {med.dosage_regimen.frequency},{" "}
                          {med.dosage_regimen.timing}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Instructions:</strong> {med.instructions.french}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Indication:</strong> {med.indication}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-gray-500">Aucun m√©dicament prescrit.</div>
                )}

                {/* Instructions de suivi */}
                {prescription.prescription?.follow_up_instructions && (
                  <div className="space-y-3">
                    <h4 className="font-semibold text-gray-900">Instructions de Suivi:</h4>
                    <div className="border border-gray-200 rounded-lg p-4">
                      <div className="text-sm text-gray-600">
                        <strong>Prochain rendez-vous:</strong>{" "}
                        {prescription.prescription.follow_up_instructions.next_appointment}
                      </div>
                      <div className="text-sm text-gray-600">
                        <strong>Signes d'alarme:</strong>{" "}
                        {prescription.prescription.follow_up_instructions.warning_signs.join(", ")}
                      </div>
                      <div className="text-sm text-gray-600">
                        <strong>Param√®tres √† surveiller:</strong>{" "}
                        {prescription.prescription.follow_up_instructions.monitoring_parameters.join(", ")}
                      </div>
                    </div>
                  </div>
                )}

                {/* Justification clinique */}
                {prescription.clinicalJustification && (
                  <div className="space-y-3">
                    <h4 className="font-semibold text-gray-900">Justification Clinique:</h4>
                    <div className="border border-gray-200 rounded-lg p-4">
                      <div className="text-sm text-gray-600">{prescription.clinicalJustification}</div>
                    </div>
                  </div>
                )}
              </div>

              <div className="mt-8 flex justify-between">
                <button
                  onClick={() => setCurrentStep("diagnosis")}
                  className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center font-semibold"
                >
                  Retour Diagnostic
                </button>

                <button
                  onClick={() => {
                    setCurrentStep("workup")
                    setShowConsultationReport(true)
                  }}
                  className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center font-semibold"
                >
                  Continuer vers Examens Compl√©mentaires
                  <ChevronRight className="h-5 w-5 ml-2" />
                </button>
              </div>
            </div>
          )}

          {/* Section Examens Compl√©mentaires */}
          {currentStep === "workup" && workup && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-6 flex items-center">
                <Search className="h-6 w-6 mr-3 text-orange-600" />
                Examens Compl√©mentaires - Niveau Interniste
              </h2>

              {/* Informations g√©n√©rales sur la prescription d'examens */}
              <div className="space-y-4">
                <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                  <h3 className="font-semibold text-orange-800 mb-2">üî¨ Informations Examens</h3>
                  <p className="text-sm text-orange-700">
                    Prescrits par: {workup.prescribedBy} le {new Date(workup.workupDate).toLocaleDateString()}
                  </p>
                  <p className="text-sm text-orange-700">ID Prescription Examens: {workup.workupId}</p>
                </div>

                {/* Examens de laboratoire */}
                {workup.workup?.laboratory_tests && workup.workup.laboratory_tests.length > 0 ? (
                  <div className="space-y-3">
                    <h4 className="font-semibold text-gray-900">Examens de Laboratoire:</h4>
                    {workup.workup.laboratory_tests.map((test, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg p-4">
                        <h5 className="font-semibold text-gray-900 mb-1">{test.test_name}</h5>
                        <div className="text-sm text-gray-600">
                          <strong>Cat√©gorie:</strong> {test.category}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Indication:</strong> {test.indication}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Urgence:</strong> {test.urgency}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>R√©sultats attendus:</strong> {test.expected_results}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Notes d'interpr√©tation:</strong> {test.interpretation_notes}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-gray-500">Aucun examen de laboratoire prescrit.</div>
                )}

                {/* Examens d'imagerie */}
                {workup.workup?.imaging_studies && workup.workup.imaging_studies.length > 0 ? (
                  <div className="space-y-3">
                    <h4 className="font-semibold text-gray-900">Examens d'Imagerie:</h4>
                    {workup.workup.imaging_studies.map((study, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg p-4">
                        <h5 className="font-semibold text-gray-900 mb-1">{study.study_name}</h5>
                        <div className="text-sm text-gray-600">
                          <strong>Modalit√©:</strong> {study.modality}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Indication:</strong> {study.indication}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Urgence:</strong> {study.urgency}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Protocole sp√©cifique:</strong> {study.specific_protocol}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-gray-500">Aucun examen d'imagerie prescrit.</div>
                )}

                {/* Examens fonctionnels */}
                {workup.workup?.functional_tests && workup.workup.functional_tests.length > 0 ? (
                  <div className="space-y-3">
                    <h4 className="font-semibold text-gray-900">Examens Fonctionnels:</h4>
                    {workup.workup.functional_tests.map((test, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg p-4">
                        <h5 className="font-semibold text-gray-900 mb-1">{test.test_name}</h5>
                        <div className="text-sm text-gray-600">
                          <strong>Indication:</strong> {test.indication}
                        </div>
                        <div className="text-sm text-gray-600">
                          <strong>Urgence:</strong> {test.urgency}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-gray-500">Aucun examen fonctionnel prescrit.</div>
                )}

                {/* Justification clinique */}
                {workup.clinicalJustification && (
                  <div className="space-y-3">
                    <h4 className="font-semibold text-gray-900">Justification Clinique:</h4>
                    <div className="border border-gray-200 rounded-lg p-4">
                      <div className="text-sm text-gray-600">{workup.clinicalJustification}</div>
                    </div>
                  </div>
                )}
              </div>

              <div className="mt-8 flex justify-between">
                <button
                  onClick={() => setCurrentStep("prescription")}
                  className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center font-semibold"
                >
                  Retour Prescription
                </button>

                <button
                  onClick={() => setCurrentStep("summary")}
                  className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center font-semibold"
                >
                  Voir Documents
                  <ChevronRight className="h-5 w-5 ml-2" />
                </button>
              </div>
            </div>
          )}

          {/* Section R√©capitulatif et Documents */}
          {currentStep === "summary" && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-6 flex items-center">
                <FileText className="h-6 w-6 mr-3 text-indigo-600" />
                R√©capitulatif et Documents
              </h2>

              <div className="space-y-6">
                {/* Rapport de consultation */}
                <div className="bg-indigo-50 border border-indigo-200 rounded-lg p-4">
                  <h3 className="font-semibold text-indigo-800 mb-2">üìù Rapport de Consultation</h3>
                  <p className="text-sm text-indigo-700">
                    G√©n√©rez un rapport complet de la consultation, incluant les donn√©es du patient, la pr√©sentation
                    clinique, le diagnostic, la prescription et les examens compl√©mentaires.
                  </p>
                  <button
                    onClick={() => setShowConsultationReport(true)}
                    className="mt-4 px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 flex items-center font-semibold"
                  >
                    <Download className="h-5 w-5 mr-2" />
                    T√©l√©charger Rapport
                  </button>
                </div>

                {/* Ordonnance */}
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <h3 className="font-semibold text-green-800 mb-2">üíä Ordonnance</h3>
                  <p className="text-sm text-green-700">
                    Imprimez ou t√©l√©chargez l'ordonnance avec les m√©dicaments prescrits.
                  </p>
                  <button className="mt-4 px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center font-semibold">
                    <Printer className="h-5 w-5 mr-2" />
                    Imprimer Ordonnance
                  </button>
                </div>

                {/* Prescription d'examens */}
                <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                  <h3 className="font-semibold text-orange-800 mb-2">üî¨ Prescription d'Examens</h3>
                  <p className="text-sm text-orange-700">
                    Imprimez ou t√©l√©chargez la prescription d'examens compl√©mentaires.
                  </p>
                  <button className="mt-4 px-6 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 flex items-center font-semibold">
                    <Printer className="h-5 w-5 mr-2" />
                    Imprimer Prescription Examens
                  </button>
                </div>
              </div>

              <div className="mt-8 flex justify-start">
                <button
                  onClick={() => setCurrentStep("workup")}
                  className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center font-semibold"
                >
                  Retour Examens
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Panneau lat√©ral */}
        <div className="space-y-6">
          {/* Aper√ßu des donn√©es patient */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h3 className="text-xl font-bold mb-4 flex items-center">
              <User className="h-5 w-5 mr-2 text-blue-600" />
              Aper√ßu Patient
            </h3>
            <div className="text-sm text-gray-600">
              <strong>Nom:</strong> {patientData.name || "Non renseign√©"}
            </div>
            <div className="text-sm text-gray-600">
              <strong>√Çge:</strong> {patientData.age || "Non renseign√©"} ans
            </div>
            <div className="text-sm text-gray-600">
              <strong>Genre:</strong> {patientData.gender || "Non renseign√©"}
            </div>
            <div className="text-sm text-gray-600">
              <strong>IMC:</strong>{" "}
              {patientData.weight && patientData.height
                ? Math.round((patientData.weight / Math.pow(patientData.height / 100, 2)) * 10) / 10
                : "Non calcul√©"}
            </div>
          </div>

          {/* Aper√ßu de la pr√©sentation clinique */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h3 className="text-xl font-bold mb-4 flex items-center">
              <Stethoscope className="h-5 w-5 mr-2 text-green-600" />
              Pr√©sentation Clinique
            </h3>
            <div className="text-sm text-gray-600">
              <strong>Motif:</strong> {clinicalPresentation.chiefComplaint || "Non renseign√©"}
            </div>
            <div className="text-sm text-gray-600">
              <strong>Sympt√¥mes:</strong> {clinicalPresentation.symptoms || "Non renseign√©"}
            </div>
          </div>

          {/* Aper√ßu du diagnostic */}
          {diagnosis && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h3 className="text-xl font-bold mb-4 flex items-center">
                <Brain className="h-5 w-5 mr-2 text-purple-600" />
                Diagnostic
              </h3>
              {diagnosis.clinicalAnalysis?.diagnoses && diagnosis.clinicalAnalysis.diagnoses.length > 0 ? (
                diagnosis.clinicalAnalysis.diagnoses.map((diag, index) => (
                  <div key={index} className="text-sm text-gray-600">
                    <strong>{diag.diagnosis}</strong> ({diag.probability_percent}%)
                  </div>
                ))
              ) : (
                <div className="text-sm text-gray-600">Non disponible</div>
              )}
            </div>
          )}

          {/* Aper√ßu de la prescription */}
          {prescription && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h3 className="text-xl font-bold mb-4 flex items-center">
                <Pill className="h-5 w-5 mr-2 text-green-600" />
                Prescription
              </h3>
              {prescription.prescription?.medications && prescription.prescription.medications.length > 0 ? (
                prescription.prescription.medications.map((med, index) => (
                  <div key={index} className="text-sm text-gray-600">
                    <strong>{med.medication_name}</strong> ({med.strength})
                  </div>
                ))
              ) : (
                <div className="text-sm text-gray-600">Non disponible</div>
              )}
            </div>
          )}

          {/* Aper√ßu des examens */}
          {workup && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h3 className="text-xl font-bold mb-4 flex items-center">
                <Search className="h-5 w-5 mr-2 text-orange-600" />
                Examens
              </h3>
              {workup.workup?.laboratory_tests && workup.workup.laboratory_tests.length > 0 ? (
                workup.workup.laboratory_tests.map((test, index) => (
                  <div key={index} className="text-sm text-gray-600">
                    <strong>{test.test_name}</strong>
                  </div>
                ))
              ) : (
                <div className="text-sm text-gray-600">Non disponible</div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Modal Rapport de Consultation */}
      {showConsultationReport && (
        <div className="fixed top-0 left-0 w-full h-full bg-gray-900 bg-opacity-50 flex justify-center items-center">
          <div className="bg-white rounded-xl shadow-lg p-6 w-3/4 h-3/4 overflow-auto">
            <h2 className="text-2xl font-bold mb-6 flex items-center">
              <FileText className="h-6 w-6 mr-3 text-indigo-600" />
              Rapport de Consultation
            </h2>
            <ConsultationReportPanel
              patientData={patientData}
              clinicalPresentation={clinicalPresentation}
              diagnosis={diagnosis}
              prescription={prescription}
              workup={workup}
              onClose={() => setShowConsultationReport(false)}
            />
          </div>
        </div>
      )}
    </div>
  )
}

export default AdvancedMedicalExpertSystem
