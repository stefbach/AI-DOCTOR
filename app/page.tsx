// app/page.tsx - Version complète avec traductions corrigées

"use client"

import { useState, useEffect } from "react"
import * as React from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Stethoscope, User, ClipboardList, Brain, FileText, Activity, Edit3 } from "lucide-react"

import PatientForm from "@/components/patient-form"
import ClinicalForm from "@/components/clinical-form"
import QuestionsForm from "@/components/questions-form"
import DiagnosisForm from "@/components/diagnosis-form"
import MedicalWorkflow from "@/components/medical/main-medical-workflow"
import IntegratedMedicalConsultation from "@/components/integrated-medical-consultation"
import { PatientDataLoader } from "@/components/patient-data-loader"
import { consultationDataService } from '@/lib/consultation-data-service'
import { supabase } from '@/lib/supabase'

export type Language = 'fr' | 'en'

const translations = {
  fr: {
    mainPage: {
      title: "Assistant Médical IA",
      subtitle: "Consultation médicale intelligente"
    },
    steps: {
      patientInfo: {
        title: "Informations Patient",
        description: "Identité, antécédents, allergies"
      },
      clinicalData: {
        title: "Examen Clinique",
        description: "Symptômes, signes vitaux, examen physique"
      },
      aiQuestions: {
        title: "Questions IA",
        description: "Questions personnalisées générées par l'IA"
      },
      diagnosis: {
        title: "Diagnostic IA",
        description: "Analyse diagnostique par intelligence artificielle"
      },
      documents: {
        title: "Édition des documents médicaux",
        description: "Génération et personnalisation des rapports"
      }
    },
    progress: {
      title: "Progression",
      stepOf: "Étape {current} sur {total}"
    },
    loading: "Chargement..."
  },
  en: {
    mainPage: {
      title: "AI Medical Assistant",
      subtitle: "Intelligent medical consultation"
    },
    steps: {
      patientInfo: {
        title: "Patient Information",
        description: "Identity, medical history, allergies"
      },
      clinicalData: {
        title: "Clinical Examination",
        description: "Symptoms, vital signs, physical examination"
      },
      aiQuestions: {
        title: "AI Questions",
        description: "Personalized questions generated by AI"
      },
      diagnosis: {
        title: "AI Diagnosis",
        description: "Diagnostic analysis by artificial intelligence"
      },
      documents: {
        title: "Medical Documents Editing",
        description: "Generation and customization of reports"
      }
    },
    progress: {
      title: "Progress",
      stepOf: "Step {current} of {total}"
    },
    loading: "Loading..."
  }
}

function getTranslation(key: string, language: Language): string {
  const keys = key.split('.')
  let value: any = translations[language]
  
  for (const k of keys) {
    if (value && typeof value === 'object' && k in value) {
      value = value[k]
    } else {
      console.warn(`Translation key not found: ${key} for language: ${language}`)
      return key
    }
  }
  
  return typeof value === 'string' ? value : key
}

export default function MedicalAIExpert() {
  const [currentStep, setCurrentStep] = useState(0)
  const [patientData, setPatientData] = useState<any>(null)
  const [clinicalData, setClinicalData] = useState<any>(null)
  const [questionsData, setQuestionsData] = useState<any>(null)
  const [diagnosisData, setDiagnosisData] = useState<any>(null)
  const [workflowResult, setWorkflowResult] = useState<any>(null)
  const [language, setLanguage] = useState<Language>('fr')
  
  const [currentConsultationId, setCurrentConsultationId] = useState<string | null>(null)
  const [currentPatientId, setCurrentPatientId] = useState<string | null>(null)
  const [currentDoctorId, setCurrentDoctorId] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isInitialized, setIsInitialized] = useState(false)

  // Load language preference
  useEffect(() => {
    const savedLanguage = localStorage.getItem('preferred-language') as Language
    if (savedLanguage && (savedLanguage === 'fr' || savedLanguage === 'en')) {
      setLanguage(savedLanguage)
    }
  }, [])

  // Initialize consultation
  useEffect(() => {
    const initializeConsultation = async () => {
      try {
        setIsLoading(true)
        
        const { data: { user }, error: authError } = await supabase.auth.getUser()
        
        if (authError || !user) {
          console.log('No authenticated user, proceeding without user context')
          setCurrentDoctorId(null)
        } else {
          setCurrentDoctorId(user.id)
        }
        
        let consultationId = consultationDataService.getCurrentConsultationId()
        
        if (!consultationId) {
          const newConsultation = consultationDataService.createNewConsultation(user?.id || null)
          consultationId = newConsultation.id
          setCurrentConsultationId(consultationId)
          console.log('Created new consultation:', consultationId)
        } else {
          setCurrentConsultationId(consultationId)
          console.log('Using existing consultation:', consultationId)
          
          const savedData = consultationDataService.getConsultationData()
          if (savedData && savedData.steps) {
            if (savedData.steps[0]) setPatientData(savedData.steps[0])
            if (savedData.steps[1]) setClinicalData(savedData.steps[1])
            if (savedData.steps[2]) setQuestionsData(savedData.steps[2])
            if (savedData.steps[3]) setDiagnosisData(savedData.steps[3])
            if (savedData.steps[4]) setWorkflowResult(savedData.steps[4])
            
            const lastCompletedStep = Object.keys(savedData.steps)
              .map(Number)
              .filter(step => savedData.steps[step] !== null)
              .sort((a, b) => b - a)[0]
            
            if (lastCompletedStep !== undefined) {
              setCurrentStep(Math.min(lastCompletedStep + 1, 4))
            }
          }
        }
        
        if (user?.id) {
          const patientId = await consultationDataService.getOrCreatePatientId(user.id)
          setCurrentPatientId(patientId)
        }
        
        setIsInitialized(true)
      } catch (error) {
        console.error('Error initializing consultation:', error)
      } finally {
        setIsLoading(false)
      }
    }
    
    initializeConsultation()
  }, [])

  const handleSetLanguage = (lang: Language) => {
    setLanguage(lang)
    localStorage.setItem('preferred-language', lang)
  }

  const t = (key: string) => getTranslation(key, language)

  const steps = [
    {
      id: 0,
      title: t('steps.patientInfo.title'),
      description: t('steps.patientInfo.description'),
      icon: <User className="h-5 w-5" />,
      component: PatientForm,
    },
    {
      id: 1,
      title: t('steps.clinicalData.title'),
      description: t('steps.clinicalData.description'),
      icon: <Stethoscope className="h-5 w-5" />,
      component: ClinicalForm,
    },
    {
      id: 2,
      title: t('steps.aiQuestions.title'),
      description: t('steps.aiQuestions.description'),
      icon: <Brain className="h-5 w-5" />,
      component: QuestionsForm,
    },
    {
      id: 3,
      title: t('steps.diagnosis.title'),
      description: t('steps.diagnosis.description'),
      icon: <ClipboardList className="h-5 w-5" />,
      component: DiagnosisForm,
    },
    {
      id: 4,
      title: t('steps.documents.title'),
      description: t('steps.documents.description'),
      icon: <Activity className="h-5 w-5" />,
      component: MedicalWorkflow,
    },
  ]

  const progress = ((currentStep + 1) / steps.length) * 100

  const handleNext = async () => {
    // Save current step data before moving forward
    const consultationId = consultationDataService.getCurrentConsultationId()
    if (consultationId) {
      try {
        console.log(`Saving data for step ${currentStep}`)
        switch (currentStep) {
          case 0:
            if (patientData) {
              await consultationDataService.saveStepData(0, patientData)
            }
            break
          case 1:
            if (clinicalData) {
              await consultationDataService.saveStepData(1, clinicalData)
            }
            break
          case 2:
            if (questionsData) {
              await consultationDataService.saveStepData(2, questionsData)
            }
            break
          case 3:
            if (diagnosisData) {
              await consultationDataService.saveStepData(3, diagnosisData)
            }
            break
        }
        console.log(`Data saved for step ${currentStep}`)
      } catch (error) {
        console.error('Error saving step data:', error)
      }
    }
    
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1)
    }
  }

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleWorkflowComplete = async (data: any) => {
    console.log('Medical workflow completed:', data)
    setWorkflowResult(data)
    
    const consultationId = consultationDataService.getCurrentConsultationId()
    if (consultationId) {
      try {
        await consultationDataService.saveStepData(4, data)
        await consultationDataService.markConsultationComplete()
        console.log('Consultation marked as complete')
      } catch (error) {
        console.error('Error saving workflow data:', error)
      }
    }
  }

  const handleMedicalWorkflowComplete = async (data: any) => {
    console.log('Medical workflow completed with data:', data)
    await handleWorkflowComplete(data)
  }

  const handleStepClick = async (stepIndex: number) => {
    if (stepIndex < currentStep) {
      setCurrentStep(stepIndex)
    } else if (stepIndex === currentStep + 1) {
      await handleNext()
    }
  }

  const getCurrentStepProps = () => {
    const consultationId = consultationDataService.getCurrentConsultationId() || currentConsultationId
    const commonProps = { 
      language, 
      consultationId,
      patientId: currentPatientId,
      doctorId: currentDoctorId
    }
    
    switch (currentStep) {
      case 0:
        return {
          ...commonProps,
          initialData: patientData,
          onDataChange: setPatientData,
          onNext: handleNext,
        }
      case 1:
        return {
          ...commonProps,
          patientData,
          initialData: clinicalData,
          onDataChange: setClinicalData,
          onNext: handleNext,
          onPrevious: handlePrevious,
        }
      case 2:
        return {
          ...commonProps,
          patientData,
          clinicalData,
          initialData: questionsData,
          onDataChange: setQuestionsData,
          onNext: handleNext,
          onPrevious: handlePrevious,
        }
      case 3:
        return {
          ...commonProps,
          patientData,
          clinicalData,
          questionsData,
          initialData: diagnosisData,
          onDataChange: setDiagnosisData,
          onNext: handleNext,
          onPrevious: handlePrevious,
        }
      case 4:
        return {
          ...commonProps,
          patientData,
          clinicalData,
          questionsData,
          diagnosisData,
          initialData: workflowResult,
          onComplete: handleMedicalWorkflowComplete,
          onBack: handlePrevious,
        }
      default:
        return commonProps
    }
  }

  const CurrentStepComponent = steps[currentStep]?.component

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">{t('loading')}</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        {/* Header with Language Switcher */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">{t('mainPage.title')}</h1>
              <p className="text-gray-600">{t('mainPage.subtitle')}</p>
            </div>
            <div className="flex items-center gap-2">
              {/* Language Switcher with black background */}
              <div className="flex items-center gap-2 mr-4 bg-black rounded-md p-1">
                <Button
                  variant={language === 'fr' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => handleSetLanguage('fr')}
                  className={language === 'fr' 
                    ? 'bg-blue-600 hover:bg-blue-700 text-white' 
                    : 'text-gray-400 hover:text-white hover:bg-transparent'
                  }
                >
                  FR
                </Button>
                <Button
                  variant={language === 'en' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => handleSetLanguage('en')}
                  className={language === 'en' 
                    ? 'bg-blue-600 hover:bg-blue-700 text-white' 
                    : 'text-gray-400 hover:text-white hover:bg-transparent'
                  }
                >
                  EN
                </Button>
              </div>
              
              {/* Consultation ID Badge */}
              {(currentConsultationId || consultationDataService.getCurrentConsultationId()) && (
                <Badge variant="outline" className="text-xs">
                  ID: {(currentConsultationId || consultationDataService.getCurrentConsultationId())?.slice(-8)}
                </Badge>
              )}
            </div>
          </div>

          {/* Progress Section */}
          <Card className="bg-white shadow-lg p-6 mb-8">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold">{t('progress.title')}</h2>
              <span className="text-sm text-gray-600">
                {t('progress.stepOf').replace('{current}', String(currentStep + 1)).replace('{total}', String(steps.length))}
              </span>
            </div>
            
            <Progress value={progress} className="mb-6 h-3" />
            
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
              {steps.map((step, index) => (
                <div
                  key={step.id}
                  onClick={() => handleStepClick(index)}
                  className={`relative flex flex-col items-center text-center p-4 rounded-lg transition-all cursor-pointer
                    ${index === currentStep 
                      ? 'bg-blue-50 border-2 border-blue-500' 
                      : index < currentStep 
                      ? 'bg-green-50 border-2 border-green-500 hover:bg-green-100' 
                      : 'bg-gray-50 border-2 border-gray-300 opacity-60 cursor-not-allowed'
                    }`}
                >
                  {/* Step indicator */}
                  <div className={`absolute -top-3 -right-3 w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold
                    ${index === currentStep 
                      ? 'bg-blue-600 text-white' 
                      : index < currentStep 
                      ? 'bg-green-600 text-white' 
                      : 'bg-gray-400 text-white'
                    }`}>
                    {index < currentStep ? '✓' : index + 1}
                  </div>
                  
                  {/* Icon */}
                  <div className={`w-16 h-16 rounded-full flex items-center justify-center mb-3
                    ${index === currentStep 
                      ? 'bg-blue-600 text-white' 
                      : index < currentStep 
                      ? 'bg-green-600 text-white' 
                      : 'bg-gray-300 text-gray-600'
                    }`}>
                    {React.cloneElement(step.icon, { className: "h-8 w-8" })}
                  </div>
                  
                  {/* Title */}
                  <h3 className={`font-semibold mb-1 text-sm
                    ${index === currentStep 
                      ? 'text-blue-900' 
                      : index < currentStep 
                      ? 'text-green-900' 
                      : 'text-gray-600'
                    }`}>
                    {step.title}
                  </h3>
                  
                  {/* Description */}
                  <p className={`text-xs
                    ${index === currentStep 
                      ? 'text-blue-700' 
                      : index < currentStep 
                      ? 'text-green-700' 
                      : 'text-gray-500'
                    }`}>
                    {step.description}
                  </p>
                </div>
              ))}
            </div>
          </Card>
        </div>

        {/* Current Step Content */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-3">
              {steps[currentStep]?.icon}
              <span>{steps[currentStep]?.title}</span>
            </CardTitle>
            <p className="text-gray-600">{steps[currentStep]?.description}</p>
          </CardHeader>
          <CardContent>
            {CurrentStepComponent && <CurrentStepComponent {...getCurrentStepProps()} />}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
