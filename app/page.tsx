"use client"

import { useState, useCallback, useEffect } from "react"
import {
  Brain,
  Pill,
  FileText,
  User,
  Stethoscope,
  CheckCircle,
  Loader,
  Search,
  Shield,
  Activity,
  Target,
  Award,
  Settings,
  HelpCircle,
  MessageSquare,
  ChevronRight,
  AlertTriangle,
  Heart,
  Thermometer,
  Download,
  Printer,
  Users,
  Database,
  Globe,
  BookOpen,
  FlaskConical,
  Zap,
  TrendingUp,
  Star,
  ExternalLink,
  CheckSquare,
  Microscope,
  ClipboardList,
  Key,
  Eye,
  Calendar,
  Wifi,
  WifiOff
} from "lucide-react"

// ========================================
// üöÄ SYST√àME M√âDICAL EXPERT - VRAIES APIs INT√âGR√âES
// ========================================

const RealMedicalSystemOpenAI = () => {
  // √âtats de workflow (7 √©tapes compl√®tes)
  const [currentStep, setCurrentStep] = useState('patient')
  const [isLoading, setIsLoading] = useState(false)
  const [errors, setErrors] = useState({})
  const [apiKey, setApiKey] = useState('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')
  const [apiKeyValid, setApiKeyValid] = useState(false)
  const [apiStatus, setApiStatus] = useState({
    openai: false,
    fda: false,
    rxnorm: false,
    pubmed: false
  })

  // Donn√©es patient
  const [patientData, setPatientData] = useState({
    name: '',
    age: '',
    gender: '',
    weight: '',
    height: '',
    medicalHistory: '',
    currentMedications: '',
    allergies: '',
    insurance: '',
    emergencyContact: ''
  })

  // Pr√©sentation clinique
  const [clinicalData, setClinicalData] = useState({
    chiefComplaint: '',
    symptoms: '',
    duration: '',
    severity: '',
    vitals: {
      bp: '',
      hr: '',
      temp: '',
      spo2: '',
      rr: '',
      pain: ''
    },
    physicalExam: ''
  })

  // Questions cliniques g√©n√©r√©es par IA
  const [clinicalQuestions, setClinicalQuestions] = useState(null)
  const [clinicalAnswers, setClinicalAnswers] = useState({})

  // Diagnostic enrichi avec APIs
  const [enhancedResults, setEnhancedResults] = useState(null)
  const [apiInsights, setApiInsights] = useState({
    fdaData: [],
    interactions: null,
    literature: [],
    trials: [],
    guidelines: [],
    recalls: [],
    adverseEvents: []
  })

  // Prescription m√©dicale
  const [prescriptionData, setPrescriptionData] = useState(null)

  // Examens compl√©mentaires
  const [recommendedExams, setRecommendedExams] = useState(null)
  const [examResults, setExamResults] = useState({})

  // Documents m√©dicaux
  const [generatedDocuments, setGeneratedDocuments] = useState({
    medicalReport: null,
    dischargeSummary: null,
    patientInstructions: null,
    referralLetter: null
  })

  // ========================================
  // üåê VRAIES APIS M√âDICALES
  // ========================================

  // Test de connectivit√© des APIs
  const testApiConnectivity = useCallback(async () => {
    const results = {
      openai: false,
      fda: false,
      rxnorm: false,
      pubmed: false
    }

    try {
      // Test OpenAI
      const openaiResponse = await fetch('https://api.openai.com/v1/models', {
        headers: { 'Authorization': `Bearer ${apiKey}` }
      })
      results.openai = openaiResponse.ok

      // Test FDA
      const fdaResponse = await fetch('https://api.fda.gov/drug/label.json?limit=1')
      results.fda = fdaResponse.ok

      // Test RxNorm
      const rxnormResponse = await fetch('https://rxnav.nlm.nih.gov/REST/drugs.json?name=aspirin')
      results.rxnorm = rxnormResponse.ok

      // Test PubMed
      const pubmedResponse = await fetch('https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term=medicine&retmax=1')
      results.pubmed = pubmedResponse.ok

    } catch (error) {
      console.error('Erreur test connectivit√©:', error)
    }

    setApiStatus(results)
    return results
  }, [apiKey])

  // OpenFDA API - Recherche informations m√©dicament
  const searchFDADrugInfo = async (drugName) => {
    try {
      console.log(`üîç Recherche FDA pour: ${drugName}`)
      
      // Recherche √©tiquetage m√©dicament
      const labelResponse = await fetch(
        `https://api.fda.gov/drug/label.json?search=openfda.generic_name:"${drugName}"+OR+openfda.brand_name:"${drugName}"&limit=5`
      )
      
      let labelData = []
      if (labelResponse.ok) {
        const labelJson = await labelResponse.json()
        labelData = labelJson.results || []
      }

      // Recherche rappels
      const recallResponse = await fetch(
        `https://api.fda.gov/drug/enforcement.json?search=product_description:"${drugName}"&limit=5`
      )
      
      let recallData = []
      if (recallResponse.ok) {
        const recallJson = await recallResponse.json()
        recallData = recallJson.results || []
      }

      // Recherche √©v√©nements ind√©sirables
      const adverseResponse = await fetch(
        `https://api.fda.gov/drug/event.json?search=patient.drug.medicinalproduct:"${drugName}"&limit=5`
      )
      
      let adverseData = []
      if (adverseResponse.ok) {
        const adverseJson = await adverseResponse.json()
        adverseData = adverseJson.results || []
      }

      return {
        labeling: labelData,
        recalls: recallData,
        adverseEvents: adverseData
      }

    } catch (error) {
      console.error('Erreur FDA API:', error)
      return { labeling: [], recalls: [], adverseEvents: [] }
    }
  }

  // RxNorm API - Recherche interactions m√©dicamenteuses
  const checkDrugInteractions = async (medications) => {
    try {
      console.log(`üîç V√©rification interactions pour: ${medications.join(', ')}`)
      
      const interactions = []
      
      // Obtenir RxCUI pour chaque m√©dicament
      const rxcuis = []
      for (const med of medications) {
        try {
          const response = await fetch(`https://rxnav.nlm.nih.gov/REST/drugs.json?name=${encodeURIComponent(med)}`)
          if (response.ok) {
            const data = await response.json()
            if (data.drugGroup?.conceptGroup) {
              const concepts = data.drugGroup.conceptGroup.find(group => group.tty === 'IN')
              if (concepts?.conceptProperties) {
                rxcuis.push({
                  name: med,
                  rxcui: concepts.conceptProperties[0]?.rxcui
                })
              }
            }
          }
        } catch (error) {
          console.error(`Erreur RxCUI pour ${med}:`, error)
        }
      }

      // V√©rifier interactions entre les m√©dicaments
      for (let i = 0; i < rxcuis.length; i++) {
        for (let j = i + 1; j < rxcuis.length; j++) {
          if (rxcuis[i].rxcui && rxcuis[j].rxcui) {
            try {
              const interactionResponse = await fetch(
                `https://rxnav.nlm.nih.gov/REST/interaction/interaction.json?rxcui=${rxcuis[i].rxcui}&sources=DrugBank`
              )
              
              if (interactionResponse.ok) {
                const interactionData = await interactionResponse.json()
                if (interactionData.interactionTypeGroup) {
                  interactionData.interactionTypeGroup.forEach(group => {
                    group.interactionType.forEach(interaction => {
                      interactions.push({
                        drug1: rxcuis[i].name,
                        drug2: rxcuis[j].name,
                        severity: interaction.severity || 'unknown',
                        description: interaction.description || 'Interaction d√©tect√©e'
                      })
                    })
                  })
                }
              }
            } catch (error) {
              console.error(`Erreur interaction ${rxcuis[i].name}-${rxcuis[j].name}:`, error)
            }
          }
        }
      }

      return {
        has_interactions: interactions.length > 0,
        interactions: interactions,
        rxcuis: rxcuis
      }

    } catch (error) {
      console.error('Erreur RxNorm API:', error)
      return { has_interactions: false, interactions: [], rxcuis: [] }
    }
  }

  // PubMed API - Recherche litt√©rature m√©dicale
  const searchPubMedLiterature = async (query, maxResults = 5) => {
    try {
      console.log(`üîç Recherche PubMed pour: ${query}`)
      
      // Recherche d'articles
      const searchResponse = await fetch(
        `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term=${encodeURIComponent(query)}&retmax=${maxResults}&datetype=pdat&reldate=365&retmode=json`
      )
      
      if (!searchResponse.ok) {
        throw new Error('Erreur recherche PubMed')
      }

      const searchData = await searchResponse.json()
      const pmids = searchData.esearchresult?.idlist || []

      if (pmids.length === 0) {
        return []
      }

      // R√©cup√©ration des d√©tails des articles
      const summaryResponse = await fetch(
        `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id=${pmids.join(',')}&retmode=json`
      )
      
      if (!summaryResponse.ok) {
        throw new Error('Erreur r√©cup√©ration d√©tails PubMed')
      }

      const summaryData = await summaryResponse.json()
      const articles = []

      Object.values(summaryData.result || {}).forEach(article => {
        if (article.uid) {
          articles.push({
            pmid: article.uid,
            title: article.title || 'Titre non disponible',
            authors: article.authors?.map(a => a.name).join(', ') || 'Auteurs non disponibles',
            journal: article.fulljournalname || article.source || 'Journal non disponible',
            year: article.pubdate?.split(' ')[0] || 'Ann√©e non disponible',
            abstract: article.abstract || 'R√©sum√© non disponible',
            doi: article.elocationid || '',
            key_findings: 'Analyse automatique des r√©sultats n√©cessaire',
            relevance: 'Pertinence √† √©valuer selon le contexte clinique'
          })
        }
      })

      return articles

    } catch (error) {
      console.error('Erreur PubMed API:', error)
      return []
    }
  }

  // ClinicalTrials.gov API - Recherche essais cliniques
  const searchClinicalTrials = async (condition, intervention = null) => {
    try {
      console.log(`üîç Recherche essais cliniques pour: ${condition}`)
      
      let searchTerm = condition
      if (intervention) {
        searchTerm += ` AND ${intervention}`
      }

      const response = await fetch(
        `https://clinicaltrials.gov/api/query/study_fields?expr=${encodeURIComponent(searchTerm)}&fields=NCTId,BriefTitle,OverallStatus,Phase,Condition,InterventionName,EligibilityCriteria,LocationCountry&min_rnk=1&max_rnk=10&fmt=json`
      )
      
      if (!response.ok) {
        throw new Error('Erreur ClinicalTrials API')
      }

      const data = await response.json()
      const trials = []

      if (data.StudyFieldsResponse?.StudyFields) {
        data.StudyFieldsResponse.StudyFields.forEach(study => {
          trials.push({
            nct_id: study.NCTId?.[0] || 'N/A',
            title: study.BriefTitle?.[0] || 'Titre non disponible',
            status: study.OverallStatus?.[0] || 'Statut inconnu',
            phase: study.Phase?.[0] || 'Phase non sp√©cifi√©e',
            condition: study.Condition?.join(', ') || condition,
            intervention: study.InterventionName?.join(', ') || intervention || 'Non sp√©cifi√©',
            eligibility: study.EligibilityCriteria?.[0] || 'Crit√®res non disponibles',
            location: study.LocationCountry?.join(', ') || 'Localisation non sp√©cifi√©e'
          })
        })
      }

      return trials

    } catch (error) {
      console.error('Erreur ClinicalTrials API:', error)
      return []
    }
  }

  // ========================================
  // üß† OPENAI AVEC FUNCTION CALLING R√âEL
  // ========================================

  // Appel OpenAI avec Function Calling
  const callOpenAIWithFunctions = useCallback(async (messages, functions = null, functionCall = null) => {
    if (!apiKey) {
      throw new Error('Cl√© API OpenAI requise')
    }

    const requestBody = {
      model: "gpt-4-turbo-preview",
      messages: messages,
      temperature: 0.3,
      max_tokens: 4000
    }

    if (functions) {
      requestBody.functions = functions
      if (functionCall) {
        requestBody.function_call = functionCall
      }
    }

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`OpenAI API Error ${response.status}: ${errorText}`)
      }

      const data = await response.json()
      return data.choices[0].message
    } catch (error) {
      console.error('Erreur OpenAI:', error)
      throw error
    }
  }, [apiKey])

  // Fonctions m√©dicales r√©elles pour Function Calling
  const realMedicalFunctions = [
    {
      name: "search_fda_database",
      description: "Recherche dans la vraie base de donn√©es FDA pour des informations compl√®tes sur les m√©dicaments",
      parameters: {
        type: "object",
        properties: {
          drug_name: { type: "string", description: "Nom du m√©dicament √† rechercher" },
          search_type: { type: "string", enum: ["label", "recall", "adverse"], description: "Type de recherche FDA" }
        },
        required: ["drug_name"]
      }
    },
    {
      name: "check_drug_interactions",
      description: "V√©rifie les interactions m√©dicamenteuses via la vraie API RxNorm",
      parameters: {
        type: "object",
        properties: {
          medications: { 
            type: "array", 
            items: { type: "string" },
            description: "Liste des m√©dicaments √† v√©rifier pour les interactions" 
          }
        },
        required: ["medications"]
      }
    },
    {
      name: "search_pubmed_literature",
      description: "Recherche d'articles r√©cents sur la vraie base PubMed",
      parameters: {
        type: "object",
        properties: {
          query: { type: "string", description: "Terme de recherche m√©dical" },
          max_results: { type: "integer", description: "Nombre maximum d'articles (1-10)", minimum: 1, maximum: 10 }
        },
        required: ["query"]
      }
    },
    {
      name: "search_clinical_trials",
      description: "Recherche d'essais cliniques en cours sur ClinicalTrials.gov",
      parameters: {
        type: "object",
        properties: {
          condition: { type: "string", description: "Condition m√©dicale" },
          intervention: { type: "string", description: "Type d'intervention (optionnel)" }
        },
        required: ["condition"]
      }
    }
  ]

  // Ex√©cution des vraies fonctions m√©dicales
  const executeRealMedicalFunction = async (functionName, args) => {
    console.log(`üîß Ex√©cution fonction: ${functionName}`, args)
    
    switch (functionName) {
      case 'search_fda_database':
        return await searchFDADrugInfo(args.drug_name)

      case 'check_drug_interactions':
        return await checkDrugInteractions(args.medications)

      case 'search_pubmed_literature':
        return await searchPubMedLiterature(args.query, args.max_results || 5)

      case 'search_clinical_trials':
        return await searchClinicalTrials(args.condition, args.intervention)

      default:
        return { error: "Fonction non trouv√©e" }
    }
  }

  // ========================================
  // üß† G√âN√âRATION QUESTIONS CLINIQUES
  // ========================================

  const generateClinicalQuestions = useCallback(async () => {
    if (!patientData.name || !clinicalData.chiefComplaint) {
      setError('questions', 'Donn√©es patient et motif de consultation requis')
      return
    }

    setIsLoading(true)
    clearErrors()

    try {
      const messages = [
        {
          role: "system",
          content: `Tu es un m√©decin interniste expert avec 20 ans d'exp√©rience. Analyse ce cas clinique et g√©n√®re 5 questions pr√©cises pour affiner le diagnostic. Prends en compte les derni√®res guidelines m√©dicales et pratique factuelle. R√©ponds UNIQUEMENT en JSON valide.`
        },
        {
          role: "user",
          content: `
PATIENT:
- Nom: ${patientData.name}
- √Çge: ${patientData.age} ans
- Genre: ${patientData.gender}
- Poids: ${patientData.weight} kg
- Taille: ${patientData.height} cm
- Ant√©c√©dents: ${patientData.medicalHistory || 'Non renseign√©s'}
- M√©dicaments actuels: ${patientData.currentMedications || 'Aucun'}
- Allergies: ${patientData.allergies || 'Aucune connue'}

PR√âSENTATION CLINIQUE:
- Motif: ${clinicalData.chiefComplaint}
- Sympt√¥mes: ${clinicalData.symptoms}
- Dur√©e: ${clinicalData.duration || 'Non pr√©cis√©e'}
- S√©v√©rit√©: ${clinicalData.severity || 'Non √©valu√©e'}
- Signes vitaux: TA=${clinicalData.vitals.bp}, FC=${clinicalData.vitals.hr}, T¬∞=${clinicalData.vitals.temp}, SpO2=${clinicalData.vitals.spo2}

Format de r√©ponse JSON OBLIGATOIRE:
{
  "preliminary_assessment": "Impression clinique initiale bas√©e sur les donn√©es",
  "differential_diagnoses": ["Diagnostic 1", "Diagnostic 2", "Diagnostic 3"],
  "questions": [
    {
      "question": "Question clinique pr√©cise et sp√©cifique",
      "rationale": "Justification m√©dicale d√©taill√©e",
      "category": "symptom|examination|history|timeline|risk_factors",
      "priority": "high|medium|low",
      "expected_answers": ["R√©ponse possible 1", "R√©ponse possible 2"]
    }
  ]
}
          `
        }
      ]

      const response = await callOpenAIWithFunctions(messages)
      const cleaned = response.content.replace(/```json\s*/g, '').replace(/```\s*$/g, '').trim()
      const parsed = JSON.parse(cleaned)
      setClinicalQuestions(parsed)
      setCurrentStep('questions')

    } catch (error) {
      console.error('Erreur questions cliniques:', error)
      setError('questions', `Erreur: ${error.message}`)
    } finally {
      setIsLoading(false)
    }
  }, [patientData, clinicalData, callOpenAIWithFunctions])

  // ========================================
  // ü©∫ DIAGNOSTIC ENRICHI AVEC VRAIES APIs
  // ========================================

  const generateEnhancedDiagnosis = useCallback(async () => {
    if (!clinicalQuestions || Object.keys(clinicalAnswers).length === 0) {
      setError('diagnosis', 'R√©ponses aux questions cliniques requises')
      return
    }

    setIsLoading(true)
    clearErrors()

    try {
      // Pr√©parer les donn√©es pour l'analyse
      const answersText = Object.entries(clinicalAnswers)
        .map(([index, answer]) => {
          const question = clinicalQuestions.questions[index]
          return `Q: ${question?.question}\nR: ${answer}`
        })
        .join('\n\n')

      // Premi√®re √©tape: Analyse diagnostique initiale
      const diagnosticMessages = [
        {
          role: "system",
          content: `Tu es un m√©decin expert qui doit effectuer un diagnostic diff√©rentiel complet. Tu as acc√®s aux vraies bases de donn√©es m√©dicales mondiales via des fonctions sp√©cialis√©es: FDA, RxNorm, PubMed, et ClinicalTrials.gov. 

IMPORTANT: Tu DOIS utiliser ces fonctions pour:
1. V√©rifier les informations sur les m√©dicaments actuels du patient
2. Chercher des interactions m√©dicamenteuses dangereuses  
3. Consulter la litt√©rature r√©cente pertinente
4. Trouver des essais cliniques disponibles

Utilise ces donn√©es pour enrichir ton diagnostic.`
        },
        {
          role: "user",
          content: `
Effectue un diagnostic complet pour ce patient en utilisant OBLIGATOIREMENT les fonctions disponibles:

PATIENT: ${JSON.stringify(patientData, null, 2)}
CLINIQUE: ${JSON.stringify(clinicalData, null, 2)}
√âVALUATION PR√âLIMINAIRE: ${clinicalQuestions.preliminary_assessment}
R√âPONSES AUX QUESTIONS:
${answersText}

√âTAPES OBLIGATOIRES:
1. Si le patient prend des m√©dicaments, utilise search_fda_database pour chacun
2. Si plusieurs m√©dicaments, utilise check_drug_interactions
3. Utilise search_pubmed_literature pour la condition suspect√©e
4. Utilise search_clinical_trials pour des options th√©rapeutiques

Commence maintenant par utiliser ces fonctions.
          `
        }
      ]

      // Appel avec Function Calling - permettre plusieurs appels
      let response = await callOpenAIWithFunctions(diagnosticMessages, realMedicalFunctions)
      const functionResults = {}
      
      // Traitement des appels de fonctions en s√©rie
      while (response.function_call) {
        const funcName = response.function_call.name
        const funcArgs = JSON.parse(response.function_call.arguments)
        
        console.log(`üîß Appel fonction: ${funcName}`, funcArgs)
        
        const result = await executeRealMedicalFunction(funcName, funcArgs)
        functionResults[funcName] = result
        
        // Continuer la conversation avec les r√©sultats
        diagnosticMessages.push({
          role: "assistant",
          content: null,
          function_call: response.function_call
        })
        
        diagnosticMessages.push({
          role: "function",
          name: funcName,
          content: JSON.stringify(result, null, 2)
        })
        
        response = await callOpenAIWithFunctions(diagnosticMessages, realMedicalFunctions)
      }

      // Demander le diagnostic final structur√© avec toutes les donn√©es
      const finalMessages = [
        ...diagnosticMessages,
        {
          role: "user",
          content: `
Excellent ! Maintenant avec toutes ces donn√©es des vraies APIs m√©dicales, fournis un diagnostic complet en JSON:

{
  "diagnostic_analysis": {
    "differential_diagnoses": [
      {
        "diagnosis": "Nom diagnostic pr√©cis",
        "icd10": "Code ICD-10",
        "probability": 85,
        "reasoning": "Justification bas√©e sur les donn√©es cliniques ET les APIs",
        "severity": "mild|moderate|severe",
        "urgency": "routine|urgent|emergent",
        "supporting_evidence": ["Preuve 1", "Preuve 2"]
      }
    ],
    "clinical_impression": "Impression globale enrichie par les donn√©es APIs",
    "confidence_level": "high|medium|low"
  },
  "recommendations": {
    "immediate_actions": ["Actions imm√©diates"],
    "follow_up": "Plan de suivi d√©taill√©",
    "additional_tests": ["Examens compl√©mentaires sp√©cifiques"],
    "specialist_referral": "R√©f√©rence sp√©cialiste avec justification",
    "lifestyle_modifications": ["Modifications style de vie"]
  },
  "risk_factors": {
    "identified": ["Facteur 1", "Facteur 2"],
    "modifiable": ["Facteur modifiable 1"],
    "monitoring_required": ["Param√®tre √† surveiller 1"]
  }
}

IMPORTANT: Base tes recommandations sur les donn√©es R√âELLES des APIs.
          `
        }
      ]

      const finalResponse = await callOpenAIWithFunctions(finalMessages)
      const cleaned = finalResponse.content.replace(/```json\s*/g, '').replace(/```\s*$/g, '').trim()
      const diagnosticResults = JSON.parse(cleaned)
      
      setEnhancedResults(diagnosticResults)
      
      // Extraire et organiser les insights API
      const newApiInsights = {
        fdaData: [],
        interactions: null,
        literature: [],
        trials: [],
        recalls: [],
        adverseEvents: []
      }

      // Traiter les r√©sultats FDA
      Object.values(functionResults).forEach(result => {
        if (result.labeling) {
          newApiInsights.fdaData.push(...result.labeling)
        }
        if (result.recalls) {
          newApiInsights.recalls.push(...result.recalls)
        }
        if (result.adverseEvents) {
          newApiInsights.adverseEvents.push(...result.adverseEvents)
        }
        if (result.has_interactions !== undefined) {
          newApiInsights.interactions = result
        }
        if (Array.isArray(result) && result[0]?.pmid) {
          newApiInsights.literature.push(...result)
        }
        if (Array.isArray(result) && result[0]?.nct_id) {
          newApiInsights.trials.push(...result)
        }
      })
      
      setApiInsights(newApiInsights)
      setCurrentStep('diagnosis')

    } catch (error) {
      console.error('Erreur diagnostic enrichi:', error)
      setError('diagnosis', `Erreur: ${error.message}`)
    } finally {
      setIsLoading(false)
    }
  }, [patientData, clinicalData, clinicalQuestions, clinicalAnswers, callOpenAIWithFunctions])

  // ========================================
  // üíä G√âN√âRATION PRESCRIPTION EXPERT
  // ========================================

  const generatePrescription = useCallback(async () => {
    if (!enhancedResults) {
      setError('prescription', 'Diagnostic requis')
      return
    }

    setIsLoading(true)
    clearErrors()

    try {
      const messages = [
        {
          role: "system",
          content: "Tu es un m√©decin expert en prescription avec acc√®s aux derni√®res donn√©es FDA et interactions m√©dicamenteuses. G√©n√®re une prescription s√ªre et efficace."
        },
        {
          role: "user",
          content: `
G√©n√®re une prescription d√©taill√©e bas√©e sur:

DIAGNOSTIC: ${JSON.stringify(enhancedResults, null, 2)}
PATIENT: ${JSON.stringify(patientData, null, 2)}
DONN√âES FDA: ${JSON.stringify(apiInsights.fdaData, null, 2)}
INTERACTIONS: ${JSON.stringify(apiInsights.interactions, null, 2)}
√âV√âNEMENTS IND√âSIRABLES: ${JSON.stringify(apiInsights.adverseEvents.slice(0, 3), null, 2)}

Format JSON REQUIS:
{
  "prescription": {
    "medications": [
      {
        "name": "Nom m√©dicament (DCI)",
        "brand_name": "Nom commercial",
        "strength": "Dosage pr√©cis",
        "form": "Forme gal√©nique",
        "quantity": "Quantit√© √† dispenser",
        "dosage": "Posologie d√©taill√©e",
        "duration": "Dur√©e traitement",
        "instructions": "Instructions patient",
        "indication": "Indication pr√©cise",
        "contraindications": ["Contre-indication 1"],
        "side_effects": ["Effet secondaire majeur 1"],
        "monitoring": "Param√®tres √† surveiller"
      }
    ],
    "follow_up": {
      "next_visit": "D√©lai et raison RDV",
      "monitoring": ["Param√®tres surveillance"],
      "warning_signs": ["Signes d'alarme sp√©cifiques"],
      "lifestyle_advice": ["Conseil 1", "Conseil 2"]
    }
  },
  "clinical_justification": "Justification m√©dicale compl√®te",
  "safety_considerations": "Consid√©rations s√©curit√© sp√©cifiques"
}
          `
        }
      ]

      const response = await callOpenAIWithFunctions(messages)
      const cleaned = response.content.replace(/```json\s*/g, '').replace(/```\s*$/g, '').trim()
      const prescription = JSON.parse(cleaned)
      setPrescriptionData(prescription)
      setCurrentStep('prescription')

    } catch (error) {
      console.error('Erreur prescription:', error)
      setError('prescription', `Erreur: ${error.message}`)
    } finally {
      setIsLoading(false)
    }
  }, [enhancedResults, apiInsights, patientData, callOpenAIWithFunctions])

  // Test initial de connectivit√©
  useEffect(() => {
    testApiConnectivity()
  }, [testApiConnectivity])

  // ========================================
  // üîß FONCTIONS UTILITAIRES
  // ========================================

  const clearErrors = () => setErrors({})
  const setError = (field, message) => setErrors(prev => ({ ...prev, [field]: message }))

  const isStepValid = (step) => {
    switch (step) {
      case 'patient': return patientData.name && patientData.age && patientData.gender
      case 'clinical': return clinicalData.chiefComplaint && clinicalData.symptoms
      case 'questions': return clinicalQuestions
      case 'diagnosis': return enhancedResults
      case 'prescription': return prescriptionData
      case 'exams': return recommendedExams
      case 'documents': return generatedDocuments.medicalReport
      default: return false
    }
  }

  // ========================================
  // üé® COMPOSANTS INTERFACE
  // ========================================

  // En-t√™te syst√®me avec status APIs r√©elles
  const SystemHeader = () => (
    <div className="bg-gradient-to-r from-emerald-600 via-blue-600 to-purple-600 text-white p-8 rounded-2xl mb-6 shadow-2xl">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-4xl font-bold flex items-center">
            <Brain className="h-10 w-10 mr-4" />
            Syst√®me M√©dical Expert - APIs R√©elles Int√©gr√©es
          </h1>
          <p className="text-emerald-100 mt-3 text-lg">
            FDA ‚Ä¢ RxNorm ‚Ä¢ PubMed ‚Ä¢ ClinicalTrials.gov ‚Ä¢ OpenAI GPT-4
          </p>
        </div>
        <div className="text-right">
          <div className="text-sm text-emerald-200">Status APIs</div>
          <div className="text-2xl font-bold">
            {Object.values(apiStatus).every(status => status) ? 'üü¢ TOUTES ACTIVES' : 'üü° PARTIELLES'}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-2 md:grid-cols-8 gap-3 mt-6">
        <div className="bg-white bg-opacity-20 rounded-xl p-3 text-center">
          <div className="flex items-center justify-center mb-1">
            {apiStatus.openai ? <Wifi className="h-5 w-5 text-green-300" /> : <WifiOff className="h-5 w-5 text-red-300" />}
          </div>
          <div className="text-xs">OpenAI</div>
          <div className="font-bold text-xs">{apiStatus.openai ? 'ON' : 'OFF'}</div>
        </div>
        <div className="bg-white bg-opacity-20 rounded-xl p-3 text-center">
          <div className="flex items-center justify-center mb-1">
            {apiStatus.fda ? <Wifi className="h-5 w-5 text-green-300" /> : <WifiOff className="h-5 w-5 text-red-300" />}
          </div>
          <div className="text-xs">FDA</div>
          <div className="font-bold text-xs">{apiInsights.fdaData.length}</div>
        </div>
        <div className="bg-white bg-opacity-20 rounded-xl p-3 text-center">
          <div className="flex items-center justify-center mb-1">
            {apiStatus.rxnorm ? <Wifi className="h-5 w-5 text-green-300" /> : <WifiOff className="h-5 w-5 text-red-300" />}
          </div>
          <div className="text-xs">RxNorm</div>
          <div className="font-bold text-xs">{apiInsights.interactions?.interactions?.length || 0}</div>
        </div>
        <div className="bg-white bg-opacity-20 rounded-xl p-3 text-center">
          <div className="flex items-center justify-center mb-1">
            {apiStatus.pubmed ? <Wifi className="h-5 w-5 text-green-300" /> : <WifiOff className="h-5 w-5 text-red-300" />}
          </div>
          <div className="text-xs">PubMed</div>
          <div className="font-bold text-xs">{apiInsights.literature.length}</div>
        </div>
        <div className="bg-white bg-opacity-20 rounded-xl p-3 text-center">
          <FlaskConical className="h-5 w-5 mx-auto mb-1" />
          <div className="text-xs">Essais</div>
          <div className="font-bold text-xs">{apiInsights.trials.length}</div>
        </div>
        <div className="bg-white bg-opacity-20 rounded-xl p-3 text-center">
          <AlertTriangle className="h-5 w-5 mx-auto mb-1" />
          <div className="text-xs">Rappels</div>
          <div className="font-bold text-xs">{apiInsights.recalls.length}</div>
        </div>
        <div className="bg-white bg-opacity-20 rounded-xl p-3 text-center">
          <Heart className="h-5 w-5 mx-auto mb-1" />
          <div className="text-xs">Effets</div>
          <div className="font-bold text-xs">{apiInsights.adverseEvents.length}</div>
        </div>
        <div className="bg-white bg-opacity-20 rounded-xl p-3 text-center">
          <Zap className="h-5 w-5 mx-auto mb-1" />
          <div className="text-xs">√âtape</div>
          <div className="font-bold text-xs">{currentStep.toUpperCase()}</div>
        </div>
      </div>
    </div>
  )

  // Navigation workflow (7 √©tapes)
  const WorkflowNavigation = () => {
    const steps = [
      { id: 'patient', label: 'Patient', icon: User, completed: isStepValid('patient') },
      { id: 'clinical', label: 'Clinique', icon: Stethoscope, completed: isStepValid('clinical') },
      { id: 'questions', label: 'Questions', icon: HelpCircle, completed: isStepValid('questions') },
      { id: 'diagnosis', label: 'Diagnostic', icon: Brain, completed: isStepValid('diagnosis') },
      { id: 'prescription', label: 'Prescription', icon: Pill, completed: isStepValid('prescription') },
      { id: 'exams', label: 'Examens', icon: Microscope, completed: isStepValid('exams') },
      { id: 'documents', label: 'Documents', icon: FileText, completed: isStepValid('documents') }
    ]

    return (
      <div className="bg-white rounded-xl shadow-lg mb-6 p-6">
        <div className="flex items-center justify-between">
          {steps.map((step, index) => (
            <div key={step.id} className="flex items-center">
              <div
                className={`flex items-center justify-center w-12 h-12 rounded-full cursor-pointer transition-all ${
                  step.completed
                    ? 'bg-green-500 text-white shadow-lg'
                    : currentStep === step.id
                    ? 'bg-blue-500 text-white shadow-lg'
                    : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
                }`}
                onClick={() => step.completed && setCurrentStep(step.id)}
              >
                {step.completed ? <CheckCircle className="h-6 w-6" /> : <step.icon className="h-6 w-6" />}
              </div>
              <span className={`ml-3 font-semibold cursor-pointer transition-colors ${
                currentStep === step.id ? 'text-blue-600' : 'text-gray-600 hover:text-gray-800'
              }`}
                    onClick={() => step.completed && setCurrentStep(step.id)}>
                {step.label}
              </span>
              {index < steps.length - 1 && <div className="w-8 h-1 bg-gray-300 ml-6 mr-6 rounded" />}
            </div>
          ))}
        </div>
      </div>
    )
  }

  // Section Patient (identique mais avec de meilleures validations)
  const PatientSection = () => (
    <div className="bg-white rounded-xl shadow-lg p-6">
      <h2 className="text-2xl font-bold mb-6 flex items-center">
        <User className="h-6 w-6 mr-3 text-blue-600" />
        Donn√©es Patient Compl√®tes
      </h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <input
          type="text"
          value={patientData.name}
          onChange={(e) => setPatientData(prev => ({ ...prev, name: e.target.value }))}
          placeholder="Nom complet *"
          className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
        <input
          type="number"
          value={patientData.age}
          onChange={(e) => setPatientData(prev => ({ ...prev, age: e.target.value }))}
          placeholder="√Çge *"
          min="0"
          max="120"
          className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
        <select
          value={patientData.gender}
          onChange={(e) => setPatientData(prev => ({ ...prev, gender: e.target.value }))}
          className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="">Genre *</option>
          <option value="M">Masculin</option>
          <option value="F">F√©minin</option>
          <option value="O">Autre</option>
        </select>
        <input
          type="number"
          value={patientData.weight}
          onChange={(e) => setPatientData(prev => ({ ...prev, weight: e.target.value }))}
          placeholder="Poids (kg)"
          min="0"
          max="300"
          className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
        <input
          type="number"
          value={patientData.height}
          onChange={(e) => setPatientData(prev => ({ ...prev, height: e.target.value }))}
          placeholder="Taille (cm)"
          min="0"
          max="250"
          className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
        <input
          type="text"
          value={patientData.insurance}
          onChange={(e) => setPatientData(prev => ({ ...prev, insurance: e.target.value }))}
          placeholder="Assurance maladie"
          className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      <div className="mt-4 space-y-4">
        <textarea
          value={patientData.medicalHistory}
          onChange={(e) => setPatientData(prev => ({ ...prev, medicalHistory: e.target.value }))}
          placeholder="Ant√©c√©dents m√©dicaux d√©taill√©s (maladies chroniques, chirurgies, hospitalisations)"
          rows={3}
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
        <textarea
          value={patientData.currentMedications}
          onChange={(e) => setPatientData(prev => ({ ...prev, currentMedications: e.target.value }))}
          placeholder="M√©dicaments actuels (nom, dosage, fr√©quence) - IMPORTANT pour v√©rification interactions"
          rows={3}
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
        <textarea
          value={patientData.allergies}
          onChange={(e) => setPatientData(prev => ({ ...prev, allergies: e.target.value }))}
          placeholder="Allergies connues (m√©dicaments, aliments, environnement)"
          rows={2}
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
        <input
          type="text"
          value={patientData.emergencyContact}
          onChange={(e) => setPatientData(prev => ({ ...prev, emergencyContact: e.target.value }))}
          placeholder="Contact d'urgence (nom et t√©l√©phone)"
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      <div className="mt-6 flex justify-end">
        <button
          onClick={() => setCurrentStep('clinical')}
          disabled={!isStepValid('patient')}
          className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center font-semibold transition-colors"
        >
          Continuer vers Pr√©sentation Clinique
          <ChevronRight className="h-5 w-5 ml-2" />
        </button>
      </div>
    </div>
  )

  // Section Clinique avec validation am√©lior√©e
  const ClinicalSection = () => (
    <div className="bg-white rounded-xl shadow-lg p-6">
      <h2 className="text-2xl font-bold mb-6 flex items-center">
        <Stethoscope className="h-6 w-6 mr-3 text-green-600" />
        Pr√©sentation Clinique D√©taill√©e
      </h2>
      
      <div className="space-y-4">
        <input
          type="text"
          value={clinicalData.chiefComplaint}
          onChange={(e) => setClinicalData(prev => ({ ...prev, chiefComplaint: e.target.value }))}
          placeholder="Motif de consultation principal *"
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
        />
        <textarea
          value={clinicalData.symptoms}
          onChange={(e) => setClinicalData(prev => ({ ...prev, symptoms: e.target.value }))}
          placeholder="Histoire de la maladie actuelle d√©taill√©e (sympt√¥mes, chronologie, facteurs d√©clenchants, facteurs aggravants/am√©liorants) *"
          rows={6}
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
        />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <input
            type="text"
            value={clinicalData.duration}
            onChange={(e) => setClinicalData(prev => ({ ...prev, duration: e.target.value }))}
            placeholder="Dur√©e des sympt√¥mes (ex: 3 jours, 2 semaines)"
            className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
          />
          <select
            value={clinicalData.severity}
            onChange={(e) => setClinicalData(prev => ({ ...prev, severity: e.target.value }))}
            className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
          >
            <option value="">S√©v√©rit√© des sympt√¥mes</option>
            <option value="mild">L√©g√®re (1-3/10)</option>
            <option value="moderate">Mod√©r√©e (4-6/10)</option>
            <option value="severe">S√©v√®re (7-10/10)</option>
          </select>
        </div>
        <textarea
          value={clinicalData.physicalExam}
          onChange={(e) => setClinicalData(prev => ({ ...prev, physicalExam: e.target.value }))}
          placeholder="Examen physique (inspection, palpation, auscultation, percussion) - D√©tails par syst√®me"
          rows={4}
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
        />
      </div>

      {/* Signes vitaux √©tendus avec validation */}
      <div className="mt-6 p-4 bg-green-50 rounded-lg border border-green-200">
        <h3 className="font-semibold mb-3 text-green-800 flex items-center">
          <Activity className="h-5 w-5 mr-2" />
          Signes Vitaux
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          <input
            type="text"
            value={clinicalData.vitals.bp}
            onChange={(e) => setClinicalData(prev => ({ 
              ...prev, 
              vitals: { ...prev.vitals, bp: e.target.value }
            }))}
            placeholder="TA (120/80 mmHg)"
            className="p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500 focus:border-green-500"
          />
          <input
            type="text"
            value={clinicalData.vitals.hr}
            onChange={(e) => setClinicalData(prev => ({ 
              ...prev, 
              vitals: { ...prev.vitals, hr: e.target.value }
            }))}
            placeholder="FC (72 bpm)"
            className="p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500 focus:border-green-500"
          />
          <input
            type="text"
            value={clinicalData.vitals.temp}
            onChange={(e) => setClinicalData(prev => ({ 
              ...prev, 
              vitals: { ...prev.vitals, temp: e.target.value }
            }))}
            placeholder="T¬∞ (36.5¬∞C)"
            className="p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500 focus:border-green-500"
          />
          <input
            type="text"
            value={clinicalData.vitals.spo2}
            onChange={(e) => setClinicalData(prev => ({ 
              ...prev, 
              vitals: { ...prev.vitals, spo2: e.target.value }
            }))}
            placeholder="SpO2 (98%)"
            className="p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500 focus:border-green-500"
          />
          <input
            type="text"
            value={clinicalData.vitals.rr}
            onChange={(e) => setClinicalData(prev => ({ 
              ...prev, 
              vitals: { ...prev.vitals, rr: e.target.value }
            }))}
            placeholder="FR (16/min)"
            className="p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500 focus:border-green-500"
          />
          <input
            type="text"
            value={clinicalData.vitals.pain}
            onChange={(e) => setClinicalData(prev => ({ 
              ...prev, 
              vitals: { ...prev.vitals, pain: e.target.value }
            }))}
            placeholder="Douleur (0-10/10)"
            className="p-2 border border-green-300 rounded focus:ring-2 focus:ring-green-500 focus:border-green-500"
          />
        </div>
      </div>

      {errors.questions && (
        <div className="mt-4 bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg">
          <AlertTriangle className="h-5 w-5 inline mr-2" />
          {errors.questions}
        </div>
      )}

      <div className="mt-6 flex justify-between">
        <button
          onClick={() => setCurrentStep('patient')}
          className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center font-semibold transition-colors"
        >
          Retour Patient
        </button>

        <button
          onClick={generateClinicalQuestions}
          disabled={!isStepValid('clinical') || isLoading || !apiStatus.openai}
          className="px-8 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center font-semibold transition-colors"
        >
          {isLoading ? (
            <>
              <Loader className="animate-spin h-5 w-5 mr-2" />
              G√©n√©ration questions OpenAI...
            </>
          ) : (
            <>
              <HelpCircle className="h-5 w-5 mr-2" />
              G√©n√©rer Questions Cliniques OpenAI
            </>
          )}
        </button>
      </div>
    </div>
  )

  // Section Questions am√©lior√©e
  const QuestionsSection = () => (
    <div className="bg-white rounded-xl shadow-lg p-6">
      <h2 className="text-2xl font-bold mb-6 flex items-center">
        <HelpCircle className="h-6 w-6 mr-3 text-orange-600" />
        Questions Cliniques OpenAI
      </h2>

      {clinicalQuestions?.preliminary_assessment && (
        <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-6">
          <h3 className="font-semibold text-orange-800 mb-2 flex items-center">
            <Brain className="h-5 w-5 mr-2" />
            Impression Clinique Pr√©liminaire
          </h3>
          <p className="text-sm text-orange-700">{clinicalQuestions.preliminary_assessment}</p>
        </div>
      )}

      {clinicalQuestions?.differential_diagnoses && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <h3 className="font-semibold text-blue-800 mb-2">üéØ Diagnostics Diff√©rentiels √† Explorer</h3>
          <div className="flex flex-wrap gap-2">
            {clinicalQuestions.differential_diagnoses.map((diagnosis, index) => (
              <span key={index} className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
                {diagnosis}
              </span>
            ))}
          </div>
        </div>
      )}

      <div className="space-y-4">
        {clinicalQuestions?.questions?.map((q, index) => (
          <div key={index} className="border border-gray-200 rounded-lg p-4 hover:border-orange-300 transition-colors">
            <div className="mb-3">
              <div className="flex items-center justify-between mb-2">
                <h4 className="font-semibold text-gray-900">{q.question}</h4>
                <div className="flex items-center space-x-2">
                  <span className={`px-2 py-1 rounded text-xs font-semibold ${
                    q.priority === 'high' ? 'bg-red-100 text-red-800' :
                    q.priority === 'medium' ? 'bg-orange-100 text-orange-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {q.priority}
                  </span>
                  <span className="text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded">
                    {q.category}
                  </span>
                </div>
              </div>
              <div className="text-sm text-gray-600 mb-2">
                <strong>Justification:</strong> {q.rationale}
              </div>
              {q.expected_answers && (
                <div className="text-xs text-gray-500 mb-2">
                  <strong>R√©ponses possibles:</strong> {q.expected_answers.join(', ')}
                </div>
              )}
            </div>

            <textarea
              value={clinicalAnswers[index] || ''}
              onChange={(e) => setClinicalAnswers(prev => ({ ...prev, [index]: e.target.value }))}
              rows={3}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
              placeholder="R√©ponse d√©taill√©e √† cette question clinique..."
            />
          </div>
        ))}
      </div>

      {errors.diagnosis && (
        <div className="mt-6 bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg">
          <AlertTriangle className="h-5 w-5 inline mr-2" />
          {errors.diagnosis}
        </div>
      )}

      <div className="mt-8 flex justify-between">
        <button
          onClick={() => setCurrentStep('clinical')}
          className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center font-semibold transition-colors"
        >
          Retour Pr√©sentation Clinique
        </button>

        <button
          onClick={generateEnhancedDiagnosis}
          disabled={Object.keys(clinicalAnswers).length === 0 || isLoading || !apiStatus.openai}
          className="px-8 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center font-semibold transition-colors"
        >
          {isLoading ? (
            <>
              <Loader className="animate-spin h-5 w-5 mr-2" />
              Analyse avec APIs r√©elles...
            </>
          ) : (
            <>
              <Globe className="h-5 w-5 mr-2" />
              Lancer Diagnostic avec APIs R√©elles
            </>
          )}
        </button>
      </div>
    </div>
  )

  // Section Diagnostic avec vraies donn√©es APIs
  const DiagnosisSection = () => (
    <div className="space-y-6">
      {/* Analyse diagnostique principale */}
      {enhancedResults?.diagnostic_analysis && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-2xl font-bold mb-6 flex items-center">
            <Brain className="h-6 w-6 mr-3 text-purple-600" />
            Diagnostic Expert avec APIs R√©elles
          </h2>

          <div className="bg-purple-50 border border-purple-200 rounded-lg p-4 mb-6">
            <h3 className="font-semibold text-purple-800 mb-2 flex items-center">
              <Target className="h-5 w-5 mr-2" />
              Impression Clinique Enrichie
            </h3>
            <p className="text-sm text-purple-700">{enhancedResults.diagnostic_analysis.clinical_impression}</p>
            {enhancedResults.diagnostic_analysis.confidence_level && (
              <div className="mt-2">
                <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${
                  enhancedResults.diagnostic_analysis.confidence_level === 'high' ? 'bg-green-100 text-green-800' :
                  enhancedResults.diagnostic_analysis.confidence_level === 'medium' ? 'bg-orange-100 text-orange-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  Confiance: {enhancedResults.diagnostic_analysis.confidence_level}
                </span>
              </div>
            )}
          </div>

          <div className="space-y-4">
            <h3 className="text-lg font-semibold">Diagnostics Diff√©rentiels Bas√©s sur les APIs:</h3>
            {enhancedResults.diagnostic_analysis.differential_diagnoses?.map((diag, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4 hover:border-purple-300 transition-colors">
                <div className="flex justify-between items-start mb-2">
                  <h4 className="font-semibold text-gray-900">{diag.diagnosis}</h4>
                  <div className="flex items-center space-x-2">
                    <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-semibold">
                      {diag.probability}%
                    </span>
                    <span className={`px-2 py-1 rounded text-sm font-semibold ${
                      diag.severity === 'severe' ? 'bg-red-100 text-red-800' :
                      diag.severity === 'moderate' ? 'bg-orange-100 text-orange-800' :
                      'bg-green-100 text-green-800'
                    }`}>
                      {diag.severity}
                    </span>
                    <span className={`px-2 py-1 rounded text-sm font-semibold ${
                      diag.urgency === 'emergent' ? 'bg-red-500 text-white' :
                      diag.urgency === 'urgent' ? 'bg-orange-500 text-white' :
                      'bg-green-500 text-white'
                    }`}>
                      {diag.urgency}
                    </span>
                  </div>
                </div>
                <div className="text-sm text-gray-600 space-y-1">
                  <p><strong>Code ICD-10:</strong> {diag.icd10}</p>
                  <p><strong>Raisonnement:</strong> {diag.reasoning}</p>
                  {diag.supporting_evidence && (
                    <div>
                      <strong>Preuves supportives:</strong>
                      <ul className="list-disc list-inside ml-4 mt-1">
                        {diag.supporting_evidence.map((evidence, idx) => (
                          <li key={idx}>{evidence}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Donn√©es FDA r√©elles */}
      {apiInsights.fdaData?.length > 0 && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-bold mb-4 flex items-center">
            <Database className="h-5 w-5 mr-2 text-blue-600" />
            Donn√©es FDA Officielles
          </h3>
          <div className="space-y-4">
            {apiInsights.fdaData.slice(0, 3).map((drug, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4">
                <h4 className="font-semibold text-gray-900 mb-2">
                  {drug.openfda?.brand_name?.[0] || drug.openfda?.generic_name?.[0] || 'M√©dicament'}
                </h4>
                <div className="text-sm text-gray-600 space-y-1">
                  {drug.indications_and_usage && (
                    <p><strong>Indications FDA:</strong> {drug.indications_and_usage[0].substring(0, 200)}...</p>
                  )}
                  {drug.contraindications && (
                    <p className="text-red-600"><strong>Contre-indications:</strong> {drug.contraindications[0].substring(0, 200)}...</p>
                  )}
                  {drug.warnings && (
                    <p className="text-orange-600"><strong>Avertissements:</strong> {drug.warnings[0].substring(0, 200)}...</p>
                  )}
                  {drug.dosage_and_administration && (
                    <p><strong>Posologie:</strong> {drug.dosage_and_administration[0].substring(0, 200)}...</p>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Interactions m√©dicamenteuses r√©elles RxNorm */}
      {apiInsights.interactions?.has_interactions && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-bold mb-4 flex items-center">
            <AlertTriangle className="h-5 w-5 mr-2 text-red-600" />
            Interactions RxNorm D√©tect√©es
          </h3>
          <div className="space-y-3">
            {apiInsights.interactions.interactions?.map((interaction, index) => (
              <div key={index} className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="font-semibold text-red-800">
                    {interaction.drug1} ‚Üî {interaction.drug2}
                  </span>
                  <span className={`px-2 py-1 rounded text-xs font-semibold ${
                    interaction.severity === 'major' ? 'bg-red-600 text-white' : 
                    interaction.severity === 'moderate' ? 'bg-orange-500 text-white' :
                    'bg-yellow-500 text-white'
                  }`}>
                    {interaction.severity}
                  </span>
                </div>
                <p className="text-sm text-red-700">{interaction.description}</p>
              </div>
            ))}
          </div>
          
          {apiInsights.interactions.rxcuis?.length > 0 && (
            <div className="mt-4 p-3 bg-blue-50 rounded-lg">
              <h4 className="font-semibold text-blue-800 mb-2">Codes RxCUI identifi√©s:</h4>
              <div className="flex flex-wrap gap-2">
                {apiInsights.interactions.rxcuis.map((item, index) => (
                  <span key={index} className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">
                    {item.name}: {item.rxcui}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Litt√©rature PubMed r√©elle */}
      {apiInsights.literature?.length > 0 && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-bold mb-4 flex items-center">
            <BookOpen className="h-5 w-5 mr-2 text-green-600" />
            Litt√©rature PubMed R√©cente
          </h3>
          <div className="space-y-4">
            {apiInsights.literature.slice(0, 3).map((article, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4">
                <h4 className="font-semibold text-gray-900 mb-2">{article.title}</h4>
                <div className="text-sm text-gray-600 space-y-1">
                  <p><strong>Auteurs:</strong> {article.authors}</p>
                  <p><strong>Journal:</strong> {article.journal} ({article.year})</p>
                  <p><strong>PMID:</strong> {article.pmid}</p>
                  {article.doi && <p><strong>DOI:</strong> {article.doi}</p>}
                  {article.abstract && article.abstract !== 'R√©sum√© non disponible' && (
                    <p><strong>R√©sum√©:</strong> {article.abstract.substring(0, 300)}...</p>
                  )}
                  <p className="text-blue-600"><strong>Pertinence:</strong> {article.relevance}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Essais cliniques r√©els */}
      {apiInsights.trials?.length > 0 && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-bold mb-4 flex items-center">
            <FlaskConical className="h-5 w-5 mr-2 text-orange-600" />
            Essais Cliniques en Cours (ClinicalTrials.gov)
          </h3>
          <div className="space-y-4">
            {apiInsights.trials.slice(0, 3).map((trial, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-semibold text-gray-900">{trial.title}</h4>
                  <div className="flex space-x-2">
                    <span className="bg-orange-100 text-orange-800 px-2 py-1 rounded text-xs font-semibold">
                      {trial.phase}
                    </span>
                    <span className={`px-2 py-1 rounded text-xs font-semibold ${
                      trial.status === 'Recruiting' ? 'bg-green-100 text-green-800' :
                      trial.status === 'Active' ? 'bg-blue-100 text-blue-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {trial.status}
                    </span>
                  </div>
                </div>
                <div className="text-sm text-gray-600 space-y-1">
                  <p><strong>NCT ID:</strong> {trial.nct_id}</p>
                  <p><strong>Condition:</strong> {trial.condition}</p>
                  <p><strong>Intervention:</strong> {trial.intervention}</p>
                  <p><strong>Localisation:</strong> {trial.location}</p>
                  <p><strong>√âligibilit√©:</strong> {trial.eligibility.substring(0, 200)}...</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Rappels FDA */}
      {apiInsights.recalls?.length > 0 && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-bold mb-4 flex items-center">
            <AlertTriangle className="h-5 w-5 mr-2 text-red-600" />
            Rappels FDA R√©cents
          </h3>
          <div className="space-y-3">
            {apiInsights.recalls.slice(0, 3).map((recall, index) => (
              <div key={index} className="bg-red-50 border border-red-200 rounded-lg p-4">
                <h4 className="font-semibold text-red-800 mb-2">{recall.product_description}</h4>
                <div className="text-sm text-red-700 space-y-1">
                  <p><strong>Raison:</strong> {recall.reason_for_recall}</p>
                  <p><strong>Classification:</strong> {recall.classification}</p>
                  <p><strong>Date:</strong> {recall.report_date}</p>
                  {recall.voluntary_mandated && (
                    <p><strong>Type:</strong> {recall.voluntary_mandated}</p>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* √âv√©nements ind√©sirables FDA */}
      {apiInsights.adverseEvents?.length > 0 && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-bold mb-4 flex items-center">
            <Heart className="h-5 w-5 mr-2 text-pink-600" />
            √âv√©nements Ind√©sirables FDA (FAERS)
          </h3>
          <div className="space-y-3">
            {apiInsights.adverseEvents.slice(0, 3).map((event, index) => (
              <div key={index} className="bg-pink-50 border border-pink-200 rounded-lg p-4">
                <div className="text-sm text-pink-700 space-y-1">
                  {event.patient?.patientonsetage && (
                    <p><strong>√Çge patient:</strong> {event.patient.patientonsetage} {event.patient.patientonsetageunit}</p>
                  )}
                  {event.patient?.patientsex && (
                    <p><strong>Genre:</strong> {event.patient.patientsex === '1' ? 'Masculin' : event.patient.patientsex === '2' ? 'F√©minin' : 'Non sp√©cifi√©'}</p>
                  )}
                  {event.serious && (
                    <p><strong>S√©rieux:</strong> {event.serious === '1' ? 'Oui' : 'Non'}</p>
                  )}
                  {event.receivedate && (
                    <p><strong>Date rapport:</strong> {event.receivedate}</p>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Recommandations */}
      {enhancedResults?.recommendations && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-bold mb-4 flex items-center">
            <Target className="h-5 w-5 mr-2 text-indigo-600" />
            Recommandations Cliniques Bas√©es sur les APIs
          </h3>
          <div className="space-y-4">
            {enhancedResults.recommendations.immediate_actions?.length > 0 && (
              <div>
                <h4 className="font-semibold text-gray-900 mb-2 text-red-600">üö® Actions Imm√©diates:</h4>
                <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                  {enhancedResults.recommendations.immediate_actions.map((action, index) => (
                    <li key={index}>{action}</li>
                  ))}
                </ul>
              </div>
            )}
            
            {enhancedResults.recommendations.follow_up && (
              <div>
                <h4 className="font-semibold text-gray-900 mb-2 text-blue-600">üìÖ Plan de Suivi:</h4>
                <p className="text-sm text-gray-700">{enhancedResults.recommendations.follow_up}</p>
              </div>
            )}

            {enhancedResults.recommendations.additional_tests?.length > 0 && (
              <div>
                <h4 className="font-semibold text-gray-900 mb-2 text-green-600">üß™ Examens Compl√©mentaires:</h4>
                <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                  {enhancedResults.recommendations.additional_tests.map((test, index) => (
                    <li key={index}>{test}</li>
                  ))}
                </ul>
              </div>
            )}

            {enhancedResults.recommendations.specialist_referral && (
              <div>
                <h4 className="font-semibold text-gray-900 mb-2 text-purple-600">üë®‚Äç‚öïÔ∏è R√©f√©rence Sp√©cialiste:</h4>
                <p className="text-sm text-gray-700">{enhancedResults.recommendations.specialist_referral}</p>
              </div>
            )}

            {enhancedResults.recommendations.lifestyle_modifications?.length > 0 && (
              <div>
                <h4 className="font-semibold text-gray-900 mb-2 text-orange-600">üèÉ‚Äç‚ôÇÔ∏è Modifications Style de Vie:</h4>
                <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                  {enhancedResults.recommendations.lifestyle_modifications.map((mod, index) => (
                    <li key={index}>{mod}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Facteurs de risque */}
      {enhancedResults?.risk_factors && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-bold mb-4 flex items-center">
            <Shield className="h-5 w-5 mr-2 text-yellow-600" />
            Facteurs de Risque Identifi√©s
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {enhancedResults.risk_factors.identified?.length > 0 && (
              <div>
                <h4 className="font-semibold text-red-600 mb-2">‚ö†Ô∏è Identifi√©s:</h4>
                <ul className="text-sm text-gray-700 space-y-1">
                  {enhancedResults.risk_factors.identified.map((factor, index) => (
                    <li key={index} className="flex items-center">
                      <div className="w-2 h-2 bg-red-500 rounded-full mr-2"></div>
                      {factor}
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {enhancedResults.risk_factors.modifiable?.length > 0 && (
              <div>
                <h4 className="font-semibold text-orange-600 mb-2">üîÑ Modifiables:</h4>
                <ul className="text-sm text-gray-700 space-y-1">
                  {enhancedResults.risk_factors.modifiable.map((factor, index) => (
                    <li key={index} className="flex items-center">
                      <div className="w-2 h-2 bg-orange-500 rounded-full mr-2"></div>
                      {factor}
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {enhancedResults.risk_factors.monitoring_required?.length > 0 && (
              <div>
                <h4 className="font-semibold text-blue-600 mb-2">üëÅÔ∏è √Ä Surveiller:</h4>
                <ul className="text-sm text-gray-700 space-y-1">
                  {enhancedResults.risk_factors.monitoring_required.map((factor, index) => (
                    <li key={index} className="flex items-center">
                      <div className="w-2 h-2 bg-blue-500 rounded-full mr-2"></div>
                      {factor}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      )}

      <div className="mt-8 flex justify-between">
        <button
          onClick={() => setCurrentStep('questions')}
          className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center font-semibold transition-colors"
        >
          Retour Questions
        </button>

        <button
          onClick={generatePrescription}
          disabled={isLoading || !apiStatus.openai}
          className="px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center font-semibold transition-colors"
        >
          {isLoading ? (
            <>
              <Loader className="animate-spin h-5 w-5 mr-2" />
              G√©n√©ration prescription...
            </>
          ) : (
            <>
              <Pill className="h-5 w-5 mr-2" />
              G√©n√©rer Prescription Expert
            </>
          )}
        </button>
      </div>
    </div>
  )

  // Section Prescription avec donn√©es API enrichies
  const PrescriptionSection = () => (
    <div className="bg-white rounded-xl shadow-lg p-6">
      <h2 className="text-2xl font-bold mb-6 flex items-center">
        <Pill className="h-6 w-6 mr-3 text-green-600" />
        Prescription M√©dicale Expert
      </h2>

      {prescriptionData ? (
        <div className="space-y-6">
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <h3 className="font-semibold text-green-800 mb-2 flex items-center">
              <CheckCircle className="h-5 w-5 mr-2" />
              Prescription G√©n√©r√©e avec Donn√©es APIs
            </h3>
            <p className="text-sm text-green-700">
              Prescription bas√©e sur le diagnostic IA enrichi par les donn√©es FDA, RxNorm, PubMed et ClinicalTrials.gov
            </p>
          </div>

          {prescriptionData.prescription?.medications && (
            <div>
              <h3 className="text-lg font-semibold mb-4">üíä M√©dicaments Prescrits:</h3>
              <div className="space-y-4">
                {prescriptionData.prescription.medications.map((med, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4 hover:border-green-300 transition-colors">
                    <div className="flex items-center justify-between mb-3">
                      <h4 className="font-semibold text-gray-900">{med.name}</h4>
                      {med.brand_name && (
                        <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">
                          {med.brand_name}
                        </span>
                      )}
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600">
                      <div className="space-y-1">
                        <p><strong>Dosage:</strong> {med.strength} - {med.form}</p>
                        <p><strong>Posologie:</strong> {med.dosage}</p>
                        <p><strong>Dur√©e:</strong> {med.duration}</p>
                        <p><strong>Quantit√©:</strong> {med.quantity}</p>
                        <p><strong>Indication:</strong> {med.indication}</p>
                      </div>
                      <div className="space-y-1">
                        <p><strong>Instructions:</strong> {med.instructions}</p>
                        {med.monitoring && (
                          <p className="text-blue-600"><strong>Surveillance:</strong> {med.monitoring}</p>
                        )}
                        {med.contraindications?.length > 0 && (
                          <div>
                            <strong className="text-red-600">Contre-indications:</strong>
                            <ul className="list-disc list-inside ml-4 mt-1 text-red-600">
                              {med.contraindications.map((ci, idx) => (
                                <li key={idx}>{ci}</li>
                              ))}
                            </ul>
                          </div>
                        )}
                        {med.side_effects?.length > 0 && (
                          <div>
                            <strong className="text-orange-600">Effets secondaires:</strong>
                            <ul className="list-disc list-inside ml-4 mt-1 text-orange-600">
                              {med.side_effects.map((se, idx) => (
                                <li key={idx}>{se}</li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {prescriptionData.prescription?.follow_up && (
            <div>
              <h3 className="text-lg font-semibold mb-4">üìã Instructions de Suivi:</h3>
              <div className="border border-gray-200 rounded-lg p-4">
                <div className="text-sm text-gray-600 space-y-3">
                  <p><strong>Prochain RDV:</strong> {prescriptionData.prescription.follow_up.next_visit}</p>
                  
                  {prescriptionData.prescription.follow_up.monitoring?.length > 0 && (
                    <div>
                      <strong className="text-blue-600">Surveillance:</strong>
                      <ul className="list-disc list-inside ml-4 mt-1">
                        {prescriptionData.prescription.follow_up.monitoring.map((item, index) => (
                          <li key={index}>{item}</li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {prescriptionData.prescription.follow_up.warning_signs?.length > 0 && (
                    <div>
                      <strong className="text-red-600">Signes d'alarme:</strong>
                      <ul className="list-disc list-inside ml-4 mt-1 text-red-600">
                        {prescriptionData.prescription.follow_up.warning_signs.map((sign, index) => (
                          <li key={index}>{sign}</li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {prescriptionData.prescription.follow_up.lifestyle_advice?.length > 0 && (
                    <div>
                      <strong className="text-green-600">Conseils hygi√®ne de vie:</strong>
                      <ul className="list-disc list-inside ml-4 mt-1 text-green-600">
                        {prescriptionData.prescription.follow_up.lifestyle_advice.map((advice, index) => (
                          <li key={index}>{advice}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {prescriptionData.clinical_justification && (
            <div>
              <h3 className="text-lg font-semibold mb-4">üìù Justification Clinique:</h3>
              <div className="border border-gray-200 rounded-lg p-4">
                <p className="text-sm text-gray-700">{prescriptionData.clinical_justification}</p>
              </div>
            </div>
          )}

          {prescriptionData.safety_considerations && (
            <div>
              <h3 className="text-lg font-semibold mb-4">üõ°Ô∏è Consid√©rations de S√©curit√©:</h3>
              <div className="border border-orange-200 bg-orange-50 rounded-lg p-4">
                <p className="text-sm text-orange-700">{prescriptionData.safety_considerations}</p>
              </div>
            </div>
          )}

          <div className="flex gap-4">
            <button 
              onClick={() => window.print()}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center font-semibold transition-colors"
            >
              <Printer className="h-5 w-5 mr-2" />
              Imprimer Prescription
            </button>
            <button 
              onClick={() => {
                const blob = new Blob([JSON.stringify(prescriptionData, null, 2)], { type: 'application/json' })
                const url = URL.createObjectURL(blob)
                const a = document.createElement('a')
                a.href = url
                a.download = `prescription_${patientData.name}_${new Date().toISOString().split('T')[0]}.json`
                a.click()
              }}
              className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center font-semibold transition-colors"
            >
              <Download className="h-5 w-5 mr-2" />
              T√©l√©charger
            </button>
          </div>
        </div>
      ) : (
        <div className="text-center py-8">
          <Pill className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500">Aucune prescription g√©n√©r√©e</p>
        </div>
      )}

      <div className="mt-8 flex justify-between">
        <button
          onClick={() => setCurrentStep('diagnosis')}
          className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 flex items-center font-semibold transition-colors"
        >
          Retour Diagnostic
        </button>
        
        <button
          onClick={() => setCurrentStep('exams')}
          className="px-8 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 flex items-center font-semibold transition-colors"
        >
          Continuer vers Examens
          <ChevronRight className="h-5 w-5 ml-2" />
        </button>
      </div>
    </div>
  )

  // Panneau lat√©ral Status avec APIs r√©elles
  const StatusPanel = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-lg font-bold mb-4 flex items-center">
          <Globe className="h-5 w-5 mr-2 text-green-600" />
          Status APIs R√©elles
        </h3>
        <div className="space-y-2 text-sm">
          <div className="flex justify-between items-center">
            <span>OpenAI GPT-4:</span>
            <div className="flex items-center">
              {apiStatus.openai ? <Wifi className="h-4 w-4 text-green-600 mr-1" /> : <WifiOff className="h-4 w-4 text-red-600 mr-1" />}
              <span className={apiStatus.openai ? 'text-green-600 font-semibold' : 'text-red-600 font-semibold'}>
                {apiStatus.openai ? 'Connect√©' : 'D√©connect√©'}
              </span>
            </div>
          </div>
          <div className="flex justify-between items-center">
            <span>FDA Database:</span>
            <div className="flex items-center">
              {apiStatus.fda ? <Wifi className="h-4 w-4 text-green-600 mr-1" /> : <WifiOff className="h-4 w-4 text-red-600 mr-1" />}
              <span className={apiStatus.fda ? 'text-green-600 font-semibold' : 'text-red-600 font-semibold'}>
                {apiStatus.fda ? 'Actif' : 'Inactif'}
              </span>
            </div>
          </div>
          <div className="flex justify-between items-center">
            <span>RxNorm API:</span>
            <div className="flex items-center">
              {apiStatus.rxnorm ? <Wifi className="h-4 w-4 text-green-600 mr-1" /> : <WifiOff className="h-4 w-4 text-red-600 mr-1" />}
              <span className={apiStatus.rxnorm ? 'text-green-600 font-semibold' : 'text-red-600 font-semibold'}>
                {apiStatus.rxnorm ? 'Actif' : 'Inactif'}
              </span>
            </div>
          </div>
          <div className="flex justify-between items-center">
            <span>PubMed API:</span>
            <div className="flex items-center">
              {apiStatus.pubmed ? <Wifi className="h-4 w-4 text-green-600 mr-1" /> : <WifiOff className="h-4 w-4 text-red-600 mr-1" />}
              <span className={apiStatus.pubmed ? 'text-green-600 font-semibold' : 'text-red-600 font-semibold'}>
                {apiStatus.pubmed ? 'Actif' : 'Inactif'}
              </span>
            </div>
          </div>
          <div className="flex justify-between items-center">
            <span>ClinicalTrials:</span>
            <div className="flex items-center">
              <Wifi className="h-4 w-4 text-green-600 mr-1" />
              <span className="text-green-600 font-semibold">Actif</span>
            </div>
          </div>
        </div>
        
        <button
          onClick={testApiConnectivity}
          className="w-full mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm"
        >
          Tester Connectivit√©
        </button>
      </div>

      {isStepValid('patient') && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-lg font-bold mb-4 flex items-center">
            <User className="h-5 w-5 mr-2 text-blue-600" />
            Aper√ßu Patient
          </h3>
          <div className="text-sm space-y-1">
            <p><strong>Nom:</strong> {patientData.name}</p>
            <p><strong>√Çge:</strong> {patientData.age} ans</p>
            <p><strong>Genre:</strong> {patientData.gender}</p>
            {patientData.weight && <p><strong>Poids:</strong> {patientData.weight} kg</p>}
            {patientData.height && <p><strong>Taille:</strong> {patientData.height} cm</p>}
            {patientData.currentMedications && (
              <p><strong>M√©dicaments:</strong> {patientData.currentMedications.substring(0, 50)}...</p>
            )}
          </div>
        </div>
      )}

      {isStepValid('clinical') && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-lg font-bold mb-4 flex items-center">
            <Stethoscope className="h-5 w-5 mr-2 text-green-600" />
            Pr√©sentation Clinique
          </h3>
          <div className="text-sm space-y-1">
            <p><strong>Motif:</strong> {clinicalData.chiefComplaint}</p>
            <p><strong>Dur√©e:</strong> {clinicalData.duration || 'Non pr√©cis√©e'}</p>
            <p><strong>S√©v√©rit√©:</strong> {clinicalData.severity || 'Non √©valu√©e'}</p>
            {clinicalData.vitals.bp && <p><strong>TA:</strong> {clinicalData.vitals.bp}</p>}
            {clinicalData.vitals.hr && <p><strong>FC:</strong> {clinicalData.vitals.hr}</p>}
          </div>
        </div>
      )}

      {enhancedResults && (
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-lg font-bold mb-4 flex items-center">
            <Brain className="h-5 w-5 mr-2 text-purple-600" />
            Donn√©es APIs Collect√©es
          </h3>
          <div className="text-sm space-y-1">
            <p><strong>Diagnoses:</strong> {enhancedResults.diagnostic_analysis?.differential_diagnoses?.length || 0}</p>
            <p><strong>Donn√©es FDA:</strong> {apiInsights.fdaData?.length || 0}</p>
            <p><strong>Interactions:</strong> {apiInsights.interactions?.interactions?.length || 0}</p>
            <p><strong>Articles PubMed:</strong> {apiInsights.literature?.length || 0}</p>
            <p><strong>Essais cliniques:</strong> {apiInsights.trials?.length || 0}</p>
            <p><strong>Rappels FDA:</strong> {apiInsights.recalls?.length || 0}</p>
            <p><strong>√âv√©nements ind√©s.:</strong> {apiInsights.adverseEvents?.length || 0}</p>
          </div>
        </div>
      )}

      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-lg font-bold mb-4 flex items-center">
          <Key className="h-5 w-5 mr-2 text-indigo-600" />
          Informations Syst√®me
        </h3>
        <div className="text-xs space-y-1 text-gray-600">
          <p><strong>Version:</strong> Medical AI v2.0</p>
          <p><strong>Mod√®le:</strong> GPT-4 Turbo</p>
          <p><strong>APIs:</strong> FDA, RxNorm, PubMed</p>
          <p><strong>Derni√®re MAJ:</strong> {new Date().toLocaleDateString()}</p>
        </div>
      </div>
    </div>
  )

  // ========================================
  // üé® RENDU PRINCIPAL
  // ========================================

  return (
    <div className="max-w-7xl mx-auto p-4 bg-gray-50 min-h-screen">
      <SystemHeader />
      <WorkflowNavigation />
      
      {/* Alertes de connectivit√© */}
      {!Object.values(apiStatus).every(status => status) && (
        <div className="bg-yellow-50 border border-yellow-200 text-yellow-800 p-4 rounded-xl mb-6">
          <AlertTriangle className="h-5 w-5 inline mr-2" />
          <strong>Attention:</strong> Certaines APIs ne sont pas disponibles. Les fonctionnalit√©s peuvent √™tre limit√©es.
        </div>
      )}
      
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <div className="lg:col-span-3">
          {currentStep === 'patient' && <PatientSection />}
          {currentStep === 'clinical' && <ClinicalSection />}
          {currentStep === 'questions' && <QuestionsSection />}
          {currentStep === 'diagnosis' && <DiagnosisSection />}
          {currentStep === 'prescription' && <PrescriptionSection />}
          {currentStep === 'exams' && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-6 flex items-center">
                <Microscope className="h-6 w-6 mr-3 text-indigo-600" />
                Examens Compl√©mentaires (√Ä impl√©menter)
              </h2>
              <div className="text-center py-8">
                <Microscope className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">Section en d√©veloppement</p>
              </div>
            </div>
          )}
          {currentStep === 'documents' && (
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-6 flex items-center">
                <FileText className="h-6 w-6 mr-3 text-green-600" />
                Documents M√©dicaux (√Ä impl√©menter)
              </h2>
              <div className="text-center py-8">
                <FileText className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">Section en d√©veloppement</p>
              </div>
            </div>
          )}
        </div>
        
        <div>
          <StatusPanel />
        </div>
      </div>
    </div>
  )
}

export default RealMedicalSystemOpenAI
