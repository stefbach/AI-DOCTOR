// app/api/generate-consultation-report/route.ts

import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

// Types pour une meilleure structure
interface PatientData {
  nom?: string
  lastName?: string
  prenom?: string
  firstName?: string
  age?: number | string
  sexe?: string
  gender?: string
  dateNaissance?: string
  birthDate?: string
  telephone?: string
  phone?: string
  adresse?: string
  address?: string
  email?: string
  allergies?: string[]
  antecedents?: string[]
  medicalHistory?: string[]
}

interface Medication {
  medication?: string
  name?: string
  dosage?: string
  frequency?: string
  posology?: string
  duration?: string
  instructions?: string
}

interface Examination {
  name?: string
  type?: string
  urgency?: string
  justification?: string
  indication?: string
  region?: string
  details?: string
}

interface RequestBody {
  patientData: PatientData
  clinicalData: any
  questionsData?: any
  diagnosisData: any
  editedDocuments?: any
  includeFullPrescriptions?: boolean
}

export async function POST(request: NextRequest) {
  try {
    console.log("üìã G√©n√©ration du compte rendu m√©dical professionnel")
    
    // Parse et validation des donn√©es
    const body: RequestBody = await request.json()
    const { 
      patientData, 
      clinicalData, 
      questionsData, 
      diagnosisData,
      editedDocuments,
      includeFullPrescriptions = false
    } = body

    // Validation des donn√©es requises
    if (!patientData || !clinicalData || !diagnosisData) {
      return NextResponse.json(
        { success: false, error: "Donn√©es incompl√®tes" },
        { status: 400 }
      )
    }

    // Log pour debug de la structure
    console.log("üìä Structure diagnosisData:", JSON.stringify(diagnosisData, null, 2))
    console.log("üìã Structure editedDocuments:", JSON.stringify(editedDocuments, null, 2))

    // Pr√©paration du contexte m√©dical unifi√©
    console.log("üîß Pr√©paration du contexte m√©dical...")
    const medicalContext = prepareMedicalContext({
      patientData,
      clinicalData,
      questionsData,
      diagnosisData,
      editedDocuments
    })

    // G√©n√©ration du prompt structur√©
    console.log("‚úçÔ∏è G√©n√©ration du prompt...")
    let prompt: string
    try {
      prompt = generateProfessionalReportPrompt(medicalContext, patientData)
    } catch (promptError) {
      console.error("‚ùå Erreur lors de la g√©n√©ration du prompt:", promptError)
      throw new Error(`Erreur de g√©n√©ration du prompt: ${promptError instanceof Error ? promptError.message : 'Erreur inconnue'}`)
    }

    console.log("ü§ñ G√©n√©ration du rapport avec GPT-4...")
    console.log("üìù Longueur du prompt:", prompt.length, "caract√®res")
    
    const result = await generateText({
      model: openai("gpt-4o"),
      prompt,
      maxTokens: 8000,
      temperature: 0.2, // R√©duit pour une sortie plus d√©terministe
      systemPrompt: "Tu es un assistant m√©dical qui g√©n√®re UNIQUEMENT du JSON valide sans aucun formatage markdown. Ne jamais utiliser de backticks ou de formatage de code."
    })

    console.log("‚úÖ R√©ponse GPT-4 re√ßue, longueur:", result.text.length, "caract√®res")
    console.log("üìÑ D√©but de la r√©ponse:", result.text.substring(0, 200))

    console.log("‚úÖ Rapport g√©n√©r√© avec succ√®s")

    // Parse et validation du rapport
    const reportData = parseAndValidateReport(result.text)
    
    // Enrichissement des m√©tadonn√©es
    reportData.metadata.wordCount = calculateWordCount(reportData.rapport)
    
    // Gestion des prescriptions selon le format demand√©
    if (!includeFullPrescriptions) {
      reportData.prescriptionsSimplifiees = {
        examens: formatSimplifiedExamsPrescription(reportData),
        medicaments: formatSimplifiedMedicationsPrescription(reportData)
      }
      delete reportData.prescriptions
    }

    return NextResponse.json({
      success: true,
      report: reportData,
      metadata: {
        type: "professional_narrative",
        includesFullPrescriptions: includeFullPrescriptions,
        generatedAt: new Date().toISOString()
      }
    })

  } catch (error) {
    console.error("‚ùå Erreur lors de la g√©n√©ration du rapport:", error)
    
    const errorMessage = error instanceof Error ? error.message : "Erreur inconnue"
    const statusCode = error instanceof SyntaxError ? 422 : 500
    
    return NextResponse.json(
      { 
        success: false, 
        error: errorMessage,
        details: process.env.NODE_ENV === 'development' ? error : undefined
      },
      { status: statusCode }
    )
  }
}

// Fonction pour pr√©parer le contexte m√©dical unifi√©
function prepareMedicalContext(data: {
  patientData: PatientData
  clinicalData: any
  questionsData?: any
  diagnosisData: any
  editedDocuments?: any
}) {
  // Normalisation des donn√©es patient
  const normalizedPatient = {
    nom: data.patientData.nom || data.patientData.lastName || '',
    prenom: data.patientData.prenom || data.patientData.firstName || '',
    age: data.patientData.age || '',
    sexe: data.patientData.sexe || data.patientData.gender || 'Non renseign√©',
    dateNaissance: data.patientData.dateNaissance || data.patientData.birthDate || '',
    telephone: data.patientData.telephone || data.patientData.phone || '',
    adresse: data.patientData.adresse || data.patientData.address || '',
    email: data.patientData.email || '',
    allergies: Array.isArray(data.patientData.allergies) ? data.patientData.allergies :
               Array.isArray(data.patientData.medicalHistory?.allergies) ? data.patientData.medicalHistory.allergies : [],
    antecedents: Array.isArray(data.patientData.antecedents) ? data.patientData.antecedents :
                 Array.isArray(data.patientData.medicalHistory) ? data.patientData.medicalHistory : []
  }

  return {
    patient: normalizedPatient,
    clinical: data.clinicalData,
    aiQuestions: data.questionsData?.responses || [],
    diagnosis: data.diagnosisData,
    editedDocuments: data.editedDocuments || {}
  }
}

// Fonction pour g√©n√©rer le prompt structur√©
function generateProfessionalReportPrompt(medicalContext: any, patientData: PatientData): string {
  const patientId = `${patientData.nom || patientData.lastName || 'PATIENT'}_${Date.now()}`
  
  // Extraire les informations pertinentes du contexte
  const motifConsultation = medicalContext.clinical?.chiefComplaint || 
                          (Array.isArray(medicalContext.clinical?.symptoms) ? medicalContext.clinical.symptoms.join(', ') : medicalContext.clinical?.symptoms) || 
                          medicalContext.diagnosis?.chiefComplaint ||
                          "Consultation m√©dicale"
  
  const symptomes = Array.isArray(medicalContext.clinical?.symptoms) ? medicalContext.clinical.symptoms :
                   Array.isArray(medicalContext.diagnosis?.symptoms) ? medicalContext.diagnosis.symptoms : []
  
  const vitalSigns = medicalContext.clinical?.vitalSigns || {}
  
  const examenPhysique = medicalContext.clinical?.physicalExam || 
                        medicalContext.diagnosis?.physicalExamination || {}
  
  // Donn√©es du diagnostic - g√©rer les diff√©rentes structures possibles
  const diagnosticPrincipal = medicalContext.diagnosis?.primaryDiagnosis || 
                             medicalContext.diagnosis?.diagnosis || 
                             medicalContext.diagnosis?.diagnosticHypothesis?.primary || 
                             medicalContext.diagnosis?.diagnosticHypothesis || 
                             medicalContext.diagnosis?.mainDiagnosis || ""
  
  const diagnosticsSecondaires = Array.isArray(medicalContext.diagnosis?.secondaryDiagnoses) ? medicalContext.diagnosis.secondaryDiagnoses :
                                 Array.isArray(medicalContext.diagnosis?.diagnosticHypothesis?.secondary) ? medicalContext.diagnosis.diagnosticHypothesis.secondary : []
  
  const examensRealises = Array.isArray(medicalContext.diagnosis?.performedExams) ? medicalContext.diagnosis.performedExams :
                         Array.isArray(medicalContext.diagnosis?.examsPerformed) ? medicalContext.diagnosis.examsPerformed : []
  
  const analyseDiagnostique = medicalContext.diagnosis?.analysis || 
                             medicalContext.diagnosis?.clinicalAnalysis || 
                             medicalContext.diagnosis?.diagnosticAnalysis || ""
  
  // Traitement propos√© - v√©rifier toutes les structures possibles
  const medicaments = Array.isArray(medicalContext.editedDocuments?.medication?.prescriptions) ? medicalContext.editedDocuments.medication.prescriptions :
                     Array.isArray(medicalContext.diagnosis?.treatment?.medications) ? medicalContext.diagnosis.treatment.medications :
                     Array.isArray(medicalContext.diagnosis?.prescriptions?.medications) ? medicalContext.diagnosis.prescriptions.medications : []
  
  const examsBio = Array.isArray(medicalContext.editedDocuments?.biology?.examinations) ? medicalContext.editedDocuments.biology.examinations :
                   Array.isArray(medicalContext.diagnosis?.examinations?.laboratory) ? medicalContext.diagnosis.examinations.laboratory :
                   Array.isArray(medicalContext.diagnosis?.examinations?.biology) ? medicalContext.diagnosis.examinations.biology :
                   Array.isArray(medicalContext.diagnosis?.prescriptions?.laboratory) ? medicalContext.diagnosis.prescriptions.laboratory : []
  
  const examsImaging = Array.isArray(medicalContext.editedDocuments?.paraclinical?.examinations) ? medicalContext.editedDocuments.paraclinical.examinations :
                      Array.isArray(medicalContext.diagnosis?.examinations?.imaging) ? medicalContext.diagnosis.examinations.imaging :
                      Array.isArray(medicalContext.diagnosis?.examinations?.radiology) ? medicalContext.diagnosis.examinations.radiology :
                      Array.isArray(medicalContext.diagnosis?.prescriptions?.imaging) ? medicalContext.diagnosis.prescriptions.imaging : []
  
  
  // Log des donn√©es extraites pour debug
  console.log("üìä Donn√©es extraites pour le rapport:")
  console.log("- Motif consultation:", motifConsultation)
  console.log("- Diagnostic principal:", diagnosticPrincipal)
  console.log("- M√©dicaments:", medicaments.length)
  console.log("- Examens bio:", examsBio.length)
  console.log("- Examens imagerie:", examsImaging.length)
  
  const prompt = `Tu es un m√©decin senior exp√©riment√© r√©digeant un compte rendu de consultation professionnel et d√©taill√©.

DONN√âES DU PATIENT :
- Nom : ${escapeJsonString(formatPatientName(medicalContext.patient))}
- √Çge : ${escapeJsonString(medicalContext.patient.age)} ans
- Sexe : ${escapeJsonString(medicalContext.patient.sexe)}
- Ant√©c√©dents : ${escapeJsonString(JSON.stringify(medicalContext.patient.antecedents))}
- Allergies : ${escapeJsonString(JSON.stringify(medicalContext.patient.allergies))}

DONN√âES DE LA CONSULTATION :
- Motif : ${escapeJsonString(motifConsultation)}
- Sympt√¥mes : ${escapeJsonString(JSON.stringify(symptomes))}
- Signes vitaux : ${escapeJsonString(JSON.stringify(vitalSigns))}
- Examen physique : ${escapeJsonString(JSON.stringify(examenPhysique))}

DONN√âES DU DIAGNOSTIC :
- Diagnostic principal : ${escapeJsonString(diagnosticPrincipal)}
- Diagnostics secondaires : ${escapeJsonString(JSON.stringify(diagnosticsSecondaires))}
- Examens r√©alis√©s : ${escapeJsonString(JSON.stringify(examensRealises))}
- Analyse : ${escapeJsonString(analyseDiagnostique)}

QUESTIONS/R√âPONSES DE L'IA :
${escapeJsonString(JSON.stringify(medicalContext.aiQuestions))}

DOCUMENTS √âDIT√âS :
${escapeJsonString(JSON.stringify(medicalContext.editedDocuments))}

INSTRUCTIONS IMPORTANTES :
1. R√©dige un compte rendu COMPLET en prose narrative fluide et naturelle
2. Int√®gre TOUTES les donn√©es fournies de mani√®re coh√©rente
3. Utilise un style m√©dical professionnel mais clair
4. Pour chaque section du rapport, √©cris des paragraphes d√©taill√©s et complets
5. Remplis TOUTES les prescriptions avec les donn√©es r√©elles fournies
6. NE LAISSE AUCUN PLACEHOLDER - g√©n√®re du contenu m√©dical r√©aliste et pertinent

G√©n√®re le rapport au format JSON suivant, en t'assurant que CHAQUE section contient du texte narratif complet :

{
    const jsonTemplate = {
      header: {
        title: "COMPTE-RENDU DE CONSULTATION M√âDICALE",
        subtitle: "Document m√©dical confidentiel",
        reference: `CR-${patientId}`
      },
      
      identification: {
        patient: formatPatientName(medicalContext.patient),
        age: `${medicalContext.patient.age} ans`,
        sexe: medicalContext.patient.sexe,
        dateNaissance: formatDate(medicalContext.patient.dateNaissance),
        adresse: medicalContext.patient.adresse || 'Non renseign√©e',
        telephone: medicalContext.patient.telephone || 'Non renseign√©',
        email: medicalContext.patient.email || 'Non renseign√©'
      },
      
      rapport: {
        motifConsultation: `R√©dige ici un paragraphe complet d√©crivant le motif principal de consultation bas√© sur : ${motifConsultation}`,
        anamnese: `R√©dige ici l'histoire d√©taill√©e de la maladie actuelle en int√©grant les sympt√¥mes (${JSON.stringify(symptomes)}), leur √©volution, leur impact sur la vie quotidienne du patient`,
        antecedents: `D√©cris ici les ant√©c√©dents m√©dicaux pertinents du patient : ${JSON.stringify(medicalContext.patient.antecedents)}, ses allergies : ${JSON.stringify(medicalContext.patient.allergies)}, et tout autre √©l√©ment du contexte m√©dical`,
        examenClinique: `D√©cris ici l'examen clinique complet incluant l'√©tat g√©n√©ral, les signes vitaux (${JSON.stringify(vitalSigns)}), et l'examen physique syst√©matique (${JSON.stringify(examenPhysique)})`,
        syntheseDiagnostique: `R√©dige ici l'analyse diagnostique compl√®te bas√©e sur : ${analyseDiagnostique}, en expliquant le raisonnement m√©dical et les hypoth√®ses envisag√©es`,
        conclusionDiagnostique: `√ânonce clairement le diagnostic principal retenu : ${diagnosticPrincipal}${diagnosticsSecondaires.length > 0 ? ' et les diagnostics secondaires : ' + JSON.stringify(diagnosticsSecondaires) : ''}`,
        priseEnCharge: "D√©taille ici la strat√©gie th√©rapeutique compl√®te incluant les m√©dicaments prescrits, les examens demand√©s, et les mesures non m√©dicamenteuses recommand√©es",
        surveillance: "D√©cris le plan de suivi, les signes √† surveiller, les consignes donn√©es au patient, et les modalit√©s de r√©√©valuation",
        conclusion: "R√©dige une synth√®se finale r√©sumant les points cl√©s de la consultation et les prochaines √©tapes"
      },
      
      prescriptions: {
        medicaments: {
          items: medicaments.map((med: Medication) => ({
            nom: med.medication || med.name || '',
            dci: extractDCI(med.medication || med.name || ''),
            dosage: med.dosage || '',
            forme: detectMedicationForm(med.medication || med.name || ''),
            posologie: med.frequency || med.posology || '',
            duree: med.duration || '',
            quantite: calculateQuantity(med),
            remarques: med.instructions || '',
            nonSubstituable: false
          })),
          renouvellement: shouldAllowRenewal(medicalContext.diagnosis),
          dateValidite: getValidityDate()
        },
        biologie: {
          examens: examsBio.map((exam: Examination) => ({
            type: exam.name || exam.type || '',
            code: getBiologyCode(exam.name || exam.type || ''),
            urgence: exam.urgency === 'Urgent',
            jeun: requiresFasting(exam.name || exam.type || ''),
            remarques: exam.justification || ''
          })),
          laboratoireRecommande: "Laboratoire d'analyses m√©dicales agr√©√©"
        },
        imagerie: {
          examens: examsImaging.map((exam: Examination) => ({
            type: exam.type || '',
            region: exam.region || detectAnatomicalRegion(exam.type || ''),
            indication: exam.indication || exam.justification || '',
            urgence: exam.urgency === 'Urgent',
            contraste: requiresContrast(exam.type || ''),
            remarques: exam.details || ''
          })),
          centreRecommande: "Centre d'imagerie m√©dicale"
        }
      },
      
      signature: {
        medecin: "Dr. [NOM DU M√âDECIN]",
        qualification: "M√©decin G√©n√©raliste",
        rpps: "[NUM√âRO RPPS]",
        etablissement: "Cabinet M√©dical"
      },
      
      metadata: {
        dateGeneration: new Date().toISOString(),
        wordCount: 0
      }
    }
    
    // Stringifier le template avec une indentation pour la lisibilit√©
    const jsonTemplateString = JSON.stringify(jsonTemplate, null, 2)
    
    // Construire le prompt final
    const prompt = promptPrefix + jsonTemplateString + `

RAPPEL CRITIQUE : 
- Ne retourne QU'UN SEUL objet JSON valide
- Remplis TOUTES les sections avec du texte m√©dical complet et naturel
- N'utilise AUCUN placeholder comme [PROSE] ou [√Ä COMPL√âTER]
- Int√®gre TOUTES les donn√©es fournies dans le contexte
- NE PAS UTILISER DE FORMATAGE MARKDOWN (pas de \`\`\`json)
- Utilise des espaces au lieu de retours √† la ligne dans les textes
- Assure-toi que le JSON est valide et peut √™tre pars√© directement`

  return prompt
  } catch (error) {
    console.error("‚ùå Erreur dans generateProfessionalReportPrompt:", error)
    console.error("Stack trace:", error instanceof Error ? error.stack : 'No stack trace')
    throw error
  }
}

// Fonction utilitaire pour √©chapper les caract√®res sp√©ciaux dans les cha√Ænes JSON
function escapeJsonString(value: any): string {
  try {
    // Convertir en string si ce n'est pas d√©j√† le cas
    if (value === null || value === undefined) return ''
    
    let strValue: string
    
    // Si c'est un objet ou un tableau, le stringifier d'abord
    if (typeof value === 'object') {
      strValue = JSON.stringify(value)
    } else if (typeof value === 'string') {
      strValue = value
    } else {
      strValue = String(value)
    }
    
    // Maintenant on peut appliquer les remplacements
    return strValue
      .replace(/\\/g, '\\\\')
      .replace(/"/g, '\\"')
      .replace(/\n/g, ' ')
      .replace(/\r/g, '')
      .replace(/\t/g, ' ')
  } catch (error) {
    console.error('Erreur dans escapeJsonString:', error, 'Valeur:', value)
    return ''
  }
}

// Fonctions utilitaires
function formatPatientName(patient: any): string {
  const nom = (patient.nom || patient.lastName || '').toUpperCase()
  const prenom = (patient.prenom || patient.firstName || '')
  const fullName = `${nom} ${prenom}`.trim()
  return fullName || 'PATIENT'
}

function formatDate(dateValue: any): string {
  if (!dateValue) return 'Non renseign√©e'
  
  try {
    // Si c'est d√©j√† une cha√Æne format√©e fran√ßaise, la retourner
    const dateString = String(dateValue)
    if (dateString.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
      return dateString
    }
    
    // Sinon, essayer de parser et formater
    const date = new Date(dateValue)
    if (isNaN(date.getTime())) {
      return dateString // Retourner la valeur originale si non parsable
    }
    
    return date.toLocaleDateString('fr-FR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    })
  } catch {
    return String(dateValue)
  }
}

function extractDCI(medicationName: any): string {
  // S'assurer qu'on a une cha√Æne
  const name = String(medicationName || '')
  if (!name) return '√Ä pr√©ciser'
  
  // Logique simplifi√©e - en production, utiliser une base de donn√©es
  const commonDCIs: Record<string, string> = {
    'doliprane': 'Parac√©tamol',
    'efferalgan': 'Parac√©tamol',
    'advil': 'Ibuprof√®ne',
    'augmentin': 'Amoxicilline + Acide clavulanique',
    'ventoline': 'Salbutamol',
    'spasfon': 'Phloroglucinol',
    'levothyrox': 'L√©vothyroxine',
    'kardegic': 'Acide ac√©tylsalicylique',
    'xarelto': 'Rivaroxaban',
    'metformine': 'Metformine'
  }
  
  const lowerName = name.toLowerCase()
  for (const [brand, dci] of Object.entries(commonDCIs)) {
    if (lowerName.includes(brand)) return dci
  }
  
  // Si pas trouv√©, essayer d'extraire le nom g√©n√©rique
  if (lowerName.includes('parac√©tamol')) return 'Parac√©tamol'
  if (lowerName.includes('ibuprof√®ne')) return 'Ibuprof√®ne'
  if (lowerName.includes('amoxicilline')) return 'Amoxicilline'
  
  return name // Retourner le nom original si pas de DCI trouv√©e
}

function detectMedicationForm(name: any): string {
  const lowerName = String(name || '').toLowerCase()
  if (!lowerName) return 'comprim√©'
  
  if (lowerName.includes('sirop')) return 'sirop'
  if (lowerName.includes('gel') || lowerName.includes('g√©lule')) return 'g√©lule'
  if (lowerName.includes('injectable')) return 'solution injectable'
  if (lowerName.includes('cr√®me')) return 'cr√®me'
  if (lowerName.includes('pommade')) return 'pommade'
  if (lowerName.includes('collyre')) return 'collyre'
  if (lowerName.includes('spray')) return 'spray'
  if (lowerName.includes('sachet')) return 'sachet'
  if (lowerName.includes('suppositoire')) return 'suppositoire'
  if (lowerName.includes('patch')) return 'patch'
  if (lowerName.includes('gouttes')) return 'gouttes'
  return 'comprim√©'
}

function calculateQuantity(med: Medication): string {
  // Calcul basique de la quantit√© n√©cessaire
  const duration = String(med.duration || '')
  const frequency = String(med.frequency || med.posology || '')
  
  // Extraire le nombre de jours
  const daysMatch = duration.match(/(\d+)\s*(jours?|days?|semaines?|weeks?|mois|months?)/i)
  let days = 0
  
  if (daysMatch) {
    days = parseInt(daysMatch[1])
    if (duration.includes('semaine') || duration.includes('week')) {
      days *= 7
    } else if (duration.includes('mois') || duration.includes('month')) {
      days *= 30
    }
  }
  
  // Extraire la fr√©quence quotidienne
  let dailyDoses = 1
  if (frequency.includes('2 fois') || frequency.includes('twice') || frequency.includes('matin et soir')) {
    dailyDoses = 2
  } else if (frequency.includes('3 fois') || frequency.includes('three times')) {
    dailyDoses = 3
  } else if (frequency.includes('4 fois') || frequency.includes('four times')) {
    dailyDoses = 4
  }
  
  const totalDoses = days * dailyDoses
  
  if (totalDoses > 0) {
    // Adapter selon les conditionnements standards
    if (totalDoses <= 20) return '1 bo√Æte'
    if (totalDoses <= 30) return '1 bo√Æte de 30'
    if (totalDoses <= 60) return '2 bo√Ætes de 30'
    if (totalDoses <= 90) return '3 bo√Ætes de 30'
    return `${Math.ceil(totalDoses / 30)} bo√Ætes`
  }
  
  return '1 bo√Æte'
}

function getBiologyCode(examName: any): string {
  const name = String(examName || '').toLowerCase()
  if (!name) return ''
  
  // Codes NABM simplifi√©s
  const codes: Record<string, string> = {
    'nfs': '1104',
    'num√©ration formule sanguine': '1104',
    'glyc√©mie': '1106',
    'glucose': '1106',
    'crp': '1803',
    'prot√©ine c r√©active': '1803',
    'tsh': '7217',
    'thyr√©ostimuline': '7217',
    'cr√©atinine': '1109',
    'ur√©e': '1112',
    'transaminases': '0574',
    'asat': '0574',
    'alat': '0575',
    'cholest√©rol': '0996',
    'triglyc√©rides': '1665',
    'ferritine': '0888',
    'vitamine d': '1810',
    'hba1c': '0997',
    'inr': '1605',
    'bilan h√©patique': '0574-0575',
    'ionogramme': '1110-1111'
  }
  
  for (const [exam, code] of Object.entries(codes)) {
    if (name.includes(exam)) return code
  }
  
  return ''
}

function requiresFasting(examName: any): boolean {
  const name = String(examName || '').toLowerCase()
  if (!name) return false
  
  const fastingExams = [
    'glyc√©mie', 'glucose', 'bilan lipidique', 'cholest√©rol', 
    'triglyc√©rides', 'hdl', 'ldl', 'glyc√©mie √† jeun',
    'insuline', 'peptide c', 'homa', 'bilan glucidique'
  ]
  return fastingExams.some(exam => name.includes(exam))
}

function requiresContrast(examType: any): boolean {
  const type = String(examType || '').toLowerCase()
  if (!type) return false
  
  const contrastExams = [
    'scanner', 'tdm', 'tomodensitom√©trie', 'angioscanner', 
    'irm avec injection', 'arthroscanner', 'uroscanner',
    'coroscanner', 'angio-irm', 'bili-irm'
  ]
  return contrastExams.some(exam => type.includes(exam))
}

function detectAnatomicalRegion(examType: any): string {
  const type = String(examType || '').toLowerCase()
  if (!type) return 'Corps entier'
  
  const regions: Record<string, string> = {
    'thorax': 'Thorax',
    'thoracique': 'Thorax',
    'poumon': 'Thorax',
    'pulmonaire': 'Thorax',
    'cardiaque': 'Thorax',
    'coeur': 'Thorax',
    'm√©diastin': 'Thorax',
    'abdom': 'Abdomen',
    'ventre': 'Abdomen',
    'foie': 'Abdomen',
    'v√©sicule': 'Abdomen',
    'pancr√©as': 'Abdomen',
    'rate': 'Abdomen',
    'rein': 'Abdomen',
    'r√©nal': 'Abdomen',
    'cr√¢n': 'Cr√¢ne',
    'c√©r√©br': 'Cr√¢ne',
    't√™te': 'Cr√¢ne',
    'enc√©phal': 'Cr√¢ne',
    'rachis': 'Rachis',
    'colonne': 'Rachis',
    'vert√©br': 'Rachis',
    'lombaire': 'Rachis lombaire',
    'cervical': 'Rachis cervical',
    'dorsal': 'Rachis dorsal',
    'genou': 'Genou',
    '√©paule': '√âpaule',
    'hanche': 'Hanche',
    'cheville': 'Cheville',
    'poignet': 'Poignet',
    'coude': 'Coude',
    'bassin': 'Bassin',
    'pelvis': 'Bassin',
    'membre sup√©rieur': 'Membre sup√©rieur',
    'membre inf√©rieur': 'Membre inf√©rieur',
    'main': 'Main',
    'pied': 'Pied'
  }
  
  for (const [key, value] of Object.entries(regions)) {
    if (type.includes(key)) return value
  }
  
  return 'Corps entier'
}

function shouldAllowRenewal(diagnosisData: any): boolean {
  const chronicConditions = [
    'hypertension', 'diab√®te', 'asthme', 'bpco', 'insuffisance cardiaque',
    '√©pilepsie', 'parkinson', 'alzheimer', 'polyarthrite', 'thyro√Øde',
    'd√©pression', 'anxi√©t√©', 'bipolaire', 'schizophr√©nie', 'cholest√©rol',
    'migraine', 'fibromyalgie', 'scl√©rose', 'arthrose', 'ost√©oporose'
  ]
  
  // Recherche du diagnostic dans diff√©rentes propri√©t√©s possibles
  const possibleDiagnosisFields = [
    diagnosisData?.diagnosis,
    diagnosisData?.primaryDiagnosis,
    diagnosisData?.finalDiagnosis,
    diagnosisData?.diagnosticHypothesis,
    diagnosisData?.mainDiagnosis,
    diagnosisData?.treatment?.chronicCondition
  ]
  
  // Convertir en string et v√©rifier
  const diagnosisText = possibleDiagnosisFields
    .filter(field => field != null)
    .map(field => String(field).toLowerCase())
    .join(' ')
  
  return chronicConditions.some(condition => diagnosisText.includes(condition))
}

function getValidityDate(): string {
  const date = new Date()
  date.setMonth(date.getMonth() + 3) // 3 mois de validit√© standard
  return date.toLocaleDateString('fr-FR', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  })
}

function parseAndValidateReport(responseText: string): any {
  try {
    // Nettoyer la r√©ponse de tout formatage markdown
    let cleanedResponse = responseText.trim()
    
    // Supprimer les backticks du d√©but et de la fin
    cleanedResponse = cleanedResponse.replace(/^```(?:json)?\s*/i, '')
    cleanedResponse = cleanedResponse.replace(/\s*```$/i, '')
    
    // M√©thode plus robuste pour corriger le JSON avec retours √† la ligne
    // On va parser ligne par ligne et reconstruire le JSON proprement
    const lines = cleanedResponse.split('\n')
    let inString = false
    let escapeNext = false
    let result = ''
    let currentQuoteChar = ''
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]
      
      for (let j = 0; j < line.length; j++) {
        const char = line[j]
        const prevChar = j > 0 ? line[j - 1] : ''
        
        if (escapeNext) {
          result += char
          escapeNext = false
          continue
        }
        
        if (char === '\\') {
          escapeNext = true
          result += char
          continue
        }
        
        if ((char === '"' || char === "'") && !inString) {
          inString = true
          currentQuoteChar = char
          result += char
        } else if (char === currentQuoteChar && inString && prevChar !== '\\') {
          inString = false
          currentQuoteChar = ''
          result += char
        } else {
          result += char
        }
      }
      
      // Si on est dans une cha√Æne, ajouter un espace au lieu d'un retour √† la ligne
      if (inString && i < lines.length - 1) {
        result += ' '
      } else if (!inString && i < lines.length - 1) {
        result += '\n'
      }
    }
    
    // Tenter de parser le JSON nettoy√©
    let parsed
    try {
      parsed = JSON.parse(result)
    } catch (firstError) {
      // Si √ßa √©choue encore, essayer une approche plus agressive
      console.warn('Premier parsing √©chou√©, tentative de correction suppl√©mentaire')
      
      // M√©thode alternative : utiliser une regex plus robuste pour nettoyer le JSON
      let correctedJson = result
      
      // Supprimer les commentaires JavaScript
      correctedJson = correctedJson.replace(/\/\*[\s\S]*?\*\/|\/\/.*/g, '')
      
      // Corriger les virgules en trop
      correctedJson = correctedJson.replace(/,(\s*[}\]])/g, '$1')
      
      // Remplacer tous les retours √† la ligne non √©chapp√©s dans les valeurs
      correctedJson = correctedJson.replace(
        /"([^"\\]*(\\.[^"\\]*)*)"/g,
        (match, content) => {
          // Remplacer les retours √† la ligne non √©chapp√©s par des espaces
          const cleaned = content
            .replace(/\n/g, ' ')
            .replace(/\r/g, '')
            .replace(/\t/g, ' ')
            .replace(/\s+/g, ' ') // Normaliser les espaces multiples
          return `"${cleaned}"`
        }
      )
      
      // Tenter de parser √† nouveau
      try {
        parsed = JSON.parse(correctedJson)
      } catch (secondError) {
        // En dernier recours, essayer d'extraire le JSON avec une regex
        console.error('Deuxi√®me parsing √©chou√©, tentative d\'extraction forc√©e')
        const jsonMatch = responseText.match(/\{[\s\S]*\}/)
        if (jsonMatch) {
          const extractedJson = jsonMatch[0]
          // Appliquer les m√™mes corrections
          const finalJson = extractedJson.replace(
            /"([^"\\]*(\\.[^"\\]*)*)"/g,
            (match, content) => {
              const cleaned = content
                .replace(/\n/g, ' ')
                .replace(/\r/g, '')
                .replace(/\t/g, ' ')
                .replace(/\s+/g, ' ')
              return `"${cleaned}"`
            }
          )
          parsed = JSON.parse(finalJson)
        } else {
          throw new Error('Impossible d\'extraire un objet JSON valide de la r√©ponse')
        }
      }
    }
    
    // Validation de la structure minimale
    if (!parsed.header || !parsed.identification || !parsed.rapport) {
      throw new Error('Structure du rapport invalide')
    }
    
    return parsed
  } catch (error) {
    console.error('Erreur de parsing:', error)
    console.error('R√©ponse brute (d√©but):', responseText.substring(0, 1000))
    throw new Error('Impossible de parser le rapport g√©n√©r√©. Le format JSON est invalide.')
  }
}

function calculateWordCount(rapport: any): number {
  const allText = Object.values(rapport)
    .filter(value => typeof value === 'string')
    .join(' ')
  
  return allText.split(/\s+/).filter(word => word.length > 0).length
}

function formatSimplifiedExamsPrescription(reportData: any): string {
  const lines: string[] = ["ORDONNANCE - EXAMENS COMPL√âMENTAIRES\n"]
  
  // Examens biologiques
  if (reportData.prescriptions?.biologie?.examens?.length > 0) {
    lines.push("EXAMENS BIOLOGIQUES :")
    reportData.prescriptions.biologie.examens.forEach((exam: any, idx: number) => {
      lines.push(`${idx + 1}. ${exam.type}`)
      if (exam.urgence) lines.push("   ‚Üí URGENT")
      if (exam.jeun) lines.push("   ‚Üí √Ä JEUN")
      if (exam.remarques) lines.push(`   ‚Üí ${exam.remarques}`)
    })
    lines.push("")
  }
  
  // Examens d'imagerie
  if (reportData.prescriptions?.imagerie?.examens?.length > 0) {
    lines.push("EXAMENS D'IMAGERIE :")
    reportData.prescriptions.imagerie.examens.forEach((exam: any, idx: number) => {
      lines.push(`${idx + 1}. ${exam.type} - ${exam.region}`)
      if (exam.urgence) lines.push("   ‚Üí URGENT")
      if (exam.contraste) lines.push("   ‚Üí AVEC INJECTION DE PRODUIT DE CONTRASTE")
      if (exam.indication) lines.push(`   ‚Üí Indication : ${exam.indication}`)
    })
  }
  
  return lines.join("\n")
}

function formatSimplifiedMedicationsPrescription(reportData: any): string {
  const lines: string[] = ["ORDONNANCE M√âDICAMENTEUSE\n"]
  
  if (reportData.prescriptions?.medicaments?.items?.length > 0) {
    reportData.prescriptions.medicaments.items.forEach((med: any, idx: number) => {
      lines.push(`${idx + 1}. ${med.nom} ${med.dosage}`)
      lines.push(`   ${med.posologie}`)
      lines.push(`   Dur√©e : ${med.duree}`)
      if (med.quantite) lines.push(`   Quantit√© : ${med.quantite}`)
      if (med.remarques) lines.push(`   Remarques : ${med.remarques}`)
      lines.push("")
    })
    
    if (reportData.prescriptions.medicaments.renouvellement) {
      lines.push("Cette ordonnance peut √™tre renouvel√©e")
    }
    
    lines.push(`\nOrdonnance valable jusqu'au : ${reportData.prescriptions.medicaments.dateValidite}`)
  }
  
  return lines.join("\n")
}
