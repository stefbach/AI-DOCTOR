// app/api/generate-consultation-report/route.ts

import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

// Types pour une meilleure structure
interface PatientData {
  nom?: string
  lastName?: string
  prenom?: string
  firstName?: string
  age?: number | string
  sexe?: string
  gender?: string
  dateNaissance?: string
  birthDate?: string
  telephone?: string
  phone?: string
  adresse?: string
  address?: string
  email?: string
  allergies?: string[]
  antecedents?: string[]
  medicalHistory?: string[]
}

interface Medication {
  medication?: string
  name?: string
  medicament?: string
  dosage?: string
  dose?: string
  frequency?: string
  posology?: string
  posologie?: string
  duration?: string
  duree?: string
  instructions?: string
  remarques?: string
  quantity?: string
  quantite?: string
}

interface Examination {
  name?: string
  type?: string
  examen?: string
  urgency?: string
  urgent?: boolean
  justification?: string
  indication?: string
  region?: string
  zone?: string
  details?: string
  remarques?: string
}

interface RequestBody {
  patientData: PatientData
  clinicalData: any
  questionsData?: any
  diagnosisData: any
  editedDocuments?: any
  includeFullPrescriptions?: boolean
}

export async function POST(request: NextRequest) {
  try {
    console.log("üìã G√©n√©ration du compte rendu m√©dical professionnel")
    
    // Parse et validation des donn√©es
    const body: RequestBody = await request.json()
    const { 
      patientData, 
      clinicalData, 
      questionsData, 
      diagnosisData,
      editedDocuments,
      includeFullPrescriptions = false
    } = body

    // Validation des donn√©es requises
    if (!patientData || !clinicalData || !diagnosisData) {
      return NextResponse.json(
        { success: false, error: "Donn√©es incompl√®tes" },
        { status: 400 }
      )
    }

    // Log d√©taill√© pour debug
    console.log("üìä DONN√âES RE√áUES PAR L'API:")
    console.log("- Patient:", JSON.stringify(patientData, null, 2))
    console.log("- Clinical:", JSON.stringify(clinicalData, null, 2))
    console.log("- Diagnosis:", JSON.stringify(diagnosisData, null, 2))
    console.log("- EditedDocuments COMPLET:", JSON.stringify(editedDocuments, null, 2))

    // Pr√©paration du contexte m√©dical unifi√©
    console.log("üîß Pr√©paration du contexte m√©dical...")
    const medicalContext = prepareMedicalContext({
      patientData,
      clinicalData,
      questionsData,
      diagnosisData,
      editedDocuments
    })

    // G√©n√©ration du prompt structur√©
    console.log("‚úçÔ∏è G√©n√©ration du prompt...")
    let prompt: string
    try {
      prompt = generateProfessionalReportPrompt(medicalContext, patientData)
    } catch (promptError) {
      console.error("‚ùå Erreur lors de la g√©n√©ration du prompt:", promptError)
      throw new Error(`Erreur de g√©n√©ration du prompt: ${promptError instanceof Error ? promptError.message : 'Erreur inconnue'}`)
    }

    console.log("ü§ñ G√©n√©ration du rapport avec GPT-4...")
    console.log("üìù Longueur du prompt:", prompt.length, "caract√®res")
    
    const result = await generateText({
      model: openai("gpt-4o"),
      prompt,
      maxTokens: 12000,
      temperature: 0.3,
      systemPrompt: "Tu es un assistant m√©dical expert qui g√©n√®re UNIQUEMENT du JSON valide sans aucun formatage markdown. Ne jamais utiliser de backticks ou de formatage de code. G√©n√®re des textes m√©dicaux d√©taill√©s et complets pour chaque section en respectant les longueurs minimales demand√©es. Remplace compl√®tement les instructions par du contenu m√©dical r√©el."
    })

    console.log("‚úÖ R√©ponse GPT-4 re√ßue, longueur:", result.text.length, "caract√®res")

    // Parse et validation du rapport
    const reportData = parseAndValidateReport(result.text)
    
    // Enrichissement des m√©tadonn√©es
    reportData.metadata.wordCount = calculateWordCount(reportData.rapport)
    
    // Gestion des prescriptions selon le format demand√©
    if (!includeFullPrescriptions) {
      reportData.prescriptionsSimplifiees = {
        examens: formatSimplifiedExamsPrescription(reportData),
        medicaments: formatSimplifiedMedicationsPrescription(reportData)
      }
      delete reportData.prescriptions
    }

    // Log final des prescriptions g√©n√©r√©es
    console.log("‚úÖ PRESCRIPTIONS FINALES G√âN√âR√âES:")
    console.log("- M√©dicaments:", reportData.prescriptions?.medicaments?.items?.length || 0)
    console.log("- Examens bio:", reportData.prescriptions?.biologie?.examens?.length || 0)
    console.log("- Examens imagerie:", reportData.prescriptions?.imagerie?.examens?.length || 0)

    return NextResponse.json({
      success: true,
      report: reportData,
      metadata: {
        type: "professional_narrative",
        includesFullPrescriptions: includeFullPrescriptions,
        generatedAt: new Date().toISOString()
      }
    })

  } catch (error) {
    console.error("‚ùå Erreur lors de la g√©n√©ration du rapport:", error)
    
    const errorMessage = error instanceof Error ? error.message : "Erreur inconnue"
    const statusCode = error instanceof SyntaxError ? 422 : 500
    
    return NextResponse.json(
      { 
        success: false, 
        error: errorMessage,
        details: process.env.NODE_ENV === 'development' ? error : undefined
      },
      { status: statusCode }
    )
  }
}

// Fonction pour rechercher r√©cursivement dans un objet
function findInObject(obj: any, searchKeys: string[], path: string = ''): any[] {
  const results: any[] = []
  
  if (!obj || typeof obj !== 'object') return results
  
  // Si c'est un tableau, le retourner directement
  if (Array.isArray(obj)) {
    console.log(`  ‚úì Tableau trouv√© √† ${path || 'racine'}: ${obj.length} √©l√©ments`)
    return obj
  }
  
  // Parcourir les cl√©s de l'objet
  for (const [key, value] of Object.entries(obj)) {
    const currentPath = path ? `${path}.${key}` : key
    
    // V√©rifier si la cl√© correspond √† l'un des patterns recherch√©s
    if (searchKeys.some(searchKey => key.toLowerCase().includes(searchKey))) {
      if (Array.isArray(value) && value.length > 0) {
        console.log(`  ‚úì Donn√©es trouv√©es √† ${currentPath}: ${value.length} √©l√©ments`)
        results.push(...value)
      } else if (typeof value === 'object' && value !== null) {
        // Explorer r√©cursivement
        const nested = findInObject(value, searchKeys, currentPath)
        if (nested.length > 0) {
          results.push(...nested)
        }
      }
    } else if (typeof value === 'object' && value !== null) {
      // Continuer la recherche r√©cursive m√™me si la cl√© ne correspond pas
      const nested = findInObject(value, searchKeys, currentPath)
      if (nested.length > 0) {
        results.push(...nested)
      }
    }
  }
  
  return results
}

// Fonction pour pr√©parer le contexte m√©dical unifi√©
function prepareMedicalContext(data: {
  patientData: PatientData
  clinicalData: any
  questionsData?: any
  diagnosisData: any
  editedDocuments?: any
}) {
  // Normalisation des donn√©es patient
  const normalizedPatient = {
    nom: data.patientData.nom || data.patientData.lastName || '',
    prenom: data.patientData.prenom || data.patientData.firstName || '',
    age: data.patientData.age || '',
    sexe: data.patientData.sexe || data.patientData.gender || 'Non renseign√©',
    dateNaissance: data.patientData.dateNaissance || data.patientData.birthDate || '',
    telephone: data.patientData.telephone || data.patientData.phone || '',
    adresse: data.patientData.adresse || data.patientData.address || '',
    email: data.patientData.email || '',
    allergies: Array.isArray(data.patientData.allergies) ? data.patientData.allergies :
               Array.isArray(data.patientData.medicalHistory?.allergies) ? data.patientData.medicalHistory.allergies : [],
    antecedents: Array.isArray(data.patientData.antecedents) ? data.patientData.antecedents :
                 Array.isArray(data.patientData.medicalHistory) ? data.patientData.medicalHistory : []
  }

  return {
    patient: normalizedPatient,
    clinical: data.clinicalData,
    aiQuestions: data.questionsData?.responses || [],
    diagnosis: data.diagnosisData,
    editedDocuments: data.editedDocuments || {}
  }
}

// Fonction pour g√©n√©rer le prompt structur√©
function generateProfessionalReportPrompt(medicalContext: any, patientData: PatientData): string {
  try {
    const patientId = `${patientData.nom || patientData.lastName || 'PATIENT'}_${Date.now()}`
    
    // Extraire les informations pertinentes du contexte
    const motifConsultation = medicalContext.clinical?.chiefComplaint || 
                            (Array.isArray(medicalContext.clinical?.symptoms) ? medicalContext.clinical.symptoms.join(', ') : medicalContext.clinical?.symptoms) || 
                            medicalContext.diagnosis?.chiefComplaint ||
                            medicalContext.diagnosis?.reason ||
                            "Consultation m√©dicale"
    
    const symptomes = Array.isArray(medicalContext.clinical?.symptoms) ? medicalContext.clinical.symptoms :
                     Array.isArray(medicalContext.diagnosis?.symptoms) ? medicalContext.diagnosis.symptoms :
                     Array.isArray(medicalContext.clinical?.presentingComplaints) ? medicalContext.clinical.presentingComplaints : []
    
    const vitalSigns = medicalContext.clinical?.vitalSigns || 
                      medicalContext.clinical?.vitals || 
                      medicalContext.diagnosis?.vitalSigns || {}
    
    const examenPhysique = medicalContext.clinical?.physicalExam || 
                          medicalContext.clinical?.examination ||
                          medicalContext.diagnosis?.physicalExamination || 
                          medicalContext.diagnosis?.clinicalExamination || {}
    
    // Donn√©es du diagnostic
    const diagnosticPrincipal = medicalContext.diagnosis?.primaryDiagnosis || 
                               medicalContext.diagnosis?.diagnosis || 
                               medicalContext.diagnosis?.mainDiagnosis ||
                               medicalContext.diagnosis?.principal ||
                               medicalContext.diagnosis?.diagnosticHypothesis?.primary || 
                               medicalContext.diagnosis?.diagnosticHypothesis || 
                               (typeof medicalContext.diagnosis === 'string' ? medicalContext.diagnosis : "") ||
                               ""
    
    const diagnosticsSecondaires = Array.isArray(medicalContext.diagnosis?.secondaryDiagnoses) ? medicalContext.diagnosis.secondaryDiagnoses :
                                   Array.isArray(medicalContext.diagnosis?.diagnosticHypothesis?.secondary) ? medicalContext.diagnosis.diagnosticHypothesis.secondary : []
    
    const examensRealises = Array.isArray(medicalContext.diagnosis?.performedExams) ? medicalContext.diagnosis.performedExams :
                           Array.isArray(medicalContext.diagnosis?.examsPerformed) ? medicalContext.diagnosis.examsPerformed : []
    
    const analyseDiagnostique = medicalContext.diagnosis?.analysis || 
                               medicalContext.diagnosis?.clinicalAnalysis || 
                               medicalContext.diagnosis?.diagnosticAnalysis || ""
    
    // EXTRACTION ROBUSTE DES PRESCRIPTIONS
    console.log("üîç RECHERCHE DES PRESCRIPTIONS...")
    
    // 1. Recherche des m√©dicaments
    console.log("üíä Recherche des m√©dicaments...")
    let medicaments = findInObject(
      { editedDocuments: medicalContext.editedDocuments, diagnosis: medicalContext.diagnosis },
      ['medic', 'prescr', 'treatment', 'traitement', 'drug', 'therap']
    )
    
    // Normaliser les m√©dicaments trouv√©s
    medicaments = medicaments.map((med: any) => ({
      medication: med.medication || med.name || med.medicament || med.nom || '',
      name: med.name || med.medication || med.medicament || med.nom || '',
      dosage: med.dosage || med.dose || med.posologie || '',
      frequency: med.frequency || med.posology || med.posologie || med.frequence || '',
      posology: med.posology || med.frequency || med.posologie || med.frequence || '',
      duration: med.duration || med.duree || '',
      instructions: med.instructions || med.remarques || med.conseil || ''
    })).filter((med: any) => med.medication || med.name)
    
    console.log(`‚úì ${medicaments.length} m√©dicaments trouv√©s`)
    
    // 2. Recherche des examens biologiques
    console.log("üî¨ Recherche des examens biologiques...")
    let examsBio = findInObject(
      { editedDocuments: medicalContext.editedDocuments, diagnosis: medicalContext.diagnosis },
      ['bio', 'lab', 'sang', 'urin', 'analy']
    )
    
    // Normaliser les examens bio
    examsBio = examsBio.map((exam: any) => ({
      name: exam.name || exam.type || exam.examen || exam.test || '',
      type: exam.type || exam.name || exam.examen || exam.test || '',
      urgency: exam.urgency || exam.urgent || 'Normal',
      justification: exam.justification || exam.indication || exam.remarques || ''
    })).filter((exam: any) => exam.name || exam.type)
    
    console.log(`‚úì ${examsBio.length} examens biologiques trouv√©s`)
    
    // 3. Recherche des examens d'imagerie
    console.log("üè• Recherche des examens d'imagerie...")
    let examsImaging = findInObject(
      { editedDocuments: medicalContext.editedDocuments, diagnosis: medicalContext.diagnosis },
      ['imag', 'radio', 'scan', 'irm', 'echo', 'paraclin', 'rx', 'tdm']
    )
    
    // Normaliser les examens imagerie
    examsImaging = examsImaging.map((exam: any) => ({
      type: exam.type || exam.name || exam.examen || exam.modalite || '',
      region: exam.region || exam.zone || exam.localisation || detectAnatomicalRegion(exam.type || exam.name || ''),
      indication: exam.indication || exam.justification || exam.motif || '',
      urgency: exam.urgency || exam.urgent || 'Normal',
      details: exam.details || exam.remarques || exam.precisions || ''
    })).filter((exam: any) => exam.type)
    
    console.log(`‚úì ${examsImaging.length} examens d'imagerie trouv√©s`)
    
    // G√âN√âRATION AUTOMATIQUE SI AUCUNE PRESCRIPTION
    if (medicaments.length === 0 && diagnosticPrincipal) {
      console.log("‚ö†Ô∏è Aucun m√©dicament trouv√©, g√©n√©ration bas√©e sur le diagnostic...")
      medicaments = generateMedicationsFromDiagnosis(diagnosticPrincipal)
    }
    
    if (examsBio.length === 0) {
      console.log("‚ö†Ô∏è Aucun examen biologique trouv√©, g√©n√©ration d'un bilan standard...")
      examsBio = generateStandardBiologyExams(diagnosticPrincipal, medicalContext.patient.age)
    }
    
    if (examsImaging.length === 0 && shouldHaveImaging(diagnosticPrincipal)) {
      console.log("‚ö†Ô∏è Aucun examen d'imagerie trouv√©, g√©n√©ration bas√©e sur le diagnostic...")
      examsImaging = generateImagingFromDiagnosis(diagnosticPrincipal)
    }
    
    // Log final
    console.log("üìä R√âSUM√â DES PRESCRIPTIONS √Ä INCLURE:")
    console.log(`- ${medicaments.length} m√©dicaments`)
    console.log(`- ${examsBio.length} examens biologiques`)
    console.log(`- ${examsImaging.length} examens d'imagerie`)
    
    // Extraire des informations suppl√©mentaires des questions/r√©ponses IA
    let aiInsights = ""
    if (medicalContext.aiQuestions && medicalContext.aiQuestions.length > 0) {
      aiInsights = medicalContext.aiQuestions.map((q: any) => 
        `${q.question || ''}: ${q.answer || q.response || ''}`
      ).join('. ')
    }
    
    // Cr√©er le template JSON
    const jsonTemplate = {
      header: {
        title: "COMPTE-RENDU DE CONSULTATION M√âDICALE",
        subtitle: "Document m√©dical confidentiel",
        reference: `CR-${patientId}`
      },
      
      identification: {
        patient: formatPatientName(medicalContext.patient),
        age: `${medicalContext.patient.age} ans`,
        sexe: medicalContext.patient.sexe,
        dateNaissance: formatDate(medicalContext.patient.dateNaissance),
        adresse: medicalContext.patient.adresse || 'Non renseign√©e',
        telephone: medicalContext.patient.telephone || 'Non renseign√©',
        email: medicalContext.patient.email || 'Non renseign√©'
      },
      
      rapport: {
        motifConsultation: `[REMPLACER PAR UN PARAGRAPHE DE 150-200 MOTS] D√©crire en d√©tail le motif principal de consultation bas√© sur : ${motifConsultation}. Inclure la dur√©e des sympt√¥mes, leur √©volution, les facteurs d√©clenchants et aggravants, l'impact sur les activit√©s quotidiennes, les traitements d√©j√† essay√©s.`,
        anamnese: `[REMPLACER PAR UN PARAGRAPHE DE 300-400 MOTS] D√©tailler l'histoire compl√®te de la maladie actuelle en int√©grant : ${JSON.stringify(symptomes)}. D√©crire la chronologie pr√©cise des sympt√¥mes, leur caract√®re (type de douleur, localisation, irradiation), leur intensit√© (√©chelle de douleur), leur √©volution dans le temps (am√©lioration/aggravation), les facteurs d√©clenchants et soulageants, les traitements d√©j√† essay√©s et leur efficacit√©, l'impact sur le sommeil et l'alimentation. ${aiInsights ? 'Informations compl√©mentaires issues de l\'interrogatoire : ' + aiInsights : ''}`,
        antecedents: `[REMPLACER PAR UN PARAGRAPHE DE 200-250 MOTS] Pr√©senter les ant√©c√©dents m√©dicaux du patient : ${JSON.stringify(medicalContext.patient.antecedents)}, allergies : ${JSON.stringify(medicalContext.patient.allergies)}. Inclure les ant√©c√©dents m√©dicaux personnels (maladies chroniques, hospitalisations, interventions chirurgicales), les ant√©c√©dents familiaux pertinents (maladies h√©r√©ditaires, cancers, maladies cardiovasculaires), les habitudes de vie (tabac, alcool, activit√© physique), les traitements au long cours, les allergies m√©dicamenteuses et alimentaires avec leurs manifestations.`,
        examenClinique: `[REMPLACER PAR UN PARAGRAPHE DE 350-450 MOTS] D√©crire l'examen clinique syst√©matique et complet. √âtat g√©n√©ral (conscient, orient√©, √©tat nutritionnel), constantes vitales : ${JSON.stringify(vitalSigns)}. Examen physique par appareil : ${JSON.stringify(examenPhysique)}. D√©tailler l'inspection (morphologie, coloration cutan√©e, ≈ìd√®mes), la palpation (masses, points douloureux, organom√©galie), la percussion (matit√©, tympanisme) et l'auscultation (bruits cardiaques, murmure v√©siculaire, bruits surajout√©s) pour chaque syst√®me. Inclure l'examen neurologique sommaire si pertinent.`,
        syntheseDiagnostique: `[REMPLACER PAR UN PARAGRAPHE DE 300-400 MOTS] Analyser les donn√©es cliniques : ${analyseDiagnostique}. Discuter le raisonnement diagnostique en corr√©lant les sympt√¥mes avec les signes cliniques, √©voquer les hypoth√®ses diagnostiques principales et secondaires, argumenter les diagnostics diff√©rentiels √©cart√©s et pourquoi (crit√®res cliniques manquants), expliquer la coh√©rence entre l'anamn√®se et l'examen clinique, justifier les examens compl√©mentaires demand√©s pour confirmer ou infirmer les hypoth√®ses.`,
        conclusionDiagnostique: `[REMPLACER PAR UN PARAGRAPHE DE 150-200 MOTS] Diagnostic principal retenu : ${diagnosticPrincipal}. ${diagnosticsSecondaires.length > 0 ? 'Diagnostics secondaires : ' + JSON.stringify(diagnosticsSecondaires) : ''}. Justifier le diagnostic retenu par les √©l√©ments cliniques positifs (sympt√¥mes caract√©ristiques, signes pathognomoniques), les crit√®res diagnostiques remplis, la coh√©rence avec l'√©volution naturelle de la pathologie, et √©ventuellement les r√©sultats des examens compl√©mentaires d√©j√† disponibles.`,
        priseEnCharge: `[REMPLACER PAR UN PARAGRAPHE DE 250-350 MOTS] D√©tailler la strat√©gie th√©rapeutique compl√®te : traitement m√©dicamenteux prescrit (${medicaments.length} m√©dicaments avec leurs objectifs th√©rapeutiques), examens compl√©mentaires demand√©s (${examsBio.length} examens biologiques pour √©valuer quoi, ${examsImaging.length} examens d'imagerie pour explorer quoi), mesures hygi√©no-di√©t√©tiques adapt√©es √† la pathologie (r√©gime, activit√© physique, arr√™t tabac si pertinent), kin√©sith√©rapie ou r√©√©ducation si n√©cessaire, orientation √©ventuelle vers un sp√©cialiste avec le degr√© d'urgence.`,
        surveillance: `[REMPLACER PAR UN PARAGRAPHE DE 200-250 MOTS] Pr√©ciser le plan de suivi d√©taill√© : signes d'alarme √† surveiller (aggravation des sympt√¥mes, apparition de nouveaux signes), consignes pr√©cises donn√©es au patient (quand reconsulter, comment prendre le traitement), modalit√©s de r√©√©valuation (d√©lai de contr√¥le, examens de suivi), crit√®res objectifs de bonne √©volution (diminution de la douleur, normalisation des constantes), conduite √† tenir en cas d'aggravation ou d'effets secondaires, num√©ros d'urgence si n√©cessaire.`,
        conclusion: `[REMPLACER PAR UN PARAGRAPHE DE 150-200 MOTS] Synth√©tiser les points cl√©s de la consultation : diagnostic principal et sa gravit√©, pronostic attendu √† court et moyen terme, points essentiels du traitement et leur importance, prochaines √©tapes du parcours de soins, importance de l'observance th√©rapeutique et du suivi, √©l√©ments de r√©assurance pour le patient, rappel des signes d'alerte principaux.`
      },
      
      prescriptions: {
        medicaments: {
          items: medicaments.map((med: Medication) => ({
            nom: med.medication || med.name || '',
            dci: extractDCI(med.medication || med.name || ''),
            dosage: med.dosage || '',
            forme: detectMedicationForm(med.medication || med.name || ''),
            posologie: med.frequency || med.posology || '',
            duree: med.duration || '',
            quantite: calculateQuantity(med),
            remarques: med.instructions || '',
            nonSubstituable: false
          })),
          renouvellement: shouldAllowRenewal(medicalContext.diagnosis),
          dateValidite: getValidityDate()
        },
        biologie: {
          examens: examsBio.map((exam: Examination) => ({
            type: exam.name || exam.type || '',
            code: getBiologyCode(exam.name || exam.type || ''),
            urgence: exam.urgency === 'Urgent' || exam.urgency === true,
            jeun: requiresFasting(exam.name || exam.type || ''),
            remarques: exam.justification || ''
          })),
          laboratoireRecommande: "Laboratoire d'analyses m√©dicales agr√©√©"
        },
        imagerie: {
          examens: examsImaging.map((exam: Examination) => ({
            type: exam.type || '',
            region: exam.region || detectAnatomicalRegion(exam.type || ''),
            indication: exam.indication || exam.justification || '',
            urgence: exam.urgency === 'Urgent' || exam.urgency === true,
            contraste: requiresContrast(exam.type || ''),
            remarques: exam.details || ''
          })),
          centreRecommande: "Centre d'imagerie m√©dicale"
        }
      },
      
      signature: {
        medecin: "Dr. [NOM DU M√âDECIN]",
        qualification: "M√©decin G√©n√©raliste",
        rpps: "[NUM√âRO RPPS]",
        etablissement: "Cabinet M√©dical"
      },
      
      metadata: {
        dateGeneration: new Date().toISOString(),
        wordCount: 0
      }
    }
    
    // Construire le prompt
    const prompt = `Tu es un m√©decin senior exp√©riment√© r√©digeant un compte rendu de consultation professionnel et d√©taill√©.

DONN√âES DU PATIENT :
- Nom : ${formatPatientName(medicalContext.patient)}
- √Çge : ${medicalContext.patient.age} ans
- Sexe : ${medicalContext.patient.sexe}
- Ant√©c√©dents : ${JSON.stringify(medicalContext.patient.antecedents)}
- Allergies : ${JSON.stringify(medicalContext.patient.allergies)}

DONN√âES DE LA CONSULTATION :
- Motif : ${motifConsultation}
- Sympt√¥mes : ${JSON.stringify(symptomes)}
- Signes vitaux : ${JSON.stringify(vitalSigns)}
- Examen physique : ${JSON.stringify(examenPhysique)}

DONN√âES DU DIAGNOSTIC :
- Diagnostic principal : ${diagnosticPrincipal}
- Diagnostics secondaires : ${JSON.stringify(diagnosticsSecondaires)}
- Examens r√©alis√©s : ${JSON.stringify(examensRealises)}
- Analyse : ${analyseDiagnostique}

INSTRUCTIONS CRITIQUES :
1. G√©n√®re UNIQUEMENT un objet JSON valide, sans aucun formatage markdown
2. Dans la section "rapport", REMPLACE COMPL√àTEMENT chaque instruction [REMPLACER PAR...] par du contenu m√©dical r√©el
3. Chaque section doit respecter la longueur minimale indiqu√©e
4. CONSERVE EXACTEMENT les donn√©es de prescriptions fournies sans les modifier
5. N'utilise AUCUN placeholder ou instruction dans le r√©sultat final

G√©n√®re le rapport au format JSON suivant :

${JSON.stringify(jsonTemplate, null, 2)}

RAPPEL : Remplace TOUTES les instructions par du contenu m√©dical pertinent et d√©taill√©.`

    return prompt
  } catch (error) {
    console.error("‚ùå Erreur dans generateProfessionalReportPrompt:", error)
    throw error
  }
}

// Fonctions de g√©n√©ration automatique de prescriptions
function generateMedicationsFromDiagnosis(diagnosis: any): Medication[] {
  // Convertir le diagnostic en string s'il s'agit d'un objet
  let diagText = ''
  
  if (typeof diagnosis === 'string') {
    diagText = diagnosis
  } else if (diagnosis && typeof diagnosis === 'object') {
    diagText = [
      diagnosis.condition,
      diagnosis.primary?.condition,
      diagnosis.diagnosis,
      diagnosis.detailedAnalysis
    ].filter(Boolean).join(' ')
  }
  
  const diag = diagText.toLowerCase()
  const medications: Medication[] = []
  
  // Infections
  if (diag.includes('infection') || diag.includes('angine') || diag.includes('otite') || 
      diag.includes('sinusite') || diag.includes('bronchite')) {
    medications.push({
      medication: "Amoxicilline",
      dosage: "1g",
      frequency: "2 fois par jour",
      duration: "7 jours",
      instructions: "√Ä prendre au milieu du repas"
    })
  }
  
  // Douleur/Fi√®vre
  if (diag.includes('douleur') || diag.includes('fi√®vre') || diag.includes('c√©phal√©e') || 
      diag.includes('migraine')) {
    medications.push({
      medication: "Parac√©tamol",
      dosage: "1g",
      frequency: "3 fois par jour si douleur",
      duration: "5 jours",
      instructions: "Maximum 3g par jour. Espacer de 6 heures minimum"
    })
  }
  
  // Inflammation
  if (diag.includes('inflamm') || diag.includes('arthrite') || diag.includes('tendinite')) {
    medications.push({
      medication: "Ibuprof√®ne",
      dosage: "400mg",
      frequency: "3 fois par jour",
      duration: "5 jours",
      instructions: "Pendant les repas. Contre-indiqu√© si ulc√®re"
    })
  }
  
  // Hypertension
  if (diag.includes('hypertension') || diag.includes('hta')) {
    medications.push({
      medication: "Ramipril",
      dosage: "5mg",
      frequency: "1 comprim√© le matin",
      duration: "3 mois",
      instructions: "Surveillance tension et fonction r√©nale"
    })
  }
  
  // Diab√®te
  if (diag.includes('diab√®te') || diag.includes('diabete')) {
    medications.push({
      medication: "Metformine",
      dosage: "500mg",
      frequency: "2 fois par jour",
      duration: "3 mois",
      instructions: "Pendant ou apr√®s les repas"
    })
  }
  
  // Si aucun m√©dicament sp√©cifique, ajouter un antalgique de base
  if (medications.length === 0) {
    medications.push({
      medication: "Parac√©tamol",
      dosage: "500mg",
      frequency: "Si besoin, jusqu'√† 3 fois par jour",
      duration: "Selon besoin",
      instructions: "Maximum 3g par jour"
    })
  }
  
  return medications
}

function generateStandardBiologyExams(diagnosis: any, age: any): Examination[] {
  const exams: Examination[] = [
    {
      name: "NFS (Num√©ration Formule Sanguine)",
      urgency: "Normal",
      justification: "Bilan de base, recherche d'anomalies h√©matologiques"
    }
  ]
  
  // Convertir le diagnostic en string
  let diagText = ''
  if (typeof diagnosis === 'string') {
    diagText = diagnosis
  } else if (diagnosis && typeof diagnosis === 'object') {
    diagText = [
      diagnosis.condition,
      diagnosis.primary?.condition,
      diagnosis.diagnosis
    ].filter(Boolean).join(' ')
  }
  
  const diag = diagText.toLowerCase()
  const patientAge = parseInt(String(age)) || 0
  
  // Marqueurs inflammatoires
  if (diag.includes('inflam') || diag.includes('infection') || diag.includes('fi√®vre')) {
    exams.push({
      name: "CRP (Prot√©ine C-R√©active)",
      urgency: "Normal",
      justification: "Recherche de syndrome inflammatoire"
    })
  }
  
  // Bilan r√©nal/h√©patique si > 50 ans ou certaines pathologies
  if (patientAge > 50 || diag.includes('hypertension') || diag.includes('diab√®te')) {
    exams.push({
      name: "Cr√©atinine avec DFG",
      urgency: "Normal",
      justification: "√âvaluation de la fonction r√©nale"
    })
    exams.push({
      name: "Transaminases (ASAT/ALAT)",
      urgency: "Normal",
      justification: "Bilan h√©patique de base"
    })
  }
  
  // Glyc√©mie
  if (diag.includes('diab√®te') || patientAge > 45) {
    exams.push({
      name: "Glyc√©mie √† jeun",
      urgency: "Normal",
      justification: "D√©pistage ou suivi diab√©tique"
    })
  }
  
  // Bilan lipidique
  if (diag.includes('cardio') || diag.includes('vasculaire') || patientAge > 50) {
    exams.push({
      name: "Bilan lipidique complet",
      urgency: "Normal",
      justification: "√âvaluation du risque cardiovasculaire"
    })
  }
  
  return exams
}

function shouldHaveImaging(diagnosis: any): boolean {
  // Convertir le diagnostic en string s'il s'agit d'un objet
  let diagText = ''
  
  if (typeof diagnosis === 'string') {
    diagText = diagnosis
  } else if (diagnosis && typeof diagnosis === 'object') {
    // Extraire le texte de toutes les propri√©t√©s possibles
    diagText = [
      diagnosis.condition,
      diagnosis.primary?.condition,
      diagnosis.diagnosis,
      diagnosis.detailedAnalysis,
      diagnosis.clinicalRationale
    ].filter(Boolean).join(' ')
  }
  
  const diag = diagText.toLowerCase()
  const imagingKeywords = [
    'thorax', 'poumon', 'pneumonie', 'bronchite', 'toux',
    'abdomen', 'ventre', 'douleur abdominale',
    'trauma', 'fracture', 'entorse',
    'c√©phal√©e', 'migraine', 'vertige',
    'rachis', 'lombalgie', 'dorsalgie'
  ]
  
  return imagingKeywords.some(keyword => diag.includes(keyword))
}

function generateImagingFromDiagnosis(diagnosis: any): Examination[] {
  // Convertir le diagnosis en string
  let diagText = ''
  if (typeof diagnosis === 'string') {
    diagText = diagnosis
  } else if (diagnosis && typeof diagnosis === 'object') {
    diagText = [
      diagnosis.condition,
      diagnosis.primary?.condition,
      diagnosis.diagnosis
    ].filter(Boolean).join(' ')
  }
  
  const diag = diagText.toLowerCase()
  const exams: Examination[] = []
  
  // Pathologies thoraciques
  if (diag.includes('thorax') || diag.includes('poumon') || diag.includes('toux') || 
      diag.includes('dyspn√©e') || diag.includes('pneumonie')) {
    exams.push({
      type: "Radiographie thoracique",
      region: "Thorax",
      indication: "Recherche de pathologie pulmonaire",
      urgency: "Normal"
    })
  }
  
  // Pathologies abdominales
  if (diag.includes('abdom') || diag.includes('ventre')) {
    exams.push({
      type: "√âchographie abdominale",
      region: "Abdomen",
      indication: "Exploration douleur abdominale",
      urgency: "Normal"
    })
  }
  
  // Pathologies ost√©o-articulaires
  if (diag.includes('fracture') || diag.includes('trauma') || diag.includes('entorse')) {
    exams.push({
      type: "Radiographie standard",
      region: "Zone douloureuse",
      indication: "Recherche de l√©sion osseuse",
      urgency: "Normal"
    })
  }
  
  return exams
}

// Fonctions utilitaires (gard√©es de la version originale)
function formatPatientName(patient: any): string {
  const nom = (patient.nom || patient.lastName || '').toUpperCase()
  const prenom = (patient.prenom || patient.firstName || '')
  const fullName = `${nom} ${prenom}`.trim()
  return fullName || 'PATIENT'
}

function formatDate(dateValue: any): string {
  if (!dateValue) return 'Non renseign√©e'
  
  try {
    const dateString = String(dateValue)
    if (dateString.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
      return dateString
    }
    
    const date = new Date(dateValue)
    if (isNaN(date.getTime())) {
      return dateString
    }
    
    return date.toLocaleDateString('fr-FR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    })
  } catch {
    return String(dateValue)
  }
}

function extractDCI(medicationName: any): string {
  const name = String(medicationName || '')
  if (!name) return '√Ä pr√©ciser'
  
  const commonDCIs: Record<string, string> = {
    'doliprane': 'Parac√©tamol',
    'efferalgan': 'Parac√©tamol',
    'dafalgan': 'Parac√©tamol',
    'advil': 'Ibuprof√®ne',
    'nurofen': 'Ibuprof√®ne',
    'augmentin': 'Amoxicilline + Acide clavulanique',
    'clamoxyl': 'Amoxicilline',
    'ventoline': 'Salbutamol',
    'spasfon': 'Phloroglucinol',
    'levothyrox': 'L√©vothyroxine',
    'kardegic': 'Acide ac√©tylsalicylique',
    'xarelto': 'Rivaroxaban',
    'metformine': 'Metformine',
    'ramipril': 'Ramipril',
    'lexomil': 'Bromaz√©pam',
    'xanax': 'Alprazolam',
    'inexium': 'Esom√©prazole',
    'omeprazole': 'Om√©prazole'
  }
  
  const lowerName = name.toLowerCase()
  
  for (const [brand, dci] of Object.entries(commonDCIs)) {
    if (lowerName === brand || lowerName.startsWith(brand + ' ')) return dci
  }
  
  for (const [brand, dci] of Object.entries(commonDCIs)) {
    if (lowerName.includes(brand)) return dci
  }
  
  return name
}

function detectMedicationForm(name: any): string {
  const lowerName = String(name || '').toLowerCase()
  if (!lowerName) return 'comprim√©'
  
  if (lowerName.includes('sirop')) return 'sirop'
  if (lowerName.includes('g√©lule')) return 'g√©lule'
  if (lowerName.includes('comprim√© effervescent')) return 'comprim√© effervescent'
  if (lowerName.includes('comprim√© orodispersible')) return 'comprim√© orodispersible'
  if (lowerName.includes('sachet')) return 'poudre en sachet'
  if (lowerName.includes('injectable')) return 'solution injectable'
  if (lowerName.includes('cr√®me')) return 'cr√®me'
  if (lowerName.includes('pommade')) return 'pommade'
  if (lowerName.includes('gel')) return 'gel'
  if (lowerName.includes('collyre')) return 'collyre'
  if (lowerName.includes('spray')) return 'spray'
  if (lowerName.includes('suppositoire')) return 'suppositoire'
  if (lowerName.includes('patch')) return 'patch transdermique'
  if (lowerName.includes('gouttes')) return 'solution en gouttes'
  
  return 'comprim√©'
}

function calculateQuantity(med: Medication): string {
  const duration = String(med.duration || '')
  const frequency = String(med.frequency || med.posology || '')
  
  const daysMatch = duration.match(/(\d+)\s*(jours?|days?|semaines?|weeks?|mois|months?)/i)
  let days = 0
  
  if (daysMatch) {
    days = parseInt(daysMatch[1])
    if (duration.includes('semaine') || duration.includes('week')) {
      days *= 7
    } else if (duration.includes('mois') || duration.includes('month')) {
      days *= 30
    }
  }
  
  let dailyDoses = 1
  const freqMatch = frequency.match(/(\d+)\s*fois/i)
  if (freqMatch) {
    dailyDoses = parseInt(freqMatch[1])
  } else if (frequency.includes('matin et soir')) {
    dailyDoses = 2
  } else if (frequency.includes('matin, midi et soir')) {
    dailyDoses = 3
  }
  
  const totalDoses = days * dailyDoses
  
  if (totalDoses > 0) {
    if (totalDoses <= 30) return '1 bo√Æte'
    if (totalDoses <= 60) return '2 bo√Ætes'
    if (totalDoses <= 90) return '3 bo√Ætes'
    return `${Math.ceil(totalDoses / 30)} bo√Ætes`
  }
  
  return '1 bo√Æte'
}

function getBiologyCode(examName: any): string {
  const name = String(examName || '').toLowerCase()
  if (!name) return ''
  
  const codes: Record<string, string> = {
    'nfs': '1104',
    'num√©ration formule sanguine': '1104',
    'glyc√©mie': '0552',
    'glucose': '0552',
    'crp': '1803',
    'prot√©ine c r√©active': '1803',
    'tsh': '7217',
    'cr√©atinine': '0592',
    'transaminases': '0522-0523',
    'asat': '0522',
    'alat': '0523',
    'cholest√©rol': '0585',
    'bilan lipidique': '0585-0586-0587-1320',
    'ferritine': '0888',
    'vitamine d': '1810',
    'hba1c': '0997',
    'inr': '1605',
    'ionogramme': '1610-1611'
  }
  
  for (const [exam, code] of Object.entries(codes)) {
    if (name.includes(exam)) return code
  }
  
  return ''
}

function requiresFasting(examName: any): boolean {
  const name = String(examName || '').toLowerCase()
  if (!name) return false
  
  const fastingExams = [
    'glyc√©mie', 'glucose', 'bilan lipidique', 'cholest√©rol', 
    'triglyc√©rides', 'hdl', 'ldl', 'glyc√©mie √† jeun',
    'insuline', 'peptide c', 'homa'
  ]
  
  return fastingExams.some(exam => name.includes(exam))
}

function requiresContrast(examType: any): boolean {
  const type = String(examType || '').toLowerCase()
  if (!type) return false
  
  const contrastExams = [
    'scanner', 'tdm', 'tomodensitom√©trie', 'angioscanner',
    'irm avec injection', 'arthroscanner', 'uroscanner',
    'coroscanner', 'angio-irm', 'bili-irm'
  ]
  
  return contrastExams.some(exam => type.includes(exam))
}

function detectAnatomicalRegion(examType: any): string {
  const type = String(examType || '').toLowerCase()
  if (!type) return 'Corps entier'
  
  const regions: Record<string, string> = {
    'thorax': 'Thorax',
    'thoracique': 'Thorax',
    'poumon': 'Thorax',
    'pulmonaire': 'Thorax',
    'abdom': 'Abdomen',
    'ventre': 'Abdomen',
    'foie': 'Abdomen',
    'cr√¢n': 'Cr√¢ne',
    'c√©r√©br': 'Cr√¢ne',
    'rachis': 'Rachis',
    'lombaire': 'Rachis lombaire',
    'cervical': 'Rachis cervical',
    'genou': 'Genou',
    '√©paule': '√âpaule',
    'hanche': 'Hanche',
    'cheville': 'Cheville',
    'main': 'Main',
    'pied': 'Pied'
  }
  
  for (const [key, value] of Object.entries(regions)) {
    if (type.includes(key)) return value
  }
  
  return '√Ä pr√©ciser'
}

function shouldAllowRenewal(diagnosisData: any): boolean {
  const chronicConditions = [
    'hypertension', 'diab√®te', 'asthme', 'bpco', 'insuffisance cardiaque',
    '√©pilepsie', 'parkinson', 'alzheimer', 'polyarthrite', 'thyro√Øde',
    'd√©pression', 'anxi√©t√©', 'cholest√©rol', 'migraine chronique'
  ]
  
  const diagnosisText = [
    diagnosisData?.diagnosis,
    diagnosisData?.primaryDiagnosis,
    diagnosisData?.mainDiagnosis
  ].filter(Boolean).join(' ').toLowerCase()
  
  return chronicConditions.some(condition => diagnosisText.includes(condition))
}

function getValidityDate(): string {
  const date = new Date()
  date.setMonth(date.getMonth() + 3)
  return date.toLocaleDateString('fr-FR', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  })
}

function parseAndValidateReport(responseText: string): any {
  try {
    let cleanedResponse = responseText.trim()
    
    // Supprimer les backticks
    cleanedResponse = cleanedResponse.replace(/^```(?:json)?\s*/i, '')
    cleanedResponse = cleanedResponse.replace(/\s*```$/i, '')
    
    // Parser avec gestion des retours √† la ligne
    const lines = cleanedResponse.split('\n')
    let inString = false
    let escapeNext = false
    let result = ''
    let currentQuoteChar = ''
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]
      
      for (let j = 0; j < line.length; j++) {
        const char = line[j]
        const prevChar = j > 0 ? line[j - 1] : ''
        
        if (escapeNext) {
          result += char
          escapeNext = false
          continue
        }
        
        if (char === '\\') {
          escapeNext = true
          result += char
          continue
        }
        
        if ((char === '"' || char === "'") && !inString) {
          inString = true
          currentQuoteChar = char
          result += char
        } else if (char === currentQuoteChar && inString && prevChar !== '\\') {
          inString = false
          currentQuoteChar = ''
          result += char
        } else {
          result += char
        }
      }
      
      if (inString && i < lines.length - 1) {
        result += ' '
      } else if (!inString && i < lines.length - 1) {
        result += '\n'
      }
    }
    
    // Parser le JSON
    const parsed = JSON.parse(result)
    
    // Validation minimale
    if (!parsed.header || !parsed.identification || !parsed.rapport) {
      throw new Error('Structure du rapport invalide')
    }
    
    return parsed
  } catch (error) {
    console.error('Erreur de parsing:', error)
    throw new Error('Impossible de parser le rapport g√©n√©r√©')
  }
}

function calculateWordCount(rapport: any): number {
  const allText = Object.values(rapport)
    .filter(value => typeof value === 'string')
    .join(' ')
  
  return allText.split(/\s+/).filter(word => word.length > 0).length
}

function formatSimplifiedExamsPrescription(reportData: any): string {
  const lines: string[] = ["ORDONNANCE - EXAMENS COMPL√âMENTAIRES\n"]
  
  if (reportData.prescriptions?.biologie?.examens?.length > 0) {
    lines.push("EXAMENS BIOLOGIQUES :")
    reportData.prescriptions.biologie.examens.forEach((exam: any, idx: number) => {
      lines.push(`${idx + 1}. ${exam.type}`)
      if (exam.urgence) lines.push("   ‚Üí URGENT")
      if (exam.jeun) lines.push("   ‚Üí √Ä JEUN")
      if (exam.remarques) lines.push(`   ‚Üí ${exam.remarques}`)
    })
    lines.push("")
  }
  
  if (reportData.prescriptions?.imagerie?.examens?.length > 0) {
    lines.push("EXAMENS D'IMAGERIE :")
    reportData.prescriptions.imagerie.examens.forEach((exam: any, idx: number) => {
      lines.push(`${idx + 1}. ${exam.type} - ${exam.region}`)
      if (exam.urgence) lines.push("   ‚Üí URGENT")
      if (exam.contraste) lines.push("   ‚Üí AVEC INJECTION DE PRODUIT DE CONTRASTE")
      if (exam.indication) lines.push(`   ‚Üí Indication : ${exam.indication}`)
    })
  }
  
  return lines.join("\n")
}

function formatSimplifiedMedicationsPrescription(reportData: any): string {
  const lines: string[] = ["ORDONNANCE M√âDICAMENTEUSE\n"]
  
  if (reportData.prescriptions?.medicaments?.items?.length > 0) {
    reportData.prescriptions.medicaments.items.forEach((med: any, idx: number) => {
      lines.push(`${idx + 1}. ${med.nom} ${med.dosage}`)
      lines.push(`   ${med.posologie}`)
      lines.push(`   Dur√©e : ${med.duree}`)
      if (med.quantite) lines.push(`   Quantit√© : ${med.quantite}`)
      if (med.remarques) lines.push(`   Remarques : ${med.remarques}`)
      lines.push("")
    })
    
    if (reportData.prescriptions.medicaments.renouvellement) {
      lines.push("Cette ordonnance peut √™tre renouvel√©e")
    }
    
    lines.push(`\nOrdonnance valable jusqu'au : ${reportData.prescriptions.medicaments.dateValidite}`)
  }
  
  return lines.join("\n")
}
