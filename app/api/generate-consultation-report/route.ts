// app/api/generate-consultation-report/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

// Types pour une meilleure structure
interface MedicalData {
  patientData: any;
  clinicalData: any;
  questionsData: any;
  diagnosisData: any;
  editedDocuments?: any;
  generateAllDocuments?: boolean;
}

interface PatientInfo {
  nom: string
  prenom: string
  dateNaissance: string
  age: number | null
  sexe: string
  profession: string
  telephone: string
  email: string
  adresse: string
  numeroSecuriteSociale: string
  medecinTraitant: string
}

interface ClinicalInfo {
  motifConsultation: string
  symptomes: string
  dureeSymptomes: string
  intensiteDouleur: string
  facteursDeclenchants: string
  facteursAmeliorants: string
  antecedents: {
    medicaux: string
    chirurgicaux: string
    familiaux: string
  }
  allergies: string
  medicamentsActuels: string
  habitudes: {
    tabac: string
    alcool: string
    activitePhysique: string
    alimentation: string
    sommeil: string
  }
  signesVitaux: {
    tension: string
    pouls: string
    temperature: string
    saturation: string
    poids: string
    taille: string
    imc: string
  }
}

interface DiagnosticInfo {
  diagnosticPrincipal: string
  diagnosticsSecondaires: string
  diagnosticsDifferentiels: string
  examensComplementaires: string
  bilanBiologique: string
  imagerie: string
  conduite: string
  surveillance: string
  pronostic: string
  education: string
}

export async function POST(request: NextRequest) {
  console.log('üìã API: G√©n√©ration du dossier m√©dical complet');
  
  try {
    const body: MedicalData = await request.json();
    const { 
      patientData, 
      clinicalData, 
      questionsData, 
      diagnosisData,
      editedDocuments,
      generateAllDocuments 
    } = body;

    if (generateAllDocuments) {
      console.log('ü§ñ Mode g√©n√©ration compl√®te activ√©');
    }

    console.log('üìä Pr√©paration des donn√©es pour g√©n√©ration compl√®te');

    // ==================== FONCTIONS HELPER CRITIQUES ====================
    
    /**
     * S'assure qu'une valeur est un tableau
     */
    const ensureArray = (value: any): any[] => {
      if (Array.isArray(value)) return value;
      if (value === null || value === undefined) return [];
      if (typeof value === 'string') return value.split(',').map(s => s.trim());
      if (typeof value === 'object' && value.value) {
        return ensureArray(value.value);
      }
      return [value];
    };

    /**
     * Joint des valeurs de mani√®re s√ªre
     */
    const safeJoin = (value: any, separator: string = ', '): string => {
      try {
        const arrayValue = ensureArray(value);
        return arrayValue
          .filter(item => item !== null && item !== undefined && item !== '')
          .map(item => String(item).trim())
          .join(separator);
      } catch (error) {
        console.warn('Erreur dans safeJoin:', error);
        return String(value || '');
      }
    };

    /**
     * Extrait une valeur de mani√®re s√ªre depuis un objet potentiellement complexe
     */
    const extractValue = (data: any, path: string, defaultValue: string = ''): string => {
      try {
        const keys = path.split('.');
        let value = data;
        
        for (const key of keys) {
          value = value?.[key];
          if (value === undefined) return defaultValue;
        }
        
        if (Array.isArray(value)) {
          return safeJoin(value);
        }
        
        return String(value || defaultValue);
      } catch (error) {
        return defaultValue;
      }
    };

    // ==================== EXTRACTION DES DONN√âES ====================
    
    const extractPatientData = (): PatientInfo => {
      try {
        const calculateAge = (birthDate: string): number => {
          if (!birthDate) return 0;
          const birth = new Date(birthDate);
          const today = new Date();
          let age = today.getFullYear() - birth.getFullYear();
          const monthDiff = today.getMonth() - birth.getMonth();
          if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
            age--;
          }
          return age;
        };

        return {
          nom: extractValue(patientData, 'nom', 'Non renseign√©'),
          prenom: extractValue(patientData, 'prenom', 'Non renseign√©'),
          dateNaissance: extractValue(patientData, 'dateNaissance', 'Non renseign√©e'),
          age: patientData?.dateNaissance ? calculateAge(patientData.dateNaissance) : null,
          sexe: extractValue(patientData, 'sexe', 'Non renseign√©'),
          profession: extractValue(patientData, 'profession', 'Non renseign√©e'),
          telephone: extractValue(patientData, 'telephone', 'Non renseign√©'),
          email: extractValue(patientData, 'email', 'Non renseign√©'),
          adresse: extractValue(patientData, 'adresse', 'Non renseign√©e'),
          numeroSecuriteSociale: extractValue(patientData, 'numeroSecuriteSociale', ''),
          medecinTraitant: extractValue(patientData, 'medecinTraitant', '')
        };
      } catch (error) {
        console.error('Erreur extraction patient:', error);
        return {
          nom: 'Erreur',
          prenom: 'Erreur',
          dateNaissance: '',
          age: null,
          sexe: '',
          profession: '',
          telephone: '',
          email: '',
          adresse: '',
          numeroSecuriteSociale: '',
          medecinTraitant: ''
        };
      }
    };

    const extractClinicalData = (): ClinicalInfo => {
      try {
        // Traitement sp√©cial pour le motif de consultation
        let motifConsultation = '';
        if (clinicalData?.motifConsultation) {
          const motif = clinicalData.motifConsultation;
          if (typeof motif === 'string') {
            motifConsultation = motif;
          } else if (Array.isArray(motif)) {
            motifConsultation = safeJoin(motif);
          } else if (typeof motif === 'object') {
            if (motif.value) {
              motifConsultation = safeJoin(motif.value);
            } else if (motif.text) {
              motifConsultation = motif.text;
            } else {
              motifConsultation = Object.values(motif).filter(v => v).join(', ');
            }
          }
        }

        // Traitement des sympt√¥mes
        const symptomes = clinicalData?.symptomes ? safeJoin(clinicalData.symptomes) : '';
        
        // Traitement des ant√©c√©dents avec gestion avanc√©e
        const processAntecedents = (data: any) => {
          if (!data) return { medicaux: '', chirurgicaux: '', familiaux: '' };
          
          return {
            medicaux: safeJoin(data.medicaux || data.medical || []),
            chirurgicaux: safeJoin(data.chirurgicaux || data.surgical || []),
            familiaux: safeJoin(data.familiaux || data.family || [])
          };
        };

        // Traitement des allergies
        const allergies = safeJoin(
          clinicalData?.allergies || 
          clinicalData?.antecedents?.allergies || 
          []
        );

        // Traitement des m√©dicaments actuels
        const medicamentsActuels = safeJoin(
          clinicalData?.medicamentsActuels || 
          clinicalData?.traitementActuel || 
          []
        );

        return {
          motifConsultation: motifConsultation || 'Non renseign√©',
          symptomes: symptomes || 'Non renseign√©s',
          dureeSymptomes: extractValue(clinicalData, 'duree', 'Non pr√©cis√©e'),
          intensiteDouleur: extractValue(clinicalData, 'intensiteDouleur', ''),
          facteursDeclenchants: safeJoin(clinicalData?.facteursDeclenchants),
          facteursAmeliorants: safeJoin(clinicalData?.facteursAmeliorants),
          antecedents: processAntecedents(clinicalData?.antecedents),
          allergies: allergies,
          medicamentsActuels: medicamentsActuels,
          habitudes: {
            tabac: extractValue(clinicalData, 'habitudes.tabac', 'Non renseign√©'),
            alcool: extractValue(clinicalData, 'habitudes.alcool', 'Non renseign√©'),
            activitePhysique: extractValue(clinicalData, 'habitudes.activitePhysique', 'Non renseign√©e'),
            alimentation: extractValue(clinicalData, 'habitudes.alimentation', 'Non renseign√©e'),
            sommeil: extractValue(clinicalData, 'habitudes.sommeil', 'Non renseign√©')
          },
          signesVitaux: {
            tension: extractValue(clinicalData, 'signesVitaux.tension', 'Non mesur√©e'),
            pouls: extractValue(clinicalData, 'signesVitaux.pouls', 'Non mesur√©'),
            temperature: extractValue(clinicalData, 'signesVitaux.temperature', 'Non mesur√©e'),
            saturation: extractValue(clinicalData, 'signesVitaux.saturation', 'Non mesur√©e'),
            poids: extractValue(clinicalData, 'signesVitaux.poids', 'Non mesur√©'),
            taille: extractValue(clinicalData, 'signesVitaux.taille', 'Non mesur√©e'),
            imc: extractValue(clinicalData, 'signesVitaux.imc', 'Non calcul√©')
          }
        };
      } catch (error) {
        console.error('Erreur extraction clinique:', error);
        return {
          motifConsultation: 'Erreur de traitement',
          symptomes: '',
          dureeSymptomes: '',
          intensiteDouleur: '',
          facteursDeclenchants: '',
          facteursAmeliorants: '',
          antecedents: { medicaux: '', chirurgicaux: '', familiaux: '' },
          allergies: '',
          medicamentsActuels: '',
          habitudes: {
            tabac: '',
            alcool: '',
            activitePhysique: '',
            alimentation: '',
            sommeil: ''
          },
          signesVitaux: {
            tension: '',
            pouls: '',
            temperature: '',
            saturation: '',
            poids: '',
            taille: '',
            imc: ''
          }
        };
      }
    };

    const extractQuestionsData = () => {
      try {
        if (!questionsData || typeof questionsData !== 'object') {
          return { responses: [], summary: '' };
        }
        
        const responses = Object.entries(questionsData)
          .filter(([key, value]) => value !== null && value !== undefined && value !== '')
          .map(([question, reponse]) => ({
            question: String(question).replace(/_/g, ' '),
            reponse: String(reponse)
          }));
        
        const summary = responses
          .map(r => `${r.question}: ${r.reponse}`)
          .join('. ');
        
        return { responses, summary };
      } catch (error) {
        console.error('Erreur extraction questions:', error);
        return { responses: [], summary: '' };
      }
    };

    const extractDiagnosisData = (): DiagnosticInfo => {
      try {
        // Gestion des diagnostics multiples
        const processDiagnostics = (diag: any): string => {
          if (!diag) return '';
          if (typeof diag === 'string') return diag;
          if (Array.isArray(diag)) return safeJoin(diag);
          if (typeof diag === 'object' && diag.principal) {
            return diag.principal;
          }
          return String(diag);
        };

        return {
          diagnosticPrincipal: processDiagnostics(diagnosisData?.diagnosticPrincipal) || '√Ä pr√©ciser',
          diagnosticsSecondaires: safeJoin(diagnosisData?.diagnosticsSecondaires),
          diagnosticsDifferentiels: safeJoin(diagnosisData?.diagnosticsDifferentiels),
          examensComplementaires: safeJoin(diagnosisData?.examensComplementaires),
          bilanBiologique: safeJoin(diagnosisData?.bilanBiologique),
          imagerie: safeJoin(diagnosisData?.imagerie),
          conduite: extractValue(diagnosisData, 'conduite', '√Ä d√©finir'),
          surveillance: extractValue(diagnosisData, 'surveillance', ''),
          pronostic: extractValue(diagnosisData, 'pronostic', ''),
          education: safeJoin(diagnosisData?.education)
        };
      } catch (error) {
        console.error('Erreur extraction diagnostic:', error);
        return {
          diagnosticPrincipal: 'Erreur de traitement',
          diagnosticsSecondaires: '',
          diagnosticsDifferentiels: '',
          examensComplementaires: '',
          bilanBiologique: '',
          imagerie: '',
          conduite: '',
          surveillance: '',
          pronostic: '',
          education: ''
        };
      }
    };

    // Extraction des donn√©es
    const patient = extractPatientData();
    const clinical = extractClinicalData();
    const questions = extractQuestionsData();
    const diagnosis = extractDiagnosisData();

    // ==================== G√âN√âRATION AI DES CONTENUS ====================
    
    const generateAIContent = async (prompt: string, maxTokens: number = 10000): Promise<string> => {
      try {
        if (!process.env.OPENAI_API_KEY) {
          console.warn('‚ö†Ô∏è Cl√© OpenAI non configur√©e, utilisation du mode fallback');
          return '';
        }

        const systemPrompt = `Vous √™tes un m√©decin g√©n√©raliste senior avec 20 ans d'exp√©rience, sp√©cialis√© dans la r√©daction de comptes rendus m√©dicaux d√©taill√©s et professionnels. 
        
        Vos comptes rendus doivent:
        - √ätre structur√©s de mani√®re claire et professionnelle
        - Utiliser la terminologie m√©dicale appropri√©e
        - Inclure tous les d√©tails pertinents pour la continuit√© des soins
        - Respecter les standards m√©dicaux internationaux
        - √ätre adapt√©s au contexte mauricien (syst√®me de sant√©, m√©dicaments disponibles localement)
        - Maintenir un niveau de d√©tail √©lev√© tout en restant concis
        - Suivre une approche syst√©matique: anamn√®se compl√®te, examen clinique d√©taill√©, raisonnement diagnostique, plan th√©rapeutique clair`;

        const result = await generateText({
          model: openai("gpt-4o"),
          prompt: `${systemPrompt}\n\n${prompt}`,
          maxTokens: maxTokens,
          temperature: 0.3,
        });

        return result.text || '';
      } catch (error) {
        console.error('Erreur g√©n√©ration AI:', error);
        return '';
      }
    };

    // ==================== G√âN√âRATION DU RAPPORT M√âDICAL ====================
    
    const generateMedicalReport = async () => {
      const date = new Date();
      const dateFormatted = date.toLocaleDateString('fr-FR', {
        day: '2-digit',
        month: 'long',
        year: 'numeric'
      });
      const heure = date.toLocaleTimeString('fr-FR', {
        hour: '2-digit',
        minute: '2-digit'
      });

      // Prompt d√©taill√© pour g√©n√©rer un compte rendu m√©dical de haute qualit√©
      const compteRenduPrompt = `
        G√©n√©rez un compte rendu m√©dical COMPLET et PROFESSIONNEL pour cette consultation.
        
        INFORMATIONS PATIENT:
        - Nom/Pr√©nom: ${patient.nom} ${patient.prenom}
        - √Çge: ${patient.age} ans
        - Sexe: ${patient.sexe}
        - Profession: ${patient.profession}
        
        DONN√âES CLINIQUES:
        - Motif de consultation: ${clinical.motifConsultation}
        - Sympt√¥mes principaux: ${clinical.symptomes}
        - Dur√©e des sympt√¥mes: ${clinical.dureeSymptomes}
        - Intensit√© douleur: ${clinical.intensiteDouleur}
        - Facteurs d√©clenchants: ${clinical.facteursDeclenchants}
        - Facteurs am√©liorants: ${clinical.facteursAmeliorants}
        
        ANT√âC√âDENTS:
        - M√©dicaux: ${clinical.antecedents.medicaux}
        - Chirurgicaux: ${clinical.antecedents.chirurgicaux}
        - Familiaux: ${clinical.antecedents.familiaux}
        - Allergies: ${clinical.allergies}
        - M√©dicaments actuels: ${clinical.medicamentsActuels}
        
        HABITUDES DE VIE:
        - Tabac: ${clinical.habitudes.tabac}
        - Alcool: ${clinical.habitudes.alcool}
        - Activit√© physique: ${clinical.habitudes.activitePhysique}
        - Sommeil: ${clinical.habitudes.sommeil}
        
        SIGNES VITAUX:
        - TA: ${clinical.signesVitaux.tension}
        - FC: ${clinical.signesVitaux.pouls}
        - T¬∞: ${clinical.signesVitaux.temperature}
        - SatO2: ${clinical.signesVitaux.saturation}
        - Poids: ${clinical.signesVitaux.poids}, Taille: ${clinical.signesVitaux.taille}, IMC: ${clinical.signesVitaux.imc}
        
        EXAMEN CLINIQUE:
        ${questions.summary}
        
        DIAGNOSTIC:
        - Principal: ${diagnosis.diagnosticPrincipal}
        - Secondaires: ${diagnosis.diagnosticsSecondaires}
        - Diff√©rentiels √©cart√©s: ${diagnosis.diagnosticsDifferentiels}
        
        PLAN DE PRISE EN CHARGE:
        ${diagnosis.conduite}
        
        EXAMENS COMPL√âMENTAIRES:
        - Biologie: ${diagnosis.bilanBiologique}
        - Imagerie: ${diagnosis.imagerie}
        - Autres: ${diagnosis.examensComplementaires}
        
        INSTRUCTIONS:
        R√©digez un compte rendu m√©dical COMPLET incluant:
        
        1. MOTIF DE CONSULTATION (paragraphe d√©taill√©)
        
        2. ANAMN√àSE (tr√®s d√©taill√©e):
        - Histoire de la maladie actuelle (chronologie pr√©cise, √©volution)
        - Sympt√¥mes associ√©s recherch√©s
        - Retentissement fonctionnel
        - Traitements d√©j√† essay√©s et leur efficacit√©
        - Contexte psychosocial si pertinent
        
        3. ANT√âC√âDENTS (complets et structur√©s):
        - M√©dicaux (avec dates si disponibles)
        - Chirurgicaux (avec dates)
        - Gyn√©co-obst√©tricaux si femme
        - Familiaux (avec degr√© de parent√©)
        - Allergies et intol√©rances
        - Vaccinations si pertinent
        
        4. TRAITEMENTS EN COURS (d√©taill√©s):
        - Nom, dosage, posologie, indication
        - Observance
        - Tol√©rance
        
        5. MODE DE VIE:
        - Habitudes d√©taill√©es
        - Facteurs de risque cardiovasculaire
        - Contexte professionnel et social
        
        6. EXAMEN CLINIQUE (syst√©matique et complet):
        - √âtat g√©n√©ral
        - Signes vitaux comment√©s
        - Examen par appareil (cardiovasculaire, respiratoire, abdominal, neurologique, etc.)
        - Examen sp√©cifique selon le motif
        - Signes n√©gatifs pertinents
        
        7. SYNTH√àSE CLINIQUE:
        - R√©sum√© des √©l√©ments cl√©s
        - Hypoth√®ses diagnostiques argument√©es
        
        8. DIAGNOSTIC RETENU:
        - Diagnostic principal avec argumentation
        - Diagnostics secondaires
        - Diagnostics diff√©rentiels √©cart√©s et pourquoi
        
        9. PLAN DE PRISE EN CHARGE (d√©taill√©):
        - Mesures th√©rapeutiques imm√©diates
        - Traitement m√©dicamenteux (avec justification)
        - Mesures non m√©dicamenteuses
        - Examens compl√©mentaires (avec justification de chaque examen)
        - Surveillance propos√©e
        - Crit√®res de r√©√©valuation
        
        10. CONDUITE √Ä TENIR:
        - Pour le patient (conseils, signes d'alerte)
        - Pour le m√©decin traitant
        - Rendez-vous de suivi
        
        11. PRONOSTIC (si pertinent)
        
        Le compte rendu doit √™tre:
        - Professionnel et exhaustif
        - Structur√© avec des sections claires
        - Utilisant la terminologie m√©dicale appropri√©e
        - Adapt√© pour la continuit√© des soins
        - Conforme aux standards m√©dicaux
        - Contextualis√© pour Maurice
      `;

      // G√©n√©ration AI du compte rendu complet
      let compteRenduComplet = '';
      if (process.env.OPENAI_API_KEY) {
        compteRenduComplet = await generateAIContent(compteRenduPrompt, 10000);
      }

      // Si pas d'AI ou √©chec, g√©n√©rer un compte rendu structur√© de base
      if (!compteRenduComplet) {
        compteRenduComplet = `
COMPTE RENDU DE CONSULTATION

Date: ${dateFormatted} √† ${heure}
Patient: ${patient.nom} ${patient.prenom}, ${patient.age} ans, ${patient.sexe}

1. MOTIF DE CONSULTATION
${clinical.motifConsultation}

2. ANAMN√àSE
Histoire de la maladie actuelle:
Le/la patient(e) se pr√©sente pour ${clinical.motifConsultation}.
Symptomatologie: ${clinical.symptomes}
√âvolution: Sympt√¥mes √©voluant depuis ${clinical.dureeSymptomes}.
${clinical.intensiteDouleur ? `Intensit√© de la douleur √©valu√©e √† ${clinical.intensiteDouleur}/10.` : ''}
${clinical.facteursDeclenchants ? `Facteurs d√©clenchants identifi√©s: ${clinical.facteursDeclenchants}.` : ''}
${clinical.facteursAmeliorants ? `Facteurs am√©liorants: ${clinical.facteursAmeliorants}.` : ''}

3. ANT√âC√âDENTS
M√©dicaux: ${clinical.antecedents.medicaux || 'Aucun ant√©c√©dent m√©dical notable'}
Chirurgicaux: ${clinical.antecedents.chirurgicaux || 'Aucun ant√©c√©dent chirurgical'}
Familiaux: ${clinical.antecedents.familiaux || 'Sans particularit√©'}
Allergies: ${clinical.allergies || 'Aucune allergie connue'}

4. TRAITEMENTS EN COURS
${clinical.medicamentsActuels || 'Aucun traitement en cours'}

5. MODE DE VIE
Tabac: ${clinical.habitudes.tabac}
Alcool: ${clinical.habitudes.alcool}
Activit√© physique: ${clinical.habitudes.activitePhysique}
Sommeil: ${clinical.habitudes.sommeil}

6. EXAMEN CLINIQUE
√âtat g√©n√©ral: ${editedDocuments?.etatGeneral || 'Bon √©tat g√©n√©ral'}

Signes vitaux:
- Tension art√©rielle: ${clinical.signesVitaux.tension}
- Fr√©quence cardiaque: ${clinical.signesVitaux.pouls}
- Temp√©rature: ${clinical.signesVitaux.temperature}
- Saturation O2: ${clinical.signesVitaux.saturation}
- Poids: ${clinical.signesVitaux.poids}, Taille: ${clinical.signesVitaux.taille}, IMC: ${clinical.signesVitaux.imc}

Examen physique:
${questions.summary || 'Examen clinique sans particularit√©'}

7. SYNTH√àSE CLINIQUE
${editedDocuments?.syntheseClinique || `Patient pr√©sentant un tableau clinique √©vocateur de ${diagnosis.diagnosticPrincipal}`}

8. DIAGNOSTIC RETENU
Principal: ${diagnosis.diagnosticPrincipal}
${diagnosis.diagnosticsSecondaires ? `Secondaires: ${diagnosis.diagnosticsSecondaires}` : ''}
${diagnosis.diagnosticsDifferentiels ? `Diagnostics diff√©rentiels √©cart√©s: ${diagnosis.diagnosticsDifferentiels}` : ''}

9. PLAN DE PRISE EN CHARGE
${diagnosis.conduite}

Examens compl√©mentaires demand√©s:
${diagnosis.bilanBiologique ? `- Biologie: ${diagnosis.bilanBiologique}` : ''}
${diagnosis.imagerie ? `- Imagerie: ${diagnosis.imagerie}` : ''}
${diagnosis.examensComplementaires ? `- Autres: ${diagnosis.examensComplementaires}` : ''}

10. CONDUITE √Ä TENIR
${diagnosis.surveillance || 'Surveillance clinique selon √©volution'}
${diagnosis.education || '√âducation th√©rapeutique r√©alis√©e'}

11. PRONOSTIC
${diagnosis.pronostic || "Bon pronostic sous r√©serve d'une bonne observance th√©rapeutique"}

Dr. ${editedDocuments?.praticien || '[Nom du praticien]'}
${editedDocuments?.rpps ? `RPPS: ${editedDocuments.rpps}` : ''}
`;
      }

      return {
        metadata: {
          dateGeneration: dateFormatted,
          heureGeneration: heure,
          typeDocument: 'Compte rendu de consultation m√©dicale d√©taill√©',
          version: '3.0',
          praticien: editedDocuments?.praticien || 'Dr. [Nom du praticien]',
          etablissement: editedDocuments?.etablissement || 'Cabinet M√©dical',
          adresseEtablissement: editedDocuments?.adresseEtablissement || '[Adresse]',
          telephoneEtablissement: editedDocuments?.telephoneEtablissement || '[T√©l√©phone]',
          numeroConsultation: `CONS-${date.getFullYear()}${(date.getMonth()+1).toString().padStart(2,'0')}${date.getDate().toString().padStart(2,'0')}-${Date.now().toString().slice(-6)}`,
          dureeConsultation: editedDocuments?.dureeConsultation || '30 minutes'
        },
        patient: {
          ...patient,
          identifiant: `PAT-${patient.nom.substring(0, 3).toUpperCase()}-${Date.now().toString().slice(-6)}`,
          numeroMauritien: editedDocuments?.numeroMauritien || '',
          assurance: editedDocuments?.assurance || ''
        },
        rapport: {
          contenuComplet: compteRenduComplet,
          sections: {
            motifConsultation: clinical.motifConsultation,
            anamnese: compteRenduComplet.match(/ANAMN√àSE[\s\S]*?(?=\d\.|$)/)?.[0] || '',
            antecedents: compteRenduComplet.match(/ANT√âC√âDENTS[\s\S]*?(?=\d\.|$)/)?.[0] || '',
            examenClinique: compteRenduComplet.match(/EXAMEN CLINIQUE[\s\S]*?(?=\d\.|$)/)?.[0] || '',
            diagnostic: diagnosis.diagnosticPrincipal,
            planTherapeutique: diagnosis.conduite,
            examensComplementaires: {
              biologie: diagnosis.bilanBiologique,
              imagerie: diagnosis.imagerie,
              autres: diagnosis.examensComplementaires
            },
            surveillance: diagnosis.surveillance,
            pronostic: diagnosis.pronostic
          }
        },
        validationMedicale: {
          statut: '√Ä valider',
          dateValidation: null,
          validePar: null
        }
      };
    };

    // ==================== G√âN√âRATION DES ORDONNANCES ====================
    
    const generatePrescriptionDocuments = async () => {
      // G√©n√©ration de l'ordonnance de consultation
      const generateConsultationPrescription = async () => {
        // G√©n√©ration AI du certificat m√©dical si n√©cessaire
        let certificatMedical = null;
        let arretTravail = null;
        
        if (process.env.OPENAI_API_KEY && editedDocuments?.needsCertificat) {
          const certificatPrompt = `
            R√©digez un certificat m√©dical professionnel pour:
            Patient: ${patient.nom} ${patient.prenom}, ${patient.age} ans
            Diagnostic: ${diagnosis.diagnosticPrincipal}
            Sympt√¥mes: ${clinical.symptomes}
            
            Le certificat doit √™tre formel, m√©dico-l√©gal et adapt√© au contexte mauricien.
          `;
          
          certificatMedical = await generateAIContent(certificatPrompt, 500);
        }
        
        if (process.env.OPENAI_API_KEY && editedDocuments?.needsArretTravail) {
          const arretPrompt = `
            Proposez une dur√©e d'arr√™t de travail justifi√©e pour:
            Diagnostic: ${diagnosis.diagnosticPrincipal}
            Profession: ${patient.profession}
            Sympt√¥mes: ${clinical.symptomes}
            
            Indiquez la dur√©e en jours et les restrictions √©ventuelles.
          `;
          
          const arretResponse = await generateAIContent(arretPrompt, 200);
          arretTravail = {
            duree: arretResponse.match(/\d+\s*jours?/)?.[0] || '3 jours',
            dateDebut: new Date().toISOString(),
            restrictions: arretResponse
          };
        }

        return {
          type: 'consultation',
          date: new Date().toISOString(),
          metadata: {
            praticien: editedDocuments?.praticien || 'Dr. [Nom]',
            rpps: editedDocuments?.rpps || '[RPPS]',
            adeli: editedDocuments?.adeli || '[ADELI]',
            specialite: editedDocuments?.specialite || 'M√©decine G√©n√©rale',
            etablissement: editedDocuments?.etablissement || 'Cabinet M√©dical',
            adresse: editedDocuments?.adresseEtablissement || '[Adresse]',
            telephone: editedDocuments?.telephoneEtablissement || '[T√©l√©phone]',
            email: editedDocuments?.emailEtablissement || '[Email]',
            conventionnement: editedDocuments?.conventionnement || 'Secteur 1',
            numeroFacture: `FACT-${Date.now().toString().slice(-8)}`
          },
          content: {
            chiefComplaint: clinical.motifConsultation,
            history: `
              ANAMN√àSE D√âTAILL√âE:
              
              Motif principal: ${clinical.motifConsultation}
              
              Histoire de la maladie:
              - D√©but: ${clinical.dureeSymptomes}
              - Sympt√¥mes: ${clinical.symptomes}
              - √âvolution: ${editedDocuments?.evolution || 'Progressive'}
              - Intensit√©: ${clinical.intensiteDouleur ? `${clinical.intensiteDouleur}/10` : 'Non quantifi√©e'}
              - Facteurs d√©clenchants: ${clinical.facteursDeclenchants || 'Aucun identifi√©'}
              - Facteurs am√©liorants: ${clinical.facteursAmeliorants || 'Aucun identifi√©'}
              - Traitements essay√©s: ${editedDocuments?.traitementsEssayes || 'Aucun'}
              
              Retentissement:
              - Sur les activit√©s quotidiennes: ${editedDocuments?.retentissementQuotidien || 'Non √©valu√©'}
              - Sur le sommeil: ${editedDocuments?.retentissementSommeil || 'Non √©valu√©'}
              - Sur le travail: ${editedDocuments?.retentissementTravail || 'Non √©valu√©'}
            `.trim(),
            examination: `
              EXAMEN CLINIQUE COMPLET:
              
              √âtat g√©n√©ral: ${editedDocuments?.etatGeneral || 'Bon √©tat g√©n√©ral, patient conscient et orient√©'}
              
              Constantes vitales:
              - Tension art√©rielle: ${clinical.signesVitaux.tension}
              - Fr√©quence cardiaque: ${clinical.signesVitaux.pouls}
              - Temp√©rature: ${clinical.signesVitaux.temperature}
              - Saturation O2: ${clinical.signesVitaux.saturation}
              - Fr√©quence respiratoire: ${editedDocuments?.frequenceRespiratoire || '16/min'}
              - Poids: ${clinical.signesVitaux.poids}, Taille: ${clinical.signesVitaux.taille}
              - IMC: ${clinical.signesVitaux.imc}
              
              Examen par appareil:
              ${questions.summary || 'Examen syst√©matique sans particularit√©'}
              
              ${editedDocuments?.examenComplementaire || ''}
            `.trim(),
            diagnosis: `
              DIAGNOSTIC ET ANALYSE:
              
              Diagnostic principal retenu:
              ${diagnosis.diagnosticPrincipal}
              
              Argumentation diagnostique:
              ${editedDocuments?.argumentationDiagnostic || "Bas√© sur l'anamn√®se et l'examen clinique"}
              
              ${diagnosis.diagnosticsSecondaires ? `Diagnostics associ√©s:\n${diagnosis.diagnosticsSecondaires}` : ''}
              
              ${diagnosis.diagnosticsDifferentiels ? `Diagnostics diff√©rentiels √©cart√©s:\n${diagnosis.diagnosticsDifferentiels}` : ''}
              
              Niveau de certitude: ${editedDocuments?.niveauCertitude || '√âlev√©'}
            `.trim(),
            plan: `
              PLAN DE PRISE EN CHARGE D√âTAILL√â:
              
              1. TRAITEMENT M√âDICAMENTEUX:
              ${diagnosis.conduite}
              
              2. MESURES NON M√âDICAMENTEUSES:
              ${editedDocuments?.mesuresNonMedicamenteuses || `
              - Repos relatif adapt√©
              - Hydratation ad√©quate
              - Alimentation √©quilibr√©e
              - Activit√© physique selon tol√©rance`}
              
              3. EXAMENS COMPL√âMENTAIRES:
              ${diagnosis.examensComplementaires || "Aucun examen compl√©mentaire n√©cessaire dans l'imm√©diat"}
              
              4. SURVEILLANCE:
              ${diagnosis.surveillance || `
              - √âvolution des sympt√¥mes
              - Tol√©rance au traitement
              - Apparition de signes d'alerte`}
              
              5. √âDUCATION TH√âRAPEUTIQUE:
              ${diagnosis.education || `
              - Explication de la pathologie
              - Importance de l'observance
              - Reconnaissance des signes d'alerte
              - Mesures pr√©ventives`}
              
              6. PR√âVENTION:
              ${editedDocuments?.prevention || 'Conseils de pr√©vention adapt√©s √† la pathologie'}
            `.trim(),
            followUp: `
              SUIVI PROPOS√â:
              
              Prochain rendez-vous: ${editedDocuments?.prochainRdv || "Dans 1 semaine si pas d'am√©lioration"}
              
              Modalit√©s de suivi:
              - ${editedDocuments?.modalitesSuivi || 'Consultation de contr√¥le'}
              - R√©√©valuation clinique
              - Contr√¥le de l'efficacit√© th√©rapeutique
              - Ajustement du traitement si n√©cessaire
              
              Crit√®res de consultation urgente:
              ${editedDocuments?.criteresUrgence || `
              - Aggravation des sympt√¥mes
              - Apparition de nouveaux sympt√¥mes
              - Effets secondaires importants
              - Absence d'am√©lioration sous traitement`}
              
              Coordination des soins:
              - Transmission au m√©decin traitant: ${editedDocuments?.transmissionMT || 'Oui'}
              - Autres sp√©cialistes impliqu√©s: ${editedDocuments?.autresSpecialistes || 'Aucun'}
            `.trim(),
            certificat: certificatMedical,
            arretTravail: arretTravail,
            codesCIM10: editedDocuments?.codesCIM10 || diagnosis.diagnosticPrincipal,
            actesRealises: editedDocuments?.actesRealises || 'Consultation avec examen clinique complet'
          },
          facturation: {
            actesPrincipal: editedDocuments?.actePrincipal || 'CS - Consultation',
            actesComplementaires: editedDocuments?.actesComplementaires || [],
            total: editedDocuments?.montantTotal || 'Selon convention',
            modeReglement: editedDocuments?.modeReglement || '√Ä d√©finir',
            priseEnCharge: editedDocuments?.priseEnCharge || 'S√©curit√© sociale + Mutuelle'
          },
          documentsRemis: {
            compteRendu: true,
            ordonnances: ['M√©dicamenteuse', 'Biologie', 'Imagerie'].filter((_, i) => 
              i === 0 || (i === 1 && diagnosis.bilanBiologique) || (i === 2 && diagnosis.imagerie)
            ),
            certificat: !!certificatMedical,
            arretTravail: !!arretTravail,
            courrier: editedDocuments?.courrierSpecialiste || false
          },
          mentionsLegales: `
            Document m√©dical confidentiel √©tabli le ${new Date().toLocaleDateString('fr-FR')}
            Remis en main propre au patient
            Conservation recommand√©e pour le suivi m√©dical
          `.trim()
        };
      };

      // G√©n√©ration de l'ordonnance biologique
      const generateBiologyPrescription = async () => {
        let prescriptions = [];
        
        if (process.env.OPENAI_API_KEY && (diagnosis.bilanBiologique || diagnosis.examensComplementaires)) {
          const biologyPrompt = `
            En tant que m√©decin exp√©riment√©, g√©n√©rez une ordonnance d'examens biologiques D√âTAILL√âE pour:
            
            CONTEXTE CLINIQUE:
            - Diagnostic: ${diagnosis.diagnosticPrincipal}
            - Sympt√¥mes: ${clinical.symptomes}
            - Ant√©c√©dents: ${clinical.antecedents.medicaux}
            - M√©dicaments actuels: ${clinical.medicamentsActuels}
            
            EXAMENS DEMAND√âS PAR LE M√âDECIN:
            ${diagnosis.bilanBiologique || diagnosis.examensComplementaires}
            
            Pour CHAQUE examen biologique, fournissez:
            1. Nom complet de l'examen (avec abr√©viations courantes)
            2. Indication m√©dicale pr√©cise
            3. Urgence (Urgent <6h / Semi-urgent 24-48h / Programm√© 3-7j)
            4. Conditions de pr√©l√®vement (√† jeun ou non, horaire sp√©cifique)
            5. Disponibilit√© √† Maurice
            6. Valeurs normales attendues
            7. Interpr√©tation clinique possible
            
            FORMAT: EXAMEN|INDICATION|URGENCE|JE√õNE|DISPONIBILIT√â|VALEURS_NORMALES|INTERPR√âTATION
            
            Incluez les examens standards pertinents m√™me s'ils n'ont pas √©t√© explicitement mentionn√©s.
          `;
          
          const aiResponse = await generateAIContent(biologyPrompt, 2000);
          if (aiResponse) {
            const lines = aiResponse.split('\n').filter(line => line.includes('|'));
            prescriptions = lines.map((line, index) => {
              const parts = line.split('|').map(p => p.trim());
              return {
                id: Date.now() + index,
                exam: parts[0] || '',
                indication: parts[1] || `Bilan dans le cadre de: ${diagnosis.diagnosticPrincipal}`,
                urgency: parts[2] || 'Semi-urgent (24-48h)',
                fasting: parts[3] || 'Non',
                mauritianAvailability: parts[4] || 'Disponible laboratoires Maurice',
                valeurNormale: parts[5] || '',
                interpretation: parts[6] || ''
              };
            }).filter(p => p.exam);
          }
        }
        
        // Si pas de prescriptions g√©n√©r√©es, cr√©er un bilan standard
        if (prescriptions.length === 0) {
          const examensStandard = [
            {
              exam: 'NFS (Num√©ration Formule Sanguine)',
              indication: 'Recherche an√©mie, infection, anomalie h√©matologique',
              valeurNormale: 'Hb: 12-16 g/dL (F), 13-17 g/dL (H)'
            },
            {
              exam: 'CRP (Prot√©ine C-R√©active)',
              indication: 'Marqueur inflammatoire',
              valeurNormale: '< 5 mg/L'
            },
            {
              exam: 'Ionogramme sanguin',
              indication: '√âquilibre √©lectrolytique',
              valeurNormale: 'Na: 136-145 mmol/L, K: 3.5-5.1 mmol/L'
            },
            {
              exam: 'Cr√©atinine + DFG',
              indication: 'Fonction r√©nale',
              valeurNormale: 'Cr√©at: 60-110 Œºmol/L, DFG > 90 mL/min'
            }
          ];
          
          prescriptions = examensStandard.map((exam, index) => ({
            id: Date.now() + index,
            ...exam,
            urgency: 'Semi-urgent (24-48h)',
            fasting: exam.exam.includes('Glyc√©mie') ? 'Oui (12h)' : 'Non',
            mauritianAvailability: 'Disponible laboratoires Maurice',
            interpretation: ''
          }));
        }

        return {
          type: 'biology',
          date: new Date().toISOString(),
          prescriptions: prescriptions,
          header: {
            praticien: editedDocuments?.praticien || 'Dr. [Nom du praticien]',
            etablissement: editedDocuments?.etablissement || 'Cabinet M√©dical',
            patient: `${patient.nom} ${patient.prenom}`,
            dateNaissance: patient.dateNaissance,
            numeroOrdonnance: `BIO-${Date.now().toString().slice(-8)}`
          },
          instructionsGenerales: `
            INSTRUCTIONS POUR LE PATIENT:
            
            1. AVANT LE PR√âL√àVEMENT:
               - Se pr√©senter avec cette ordonnance et une pi√®ce d'identit√©
               - Respecter les conditions de je√ªne indiqu√©es (12h = derni√®re prise alimentaire la veille au soir)
               - √âviter l'alcool 24h avant
               - Maintenir une hydratation normale (eau autoris√©e)
               - Signaler tout traitement en cours au laboratoire
            
            2. LABORATOIRES RECOMMAND√âS √Ä MAURICE:
               - Laboratoire C-Care (plusieurs sites)
               - Bio-Medical Laboratory
               - Lancet Laboratories
               - Laboratoire de l'H√¥pital [selon localisation]
            
            3. R√âSULTATS:
               - Disponibles sous 24-48h selon les examens
               - Transmission directe au m√©decin prescripteur
               - Copie patient sur demande
            
            4. IMPORTANT:
               - Cette ordonnance est valable 3 mois
               - Tous les examens peuvent √™tre r√©alis√©s le m√™me jour
               - En cas de r√©sultats anormaux, le laboratoire contactera le m√©decin
            
            ${editedDocuments?.instructionsBiologie || ''}
          `.trim(),
          renseignementsCliniques: `
            Motif: ${clinical.motifConsultation}
            Diagnostic √©voqu√©: ${diagnosis.diagnosticPrincipal}
            Traitement en cours: ${clinical.medicamentsActuels || 'Aucun'}
          `.trim()
        };
      };

      // G√©n√©ration de l'ordonnance paraclinique
      const generateParaclinicalPrescription = async () => {
        let prescriptions = [];
        
        if (process.env.OPENAI_API_KEY && diagnosis.imagerie) {
          const imagingPrompt = `
            En tant que m√©decin exp√©riment√©, g√©n√©rez une ordonnance d'examens d'imagerie D√âTAILL√âE pour:
            
            CONTEXTE CLINIQUE:
            - Diagnostic: ${diagnosis.diagnosticPrincipal}
            - Sympt√¥mes: ${clinical.symptomes}
            - Examen clinique: ${questions.summary}
            - Ant√©c√©dents: ${clinical.antecedents.medicaux}
            
            EXAMENS D'IMAGERIE DEMAND√âS:
            ${diagnosis.imagerie}
            
            Pour CHAQUE examen d'imagerie, fournissez:
            1. Type d'examen pr√©cis (radiographie, √©chographie, scanner, IRM, etc.)
            2. R√©gion anatomique exacte
            3. Protocole sp√©cifique si n√©cessaire
            4. Indication m√©dicale d√©taill√©e
            5. Urgence de r√©alisation
            6. Pr√©paration n√©cessaire
            7. Contre-indications √† v√©rifier
            8. Informations cliniques pertinentes pour le radiologue
            
            FORMAT: EXAMEN|R√âGION|PROTOCOLE|INDICATION|URGENCE|PR√âPARATION|CONTRE-INDICATIONS|INFOS_CLINIQUES
            
            Soyez pr√©cis sur les incidences radiologiques et les s√©quences IRM si pertinent.
          `;
          
          const aiResponse = await generateAIContent(imagingPrompt, 2000);
          if (aiResponse) {
            const lines = aiResponse.split('\n').filter(line => line.includes('|'));
            prescriptions = lines.map((line, index) => {
              const parts = line.split('|').map(p => p.trim());
              return {
                id: Date.now() + index,
                exam: parts[0] || '',
                region: parts[1] || '',
                protocole: parts[2] || 'Standard',
                indication: parts[3] || diagnosis.diagnosticPrincipal,
                urgency: parts[4] || 'Programm√© (3-7 jours)',
                preparation: parts[5] || 'Aucune pr√©paration sp√©cifique',
                contreIndications: parts[6] || '',
                infosCliniques: parts[7] || '',
                mauritianAvailability: 'Disponible centres imagerie Maurice'
              };
            }).filter(p => p.exam);
          }
        }
        
        // Si pas d'examens g√©n√©r√©s mais demand√©s dans le diagnostic
        if (prescriptions.length === 0 && diagnosis.imagerie) {
          const imageries = ensureArray(diagnosis.imagerie);
          prescriptions = imageries.map((exam, index) => ({
            id: Date.now() + index,
            exam: exam,
            region: '',
            protocole: 'Standard',
            indication: `Exploration dans le cadre de: ${clinical.motifConsultation}`,
            urgency: 'Programm√© (3-7 jours)',
            preparation: exam.toLowerCase().includes('√©chographie') ? 'Selon la r√©gion explor√©e' : 
                        exam.toLowerCase().includes('scanner') ? 'V√©rifier fonction r√©nale si injection' :
                        exam.toLowerCase().includes('irm') ? 'Retirer tous objets m√©talliques' : 
                        'Aucune pr√©paration sp√©cifique',
            contreIndications: exam.toLowerCase().includes('irm') ? 'Pacemaker, implants m√©talliques' : '',
            infosCliniques: `${clinical.symptomes}. ${diagnosis.diagnosticPrincipal}`,
            mauritianAvailability: 'Disponible centres imagerie Maurice'
          }));
        }

        return {
          type: 'paraclinical',
          date: new Date().toISOString(),
          prescriptions: prescriptions,
          header: {
            praticien: editedDocuments?.praticien || 'Dr. [Nom du praticien]',
            etablissement: editedDocuments?.etablissement || 'Cabinet M√©dical',
            patient: `${patient.nom} ${patient.prenom}`,
            dateNaissance: patient.dateNaissance,
            numeroOrdonnance: `IMG-${Date.now().toString().slice(-8)}`
          },
          renseignementsCliniques: `
            RENSEIGNEMENTS CLINIQUES POUR LE RADIOLOGUE:
            
            Motif de consultation: ${clinical.motifConsultation}
            
            Histoire clinique:
            - Sympt√¥mes: ${clinical.symptomes}
            - Dur√©e: ${clinical.dureeSymptomes}
            - √âvolution: ${editedDocuments?.evolution || 'Progressive'}
            
            Examen clinique:
            ${questions.summary || 'Voir compte-rendu joint'}
            
            Hypoth√®ses diagnostiques:
            - ${diagnosis.diagnosticPrincipal}
            ${diagnosis.diagnosticsDifferentiels ? `- Diff√©rentiels: ${diagnosis.diagnosticsDifferentiels}` : ''}
            
            Ant√©c√©dents pertinents:
            - M√©dicaux: ${clinical.antecedents.medicaux || 'Aucun'}
            - Chirurgicaux: ${clinical.antecedents.chirurgicaux || 'Aucun'}
            - Allergies (produits de contraste): ${clinical.allergies || 'Aucune connue'}
            
            Examens ant√©rieurs: ${editedDocuments?.examensAnterieurs || 'Aucun'}
            
            Question pos√©e: ${editedDocuments?.questionRadiologique || 'Confirmer/infirmer le diagnostic √©voqu√©'}
          `.trim(),
          instructionsPatient: `
            INSTRUCTIONS POUR LE PATIENT:
            
            1. CENTRES D'IMAGERIE RECOMMAND√âS √Ä MAURICE:
               - Clinique Darn√© - Service Radiologie
               - C-Care Medical & Research Centre
               - Wellkin Hospital - Imagerie M√©dicale
               - City Clinic - Centre d'imagerie
               
            2. PRISE DE RENDEZ-VOUS:
               - Contacter le centre choisi avec cette ordonnance
               - Mentionner le degr√© d'urgence indiqu√©
               - Pr√©voir 30-60 minutes selon l'examen
            
            3. LE JOUR DE L'EXAMEN:
               - Se pr√©senter 15 minutes avant l'heure du RDV
               - Apporter cette ordonnance + pi√®ce d'identit√©
               - Apporter examens ant√©rieurs si disponibles
               - Signaler grossesse ou possibilit√© de grossesse
               - Signaler allergies et ant√©c√©dents
            
            4. PR√âPARATIONS SP√âCIFIQUES:
               ${prescriptions.map(p => p.preparation && p.preparation !== 'Aucune pr√©paration sp√©cifique' ? 
                 `- ${p.exam}: ${p.preparation}` : '').filter(Boolean).join('\n') || 
                 '- Voir instructions sp√©cifiques du centre d\'imagerie'}
            
            5. CONTRE-INDICATIONS IMPORTANTES:
               ${prescriptions.map(p => p.contreIndications ? 
                 `- ${p.exam}: ${p.contreIndications}` : '').filter(Boolean).join('\n') || 
                 '- √Ä v√©rifier avec le radiologue'}
            
            6. R√âSULTATS:
               - Remis sur place ou envoy√©s sous 24-48h
               - Transmission directe au m√©decin prescripteur
               - Conserver les images pour le suivi
            
            ${editedDocuments?.instructionsImagerie || ''}
          `.trim(),
          mentionsLegales: 'Ordonnance valable 6 mois. Les examens d\'imagerie sont soumis √† la justification m√©dicale.',
          consentement: prescriptions.some(p => p.exam.toLowerCase().includes('scanner') || p.exam.toLowerCase().includes('irm')) ?
            'Un formulaire de consentement sera √† signer pour les examens avec injection de produit de contraste.' : ''
        };
      };

      // G√©n√©ration de l'ordonnance m√©dicamenteuse avec AI
      const generateMedicationPrescription = async () => {
        let prescriptions = [];
        
        if (process.env.OPENAI_API_KEY && diagnosis.conduite) {
          const medicationPrompt = `
            En tant que m√©decin g√©n√©raliste exp√©riment√©, g√©n√©rez une ordonnance m√©dicamenteuse COMPL√àTE et D√âTAILL√âE pour:
            
            PATIENT:
            - √Çge: ${patient.age} ans
            - Sexe: ${patient.sexe}
            - Poids: ${clinical.signesVitaux.poids || '70 kg'}
            - Allergies: ${clinical.allergies || 'Aucune'}
            - Fonction r√©nale/h√©patique: Pr√©sum√©e normale sauf indication contraire
            - M√©dicaments actuels: ${clinical.medicamentsActuels || 'Aucun'}
            
            DIAGNOSTIC:
            - Principal: ${diagnosis.diagnosticPrincipal}
            - Secondaires: ${diagnosis.diagnosticsSecondaires || 'Aucun'}
            
            CONTEXTE CLINIQUE:
            - Sympt√¥mes: ${clinical.symptomes}
            - Dur√©e: ${clinical.dureeSymptomes}
            - Intensit√© douleur: ${clinical.intensiteDouleur || 'Non pr√©cis√©e'}
            - Signes vitaux: TA ${clinical.signesVitaux.tension}, FC ${clinical.signesVitaux.pouls}
            
            PLAN TH√âRAPEUTIQUE D√âFINI:
            ${diagnosis.conduite}
            
            INSTRUCTIONS POUR LA PRESCRIPTION:
            1. G√©n√©rez une ordonnance COMPL√àTE incluant:
               - Traitement de fond si n√©cessaire
               - Traitement symptomatique
               - Pr√©vention des effets secondaires si pertinent
               - Adjuvants si indiqu√©s
            
            2. Pour CHAQUE m√©dicament, fournissez OBLIGATOIREMENT:
               - Nom (DCI de pr√©f√©rence + nom commercial √† Maurice si connu)
               - Dosage pr√©cis
               - Forme gal√©nique
               - Posologie d√©taill√©e (nombre de prises, horaires si pertinent)
               - Voie d'administration
               - Dur√©e exacte du traitement
               - Instructions sp√©ciales (avant/pendant/apr√®s repas, etc.)
               - Indication th√©rapeutique
               - Surveillance si n√©cessaire
            
            3. Adaptez au contexte mauricien:
               - Privil√©giez les m√©dicaments disponibles localement
               - Mentionnez les alternatives g√©n√©riques
               - Consid√©rez le co√ªt pour le patient
            
            4. Incluez si pertinent:
               - Mesures hygi√©no-di√©t√©tiques
               - Conseils de surveillance
               - Signes d'alerte
               - Modalit√©s de suivi
            
            FORMAT DE R√âPONSE OBLIGATOIRE (un m√©dicament par ligne):
            MEDICATION|DOSAGE|FORME|POSOLOGIE|VOIE|DUR√âE|INSTRUCTIONS|INDICATION|SURVEILLANCE
            
            Exemple:
            Amoxicilline|500mg|Comprim√©|1 cp 3 fois/jour (8h-16h-22h)|Orale|7 jours|Pendant les repas|Infection bact√©rienne|Surveiller apparition rash
            
            G√©n√©rez entre 3 et 8 m√©dicaments selon la complexit√© du cas.
            Soyez PR√âCIS et PROFESSIONNEL.
          `;
          
          const aiResponse = await generateAIContent(medicationPrompt, 3000);
          if (aiResponse) {
            const lines = aiResponse.split('\n').filter(line => line.includes('|'));
            prescriptions = lines.map((line, index) => {
              const parts = line.split('|').map(p => p.trim());
              return {
                id: Date.now() + index,
                medication: parts[0] || '',
                dosage: parts[1] || '',
                forme: parts[2] || '',
                frequency: parts[3] || '',
                voie: parts[4] || 'Orale',
                duration: parts[5] || '',
                indication: parts[7] || diagnosis.diagnosticPrincipal,
                specialInstructions: parts[6] || '',
                surveillance: parts[8] || '',
                genericAvailable: true,
                mauritianBrand: parts[0]?.includes('(') ? parts[0].match(/\((.*?)\)/)?.[1] : ''
              };
            }).filter(p => p.medication); // Filtrer les lignes vides
          }
        }

        // Fallback si pas d'AI ou √©chec
        if (prescriptions.length === 0 && editedDocuments?.prescriptionsMedicamenteuses) {
          prescriptions = ensureArray(editedDocuments.prescriptionsMedicamenteuses);
        }

        // Si toujours pas de prescriptions, g√©n√©rer une ordonnance basique
        if (prescriptions.length === 0) {
          prescriptions = [{
            id: Date.now(),
            medication: 'Parac√©tamol',
            dosage: '500mg',
            forme: 'Comprim√©',
            frequency: '1 comprim√© 3 fois par jour si douleur',
            voie: 'Orale',
            duration: '5 jours',
            indication: 'Antalgique',
            specialInstructions: 'Maximum 4g/jour. √Ä prendre pendant les repas.',
            surveillance: 'Consulter si persistance des sympt√¥mes',
            genericAvailable: true,
            mauritianBrand: 'Panadol'
          }];
        }

        return {
          type: 'medication',
          date: new Date().toISOString(),
          prescriptions: prescriptions,
          header: {
            praticien: editedDocuments?.praticien || 'Dr. [Nom du praticien]',
            rpps: editedDocuments?.rpps || '[RPPS]',
            adeli: editedDocuments?.adeli || '[ADELI]',
            specialite: editedDocuments?.specialite || 'M√©decine G√©n√©rale',
            adresseCabinet: editedDocuments?.adresseCabinet || '[Adresse du cabinet]',
            telephone: editedDocuments?.telephoneCabinet || '[T√©l√©phone]',
            email: editedDocuments?.emailCabinet || '[Email]'
          },
          footer: {
            mentionsLegales: 'Ordonnance valable 3 mois. Ne pas d√©passer les doses prescrites.',
            dateValidite: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toLocaleDateString('fr-FR')
          },
          conseils: `
            CONSEILS AU PATIENT:
            - Respecter scrupuleusement les horaires et doses prescrits
            - Ne pas arr√™ter le traitement sans avis m√©dical
            - Conserver les m√©dicaments selon les conditions indiqu√©es
            - En cas d'effets ind√©sirables, consulter imm√©diatement
            - Tenir hors de port√©e des enfants
            
            SIGNES D'ALERTE n√©cessitant une consultation urgente:
            - R√©action allergique (√©ruption, d√©mangeaisons, gonflement)
            - Aggravation des sympt√¥mes
            - Apparition de nouveaux sympt√¥mes
            ${editedDocuments?.conseilsSpecifiques || ''}
          `.trim(),
          interactions: editedDocuments?.interactions || 'Aucune interaction majeure identifi√©e avec les traitements en cours',
          renouvellement: editedDocuments?.renouvellement || 'Non renouvelable',
          substitution: 'Substitution g√©n√©rique autoris√©e sauf mention contraire'
        };
      };

      return {
        consultation: await generateConsultationPrescription(),
        biology: await generateBiologyPrescription(),
        paraclinical: await generateParaclinicalPrescription(),
        medication: await generateMedicationPrescription()
      };
    };

    // ==================== G√âN√âRATION FINALE ====================
    
    const startTime = Date.now();
    const report = await generateMedicalReport();
    const documents = generateAllDocuments ? await generatePrescriptionDocuments() : {};
    const endTime = Date.now();

    // Calcul des statistiques de compl√©tude
    const calculateCompleteness = (obj: any): number => {
      const values = Object.values(obj).flat();
      const filledValues = values.filter(v => 
        v !== null && 
        v !== undefined && 
        v !== '' && 
        v !== 'Non renseign√©' && 
        v !== 'Non renseign√©e' &&
        v !== 'Non mesur√©' &&
        v !== 'Non mesur√©e'
      );
      return values.length > 0 ? filledValues.length / values.length : 0;
    };

    // Ajout des m√©tadonn√©es finales
    const finalResponse = {
      success: true,
      report: report,
      documents: documents,
      metadata: {
        timestamp: new Date().toISOString(),
        version: '3.0',
        generatedBy: 'Medical AI Expert System - Professional Edition',
        generationTime: `${endTime - startTime}ms`,
        checksum: Math.random().toString(36).substring(2, 15),
        environment: process.env.NODE_ENV || 'production'
      },
      statistics: {
        patientDataCompleteness: Math.round(calculateCompleteness(patient) * 100),
        clinicalDataCompleteness: Math.round(calculateCompleteness(clinical) * 100),
        diagnosticDataCompleteness: Math.round(calculateCompleteness(diagnosis) * 100),
        overallCompleteness: Math.round(
          (calculateCompleteness(patient) + 
           calculateCompleteness(clinical) + 
           calculateCompleteness(diagnosis)) / 3 * 100
        ),
        aiGenerated: !!process.env.OPENAI_API_KEY,
        documentsGenerated: generateAllDocuments ? Object.keys(documents).length : 0,
        prescriptionsCount: generateAllDocuments ? 
          (documents.biology?.prescriptions?.length || 0) +
          (documents.paraclinical?.prescriptions?.length || 0) +
          (documents.medication?.prescriptions?.length || 0) : 0
      },
      quality: {
        reportLength: report.rapport?.contenuComplet?.length || 0,
        sectionsCompleted: Object.values(report.rapport?.sections || {}).filter(v => v).length,
        aiEnhanced: !!process.env.OPENAI_API_KEY,
        professionalGrade: true,
        mauritianContext: true
      }
    };

    console.log('‚úÖ G√©n√©ration compl√®te r√©ussie');
    console.log(`üìä Statistiques de g√©n√©ration:`);
    console.log(`   - Temps de g√©n√©ration: ${endTime - startTime}ms`);
    console.log(`   - Compl√©tude patient: ${finalResponse.statistics.patientDataCompleteness}%`);
    console.log(`   - Compl√©tude clinique: ${finalResponse.statistics.clinicalDataCompleteness}%`);
    console.log(`   - Compl√©tude diagnostic: ${finalResponse.statistics.diagnosticDataCompleteness}%`);
    console.log(`   - Documents g√©n√©r√©s: ${finalResponse.statistics.documentsGenerated}`);
    console.log(`   - Prescriptions totales: ${finalResponse.statistics.prescriptionsCount}`);
    console.log(`   - Mode AI: ${finalResponse.statistics.aiGenerated ? 'Activ√© (GPT-4o)' : 'D√©sactiv√©'}`);

    return NextResponse.json(finalResponse);

  } catch (error) {
    console.error('‚ùå Erreur API g√©n√©ration:', error);
    
    // Log d√©taill√© pour debug
    if (error instanceof Error) {
      console.error('Stack trace:', error.stack);
      console.error('Message:', error.message);
      console.error('Type:', error.constructor.name);
    }
    
    // Tentative d'identification de l'erreur sp√©cifique
    let errorDetails = 'Erreur inconnue';
    if (error instanceof Error) {
      if (error.message.includes('join is not a function')) {
        errorDetails = "Erreur de type de donn√©es: tentative d'utilisation de join sur une non-array";
      } else if (error.message.includes('OpenAI')) {
        errorDetails = 'Erreur API OpenAI - V√©rifiez votre cl√© API';
      } else if (error.message.includes('JSON')) {
        errorDetails = 'Erreur de parsing JSON';
      }
    }
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Erreur inconnue lors de la g√©n√©ration',
      errorType: error instanceof Error ? error.constructor.name : 'Unknown',
      details: errorDetails,
      stack: process.env.NODE_ENV === 'development' && error instanceof Error ? error.stack : undefined,
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

// Endpoint GET pour v√©rifier l'√©tat de l'API
export async function GET() {
  const hasOpenAI = !!process.env.OPENAI_API_KEY;
  
  return NextResponse.json({ 
    status: 'operational',
    message: 'API de g√©n√©ration de compte rendu m√©dical professionnel',
    version: '3.0',
    features: {
      aiGeneration: hasOpenAI,
      model: hasOpenAI ? 'gpt-4o (via Vercel AI SDK)' : 'none',
      temperature: 0.3,
      maxTokens: 10000,
      multipleDocuments: true,
      mauritianContext: true,
      professionalGrade: true,
      detailedReports: true
    },
    endpoints: {
      POST: '/api/generate-consultation-report',
      description: 'G√©n√®re un dossier m√©dical complet professionnel avec rapport d√©taill√© et ordonnances'
    },
    requirements: {
      openAI: hasOpenAI ? '‚úÖ Configur√©' : '‚ùå Cl√© API manquante',
      memory: '512MB minimum',
      timeout: '30s recommand√©'
    },
    documentation: {
      inputFormat: {
        patientData: 'Donn√©es patient compl√®tes',
        clinicalData: 'Donn√©es cliniques avec ant√©c√©dents',
        questionsData: "R√©ponses aux questions d'examen",
        diagnosisData: 'Diagnostic et plan th√©rapeutique',
        editedDocuments: 'Documents √©dit√©s (optionnel)',
        generateAllDocuments: 'Boolean pour g√©n√©ration compl√®te'
      },
      outputFormat: {
        report: 'Compte rendu m√©dical professionnel d√©taill√©',
        documents: {
          consultation: 'Compte-rendu de consultation complet',
          biology: 'Ordonnance biologique d√©taill√©e',
          paraclinical: 'Ordonnance imagerie avec protocoles',
          medication: 'Ordonnance m√©dicamenteuse compl√®te'
        },
        metadata: 'M√©tadonn√©es de g√©n√©ration',
        statistics: 'Statistiques de qualit√©'
      }
    }
  });
}
