// app/api/generate-consultation-report/route.ts

import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

// Types pour une meilleure s√©curit√©
interface PatientInfo {
  nom: string
  age: string | number
  sexe: string
  poids: string | number
  taille: string | number
  allergies: string
  antecedents: string
  adresse: string
  telephone: string
  dateNaissance?: string
}

interface ClinicalInfo {
  motif: string
  duree: string
  symptomes: string
  signesVitaux: any
  examenPhysique: string
}

interface DiagnosticInfo {
  principal: string
  differentiel: any[]
  investigations: any
  traitements: any
}

export async function POST(request: NextRequest) {
  try {
    console.log("üìã API: G√©n√©ration du dossier m√©dical complet")
    
    const body = await request.json()
    const { 
      patientData, 
      clinicalData, 
      questionsData, 
      diagnosisData,
      editedDocuments,
      generateAllDocuments = false,
      generateDocuments = false // Support ancien flag aussi
    } = body

    // Validation des donn√©es requises
    if (!patientData || !clinicalData || !diagnosisData) {
      console.error("‚ùå Donn√©es manquantes:", { 
        hasPatient: !!patientData, 
        hasClinical: !!clinicalData, 
        hasDiagnosis: !!diagnosisData 
      })
      return NextResponse.json(
        { success: false, error: "Donn√©es patient, cliniques ou diagnostic manquantes" },
        { status: 400 }
      )
    }

    // Si on doit g√©n√©rer tous les documents
    if (generateAllDocuments || generateDocuments) {
      console.log("ü§ñ Mode g√©n√©ration compl√®te activ√©")
      return await generateCompleteDocumentation(
        patientData, 
        clinicalData, 
        questionsData, 
        diagnosisData
      )
    } else {
      console.log("üìÑ Mode g√©n√©ration rapport seul")
      return await generateReportOnly(
        patientData, 
        clinicalData, 
        questionsData, 
        diagnosisData,
        editedDocuments
      )
    }

  } catch (error) {
    console.error("‚ùå Erreur API g√©n√©ration:", error)
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : "Erreur inconnue lors de la g√©n√©ration"
      },
      { status: 500 }
    )
  }
}

// G√©n√©ration compl√®te (rapport + ordonnances)
async function generateCompleteDocumentation(
  patientData: any, 
  clinicalData: any, 
  questionsData: any, 
  diagnosisData: any
) {
  console.log("üìä Pr√©paration des donn√©es pour g√©n√©ration compl√®te")
  
  // Pr√©parer les donn√©es patient
  const patientInfo: PatientInfo = {
    nom: `${patientData.firstName || ''} ${patientData.lastName || ''}`.trim() || 'Patient X',
    age: patientData.age || 'Non renseign√©',
    sexe: normalizeGender(patientData.gender),
    poids: patientData.weight || 'Non renseign√©',
    taille: patientData.height || 'Non renseign√©',
    allergies: formatAllergies(patientData.allergies),
    antecedents: formatMedicalHistory(patientData.medicalHistory),
    adresse: patientData.address || 'Adresse non renseign√©e - Maurice',
    telephone: patientData.phone || patientData.phoneNumber || 'Non renseign√©',
    dateNaissance: patientData.birthDate || 'Non renseign√©e'
  }

  // Pr√©parer les donn√©es cliniques
  const clinicalInfo: ClinicalInfo = {
    motif: clinicalData.chiefComplaint || 'Non pr√©cis√©',
    duree: clinicalData.symptomDuration || 'Non pr√©cis√©e',
    symptomes: formatSymptoms(clinicalData.symptoms),
    signesVitaux: clinicalData.vitalSigns || {},
    examenPhysique: clinicalData.physicalExamDetails || 'Non document√©'
  }

  // Pr√©parer les donn√©es diagnostiques
  const diagnosticInfo: DiagnosticInfo = {
    principal: extractPrimaryDiagnosis(diagnosisData),
    differentiel: diagnosisData?.diagnosis?.differential || [],
    investigations: diagnosisData?.expertAnalysis?.expert_investigations || {},
    traitements: diagnosisData?.expertAnalysis?.expert_therapeutics || {}
  }

  // Construire le prompt structur√©
  const structuredPrompt = buildCompleteGenerationPrompt(
    patientInfo,
    clinicalInfo,
    diagnosticInfo,
    questionsData
  )

  console.log("ü§ñ Appel GPT-4 pour g√©n√©ration compl√®te...")
  
  try {
    const result = await generateText({
      model: openai("gpt-4o"),
      prompt: structuredPrompt,
      maxTokens: 12000,
      temperature: 0.3,
    })

    console.log("‚úÖ G√©n√©ration GPT-4 termin√©e")

    // Parser et valider la r√©ponse
    const responseData = parseAIResponse(result.text)
    
    // Enrichir avec les m√©tadonn√©es
    if (responseData.report) {
      responseData.report.metadata = {
        ...responseData.report.metadata,
        wordCount: countWords(JSON.stringify(responseData.report.rapport)),
        generatedAt: new Date().toISOString(),
        version: "2.0"
      }
    }

    // Valider la structure des documents
    validateDocumentStructure(responseData.documents)

    return NextResponse.json({
      success: true,
      report: responseData.report,
      documents: responseData.documents,
      metadata: {
        generationType: "complete",
        timestamp: new Date().toISOString()
      }
    })

  } catch (error) {
    console.error("‚ùå Erreur lors de la g√©n√©ration GPT-4:", error)
    throw new Error("√âchec de la g√©n√©ration du dossier m√©dical complet")
  }
}

// G√©n√©ration du rapport seul
async function generateReportOnly(
  patientData: any, 
  clinicalData: any, 
  questionsData: any, 
  diagnosisData: any,
  editedDocuments: any
) {
  const simplePrompt = buildReportOnlyPrompt(
    patientData,
    clinicalData,
    questionsData,
    diagnosisData,
    editedDocuments
  )

  const result = await generateText({
    model: openai("gpt-4o"),
    prompt: simplePrompt,
    maxTokens: 6000,
    temperature: 0.3,
  })

  const reportData = parseAIResponse(result.text)

  return NextResponse.json({
    success: true,
    report: reportData,
    metadata: {
      generationType: "report-only",
      timestamp: new Date().toISOString()
    }
  })
}

// Construction du prompt pour g√©n√©ration compl√®te
function buildCompleteGenerationPrompt(
  patientInfo: PatientInfo,
  clinicalInfo: ClinicalInfo,
  diagnosticInfo: DiagnosticInfo,
  questionsData: any
): string {
  // Construire les prescriptions √† partir du diagnostic
  const biologyPrescriptions = buildBiologyPrescriptionsData(diagnosticInfo)
  const paraclinicalPrescriptions = buildParaclinicalPrescriptionsData(diagnosticInfo)
  const medicationPrescriptions = buildMedicationPrescriptionsData(diagnosticInfo, patientInfo)

  return `
Tu es un m√©decin senior exp√©riment√© √† Maurice cr√©ant un dossier m√©dical complet.
Tu dois g√©n√©rer un compte rendu professionnel ET toutes les ordonnances n√©cessaires.

CONTEXTE PATIENT:
- Nom: ${patientInfo.nom}
- √Çge: ${patientInfo.age} ans
- Sexe: ${patientInfo.sexe}
- Poids: ${patientInfo.poids} kg
- Taille: ${patientInfo.taille} cm
- Allergies: ${patientInfo.allergies}
- Ant√©c√©dents: ${patientInfo.antecedents}
- Adresse: ${patientInfo.adresse}
- T√©l√©phone: ${patientInfo.telephone}

DONN√âES CLINIQUES:
- Motif de consultation: ${clinicalInfo.motif}
- Dur√©e des sympt√¥mes: ${clinicalInfo.duree}
- Sympt√¥mes: ${clinicalInfo.symptomes}
- Signes vitaux: ${JSON.stringify(clinicalInfo.signesVitaux, null, 2)}
- Examen physique: ${clinicalInfo.examenPhysique}

DIAGNOSTIC:
- Principal: ${diagnosticInfo.principal}
- Diff√©rentiel: ${JSON.stringify(diagnosticInfo.differentiel)}

QUESTIONS IA ET R√âPONSES:
${formatQuestionsData(questionsData)}

INSTRUCTIONS CRITIQUES:
1. G√©n√®re un compte rendu en PROSE NARRATIVE fluide et professionnelle
2. Cr√©e des ordonnances compl√®tes et d√©taill√©es bas√©es sur le diagnostic
3. Utilise UNIQUEMENT la terminologie m√©dicale fran√ßaise
4. Adapte TOUT au contexte mauricien (disponibilit√©s, centres, m√©dicaments locaux)
5. Int√®gre les recommandations diagnostiques de mani√®re coh√©rente

STRUCTURE JSON √Ä RETOURNER (SANS MARKDOWN, SANS BACKTICKS):

{
  "report": {
    "header": {
      "title": "COMPTE-RENDU DE CONSULTATION M√âDICALE",
      "subtitle": "M√©decine G√©n√©rale - Consultation du ${new Date().toLocaleDateString('fr-FR')}",
      "reference": "CR-${Date.now()}"
    },
    "identification": {
      "patient": "${patientInfo.nom}",
      "age": "${patientInfo.age} ans",
      "dateNaissance": "${patientInfo.dateNaissance}",
      "sexe": "${patientInfo.sexe}",
      "adresse": "${patientInfo.adresse}",
      "telephone": "${patientInfo.telephone}"
    },
    "rapport": {
      "motifConsultation": "Le patient consulte ce jour pour... [PROSE fluide int√©grant le contexte]",
      "anamnese": "L'histoire de la maladie d√©bute... [PROSE NARRATIVE chronologique d√©taill√©e]",
      "antecedents": "Sur le plan des ant√©c√©dents... [PROSE d√©crivant tout l'historique m√©dical]",
      "examenClinique": "√Ä l'examen, le patient pr√©sente... [PROSE M√âDICALE AU PR√âSENT]",
      "syntheseDiagnostique": "L'analyse des √©l√©ments cliniques... [PROSE du raisonnement]",
      "conclusionDiagnostique": "Au terme de cette consultation... [PROSE de la conclusion]",
      "priseEnCharge": "La prise en charge comprend... [PROSE du plan th√©rapeutique]",
      "surveillance": "Le plan de surveillance pr√©voit... [PROSE du suivi]",
      "conclusion": "En conclusion... [PROSE r√©sumant tout]"
    },
    "signature": {
      "medecin": "Dr. M√âDECIN EXPERT",
      "qualification": "M√©decin G√©n√©raliste",
      "rpps": "",
      "etablissement": "Cabinet M√©dical - Maurice"
    }
  },
  
  "documents": {
    "consultation": ${JSON.stringify(buildConsultationDocument(patientInfo, clinicalInfo, diagnosticInfo))},
    "biology": ${JSON.stringify(buildBiologyDocument(patientInfo, biologyPrescriptions))},
    "paraclinical": ${JSON.stringify(buildParaclinicalDocument(patientInfo, paraclinicalPrescriptions))},
    "medication": ${JSON.stringify(buildMedicationDocument(patientInfo, medicationPrescriptions))}
  }
}

RAPPEL: G√©n√®re un JSON valide SANS formatage markdown. Remplis TOUS les champs avec du contenu m√©dical appropri√©.`
}

// Construction du prompt pour rapport seul
function buildReportOnlyPrompt(
  patientData: any,
  clinicalData: any,
  questionsData: any,
  diagnosisData: any,
  editedDocuments: any
): string {
  return `
Tu es un m√©decin senior r√©digeant un compte rendu professionnel d√©taill√©.

DONN√âES COMPL√àTES:
${JSON.stringify({ patientData, clinicalData, questionsData, diagnosisData }, null, 2)}

${editedDocuments ? `DOCUMENTS √âDIT√âS:
${JSON.stringify(editedDocuments, null, 2)}` : ''}

G√©n√®re UNIQUEMENT un compte rendu narratif professionnel.
Utilise une prose m√©dicale fluide et compl√®te.

RETOURNE UN JSON VALIDE SANS MARKDOWN:
{
  "header": {
    "title": "COMPTE-RENDU DE CONSULTATION M√âDICALE",
    "subtitle": "M√©decine G√©n√©rale - Consultation du ${new Date().toLocaleDateString('fr-FR')}",
    "reference": "CR-${Date.now()}"
  },
  "identification": {
    "patient": "[Nom complet]",
    "age": "[Age] ans",
    "dateNaissance": "[Date]",
    "sexe": "[Sexe]",
    "adresse": "[Adresse compl√®te]",
    "telephone": "[T√©l√©phone]"
  },
  "rapport": {
    "motifConsultation": "[PROSE fluide et d√©taill√©e]",
    "anamnese": "[PROSE NARRATIVE chronologique compl√®te]",
    "antecedents": "[PROSE des ant√©c√©dents]",
    "examenClinique": "[PROSE M√âDICALE AU PR√âSENT]",
    "syntheseDiagnostique": "[PROSE du raisonnement]",
    "conclusionDiagnostique": "[PROSE de conclusion]",
    "priseEnCharge": "[PROSE du plan]",
    "surveillance": "[PROSE du suivi]",
    "conclusion": "[PROSE finale]"
  },
  "signature": {
    "medecin": "Dr. M√âDECIN",
    "qualification": "M√©decin G√©n√©raliste",
    "etablissement": "Cabinet M√©dical"
  }
}`
}

// Fonctions de construction des documents
function buildConsultationDocument(patientInfo: PatientInfo, clinicalInfo: ClinicalInfo, diagnosticInfo: DiagnosticInfo) {
  return {
    header: {
      title: "COMPTE-RENDU DE CONSULTATION",
      subtitle: "M√©decine G√©n√©rale",
      date: new Date().toISOString().split('T')[0],
      time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
      physician: "Dr. M√âDECIN EXPERT",
      registration: "COUNCIL-MU-2024-001",
      institution: "Centre M√©dical Maurice"
    },
    patient: {
      firstName: patientInfo.nom.split(' ')[0] || '',
      lastName: patientInfo.nom.split(' ').slice(1).join(' ') || '',
      age: `${patientInfo.age} ans`,
      sex: patientInfo.sexe === 'Masculin' ? 'M' : 'F',
      address: patientInfo.adresse,
      phone: patientInfo.telephone,
      weight: patientInfo.poids.toString(),
      height: patientInfo.taille.toString(),
      allergies: patientInfo.allergies
    },
    content: {
      chiefComplaint: clinicalInfo.motif,
      history: "√Ä compl√©ter par l'IA",
      examination: "√Ä compl√©ter par l'IA",
      diagnosis: diagnosticInfo.principal,
      plan: "√Ä compl√©ter par l'IA"
    }
  }
}

function buildBiologyDocument(patientInfo: PatientInfo, prescriptions: any[]) {
  return {
    header: {
      title: "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
      subtitle: "PRESCRIPTION D'EXAMENS BIOLOGIQUES",
      date: new Date().toISOString().split('T')[0],
      number: `BIO-MU-${Date.now()}`,
      physician: "Dr. M√âDECIN EXPERT",
      registration: "COUNCIL-MU-2024-001"
    },
    patient: {
      firstName: patientInfo.nom.split(' ')[0] || '',
      lastName: patientInfo.nom.split(' ').slice(1).join(' ') || '',
      age: `${patientInfo.age} ans`,
      address: patientInfo.adresse
    },
    prescriptions: prescriptions
  }
}

function buildParaclinicalDocument(patientInfo: PatientInfo, prescriptions: any[]) {
  return {
    header: {
      title: "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
      subtitle: "PRESCRIPTION D'EXAMENS PARACLINIQUES",
      date: new Date().toISOString().split('T')[0],
      number: `PARA-MU-${Date.now()}`,
      physician: "Dr. M√âDECIN EXPERT",
      registration: "COUNCIL-MU-2024-001"
    },
    patient: {
      firstName: patientInfo.nom.split(' ')[0] || '',
      lastName: patientInfo.nom.split(' ').slice(1).join(' ') || '',
      age: `${patientInfo.age} ans`,
      address: patientInfo.adresse
    },
    prescriptions: prescriptions
  }
}

function buildMedicationDocument(patientInfo: PatientInfo, prescriptions: any[]) {
  return {
    header: {
      title: "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
      subtitle: "PRESCRIPTION TH√âRAPEUTIQUE",
      date: new Date().toISOString().split('T')[0],
      number: `MED-MU-${Date.now()}`,
      physician: "Dr. M√âDECIN EXPERT",
      registration: "COUNCIL-MU-2024-001",
      validity: "Ordonnance valable 3 mois"
    },
    patient: {
      firstName: patientInfo.nom.split(' ')[0] || '',
      lastName: patientInfo.nom.split(' ').slice(1).join(' ') || '',
      age: `${patientInfo.age} ans`,
      weight: patientInfo.poids.toString(),
      allergies: patientInfo.allergies,
      address: patientInfo.adresse,
      pregnancy: "Non applicable"
    },
    prescriptions: prescriptions,
    clinicalAdvice: {
      hydration: "Hydratation renforc√©e (2-3L/jour) adapt√©e au climat tropical de Maurice",
      activity: "Repos relatif selon sympt√¥mes, √©viter efforts intenses aux heures chaudes",
      diet: "Alimentation √©quilibr√©e, privil√©gier fruits et l√©gumes locaux",
      mosquitoProtection: "Protection anti-moustiques INDISPENSABLE (dengue/chikungunya end√©miques)",
      followUp: "Consultation de contr√¥le si pas d'am√©lioration sous 48-72h",
      emergency: "Urgences Maurice: 999 (SAMU) ou 114"
    }
  }
}

// Construction des prescriptions biologiques
function buildBiologyPrescriptionsData(diagnosticInfo: DiagnosticInfo): any[] {
  const prescriptions: any[] = []
  
  if (diagnosticInfo.investigations?.immediate_priority) {
    const biologyExams = diagnosticInfo.investigations.immediate_priority
      .filter((exam: any) => exam.category === 'biology')
    
    biologyExams.forEach((exam: any, index: number) => {
      prescriptions.push({
        id: Date.now() + index,
        exam: exam.examination || 'Examen biologique',
        indication: exam.specific_indication || 'Selon contexte clinique',
        urgency: mapUrgency(exam.urgency),
        fasting: exam.fasting_required ? 'Oui - 8h' : 'Non',
        expectedResults: exam.interpretation_keys || 'R√©sultats √† interpr√©ter',
        sampleType: exam.sample_type || 'Sang veineux',
        contraindications: "Aucune",
        mauritianAvailability: formatAvailability(exam.mauritius_availability),
        cost: exam.mauritius_availability?.estimated_cost || '√Ä v√©rifier'
      })
    })
  }
  
  // Template par d√©faut si aucun examen
  if (prescriptions.length === 0) {
    prescriptions.push({
      id: Date.now(),
      exam: "",
      indication: "",
      urgency: "Semi-urgent (24-48h)",
      fasting: "Non",
      expectedResults: "",
      sampleType: "Sang veineux",
      contraindications: "Aucune",
      mauritianAvailability: "Disponible laboratoires Maurice",
      cost: "√Ä v√©rifier"
    })
  }
  
  return prescriptions
}

// Construction des prescriptions paracliniques
function buildParaclinicalPrescriptionsData(diagnosticInfo: DiagnosticInfo): any[] {
  const prescriptions: any[] = []
  
  if (diagnosticInfo.investigations?.immediate_priority) {
    const paraclinicalExams = diagnosticInfo.investigations.immediate_priority
      .filter((exam: any) => exam.category === 'imaging' || exam.category === 'functional')
    
    paraclinicalExams.forEach((exam: any, index: number) => {
      prescriptions.push({
        id: Date.now() + index + 100,
        category: mapExamCategory(exam.examination),
        exam: exam.examination || 'Examen paraclinique',
        indication: exam.specific_indication || 'Exploration compl√©mentaire',
        urgency: mapUrgency(exam.urgency),
        preparation: exam.patient_preparation || 'Aucune pr√©paration sp√©ciale',
        contraindications: exam.contraindications || 'Aucune',
        duration: exam.duration || '15-30 minutes',
        mauritianAvailability: formatAvailability(exam.mauritius_availability),
        cost: exam.mauritius_availability?.estimated_cost || 'Variable'
      })
    })
  }
  
  if (prescriptions.length === 0) {
    prescriptions.push({
      id: Date.now() + 100,
      category: "",
      exam: "",
      indication: "",
      urgency: "Programm√© (1-2 semaines)",
      preparation: "Aucune",
      contraindications: "Aucune",
      duration: "Variable",
      mauritianAvailability: "Centres publics et priv√©s",
      cost: "√Ä v√©rifier"
    })
  }
  
  return prescriptions
}

// Construction des prescriptions m√©dicamenteuses
function buildMedicationPrescriptionsData(diagnosticInfo: DiagnosticInfo, patientInfo: PatientInfo): any[] {
  const prescriptions: any[] = []
  const isElderly = typeof patientInfo.age === 'number' ? patientInfo.age >= 65 : false
  
  if (diagnosticInfo.traitements?.primary_treatments) {
    diagnosticInfo.traitements.primary_treatments.forEach((treatment: any, index: number) => {
      const dosing = treatment.dosing_regimen?.standard_adult || ""
      const elderlyDosing = treatment.dosing_regimen?.elderly_adjustment || dosing
      
      prescriptions.push({
        id: Date.now() + index + 200,
        class: mapTherapeuticClass(treatment.therapeutic_class),
        dci: treatment.medication_dci || '',
        brand: treatment.mauritius_availability?.brand_names?.join(' / ') || 'Marques locales',
        dosage: isElderly && elderlyDosing ? elderlyDosing : dosing,
        frequency: extractFrequency(dosing),
        duration: treatment.treatment_duration || '7 jours',
        totalQuantity: calculateQuantity(dosing, treatment.treatment_duration),
        indication: treatment.precise_indication || '',
        administration: treatment.administration_route || 'Per os',
        contraindications: treatment.contraindications_absolute?.join(', ') || '√Ä v√©rifier',
        precautions: treatment.precautions || 'Respecter posologie',
        monitoring: treatment.monitoring_parameters?.join(', ') || 'Efficacit√© et tol√©rance',
        mauritianAvailability: treatment.mauritius_availability?.locally_available ? 'Disponible' : '√Ä commander',
        cost: treatment.mauritius_availability?.private_sector_cost || '√Ä pr√©ciser'
      })
    })
  }
  
  if (prescriptions.length === 0) {
    prescriptions.push({
      id: Date.now() + 200,
      class: "",
      dci: "",
      brand: "",
      dosage: "",
      frequency: "",
      duration: "",
      totalQuantity: "",
      indication: "",
      administration: "Per os",
      contraindications: "√Ä v√©rifier",
      precautions: "Respecter posologie",
      monitoring: "Efficacit√© et tol√©rance",
      mauritianAvailability: "√Ä v√©rifier",
      cost: "√Ä pr√©ciser"
    })
  }
  
  return prescriptions
}

// Fonctions utilitaires

function parseAIResponse(responseText: string): any {
  try {
    // Nettoyer la r√©ponse
    let cleanedResponse = responseText.trim()
    
    // Retirer tout formatage markdown
    cleanedResponse = cleanedResponse.replace(/^```json\s*/i, '')
    cleanedResponse = cleanedResponse.replace(/^```\s*/i, '')
    cleanedResponse = cleanedResponse.replace(/\s*```$/i, '')
    cleanedResponse = cleanedResponse.trim()
    
    // Parser le JSON
    return JSON.parse(cleanedResponse)
  } catch (error) {
    console.error("‚ùå Erreur parsing JSON:", error)
    console.error("R√©ponse brute (200 premiers caract√®res):", responseText.substring(0, 200))
    throw new Error("Format de r√©ponse invalide - impossible de parser le JSON")
  }
}

function validateDocumentStructure(documents: any) {
  const requiredDocs = ['consultation', 'biology', 'paraclinical', 'medication']
  
  for (const doc of requiredDocs) {
    if (!documents[doc]) {
      throw new Error(`Document manquant: ${doc}`)
    }
    
    if (!documents[doc].header || !documents[doc].patient) {
      throw new Error(`Structure invalide pour le document: ${doc}`)
    }
  }
  
  return true
}

function normalizeGender(gender: any): string {
  if (!gender) return 'Non renseign√©'
  
  const genderStr = Array.isArray(gender) ? gender[0] : gender.toString()
  const normalized = genderStr.toLowerCase()
  
  if (normalized.includes('mas') || normalized === 'm' || normalized === 'homme') {
    return 'Masculin'
  } else if (normalized.includes('f√©m') || normalized === 'f' || normalized === 'femme') {
    return 'F√©minin'
  }
  
  return genderStr
}

function formatAllergies(allergies: any): string {
  if (!allergies) return 'Aucune allergie connue'
  
  if (Array.isArray(allergies)) {
    return allergies.length > 0 ? allergies.join(', ') : 'Aucune allergie connue'
  }
  
  return allergies.toString() || 'Aucune allergie connue'
}

function formatMedicalHistory(history: any): string {
  if (!history) return 'Aucun ant√©c√©dent notable'
  
  if (Array.isArray(history)) {
    return history.length > 0 ? history.join(', ') : 'Aucun ant√©c√©dent notable'
  }
  
  return history.toString() || 'Aucun ant√©c√©dent notable'
}

function formatSymptoms(symptoms: any): string {
  if (!symptoms) return 'Non pr√©cis√©s'
  
  if (Array.isArray(symptoms)) {
    return symptoms.length > 0 ? symptoms.join(', ') : 'Non pr√©cis√©s'
  }
  
  return symptoms.toString() || 'Non pr√©cis√©s'
}

function formatQuestionsData(questionsData: any): string {
  if (!questionsData || !questionsData.responses) {
    return 'Aucune question IA document√©e'
  }
  
  return questionsData.responses
    .map((r: any, i: number) => `Q${i + 1}: ${r.question}\nR: ${r.answer}`)
    .join('\n\n')
}

function extractPrimaryDiagnosis(diagnosisData: any): string {
  return diagnosisData?.diagnosis?.primary?.condition || 
         diagnosisData?.primary?.condition || 
         'Diagnostic √† pr√©ciser'
}

function mapUrgency(urgency: string): string {
  switch(urgency?.toLowerCase()) {
    case 'immediate': return "Urgent (dans les heures)"
    case 'urgent': return "Semi-urgent (24-48h)"
    case 'routine': return "Programm√© (1-2 semaines)"
    default: return "Programm√© (1-2 semaines)"
  }
}

function mapExamCategory(examName: string): string {
  if (!examName) return "Autres examens"
  
  const name = examName.toLowerCase()
  
  if (name.includes('echo') || name.includes('√©cho')) return "√âchographie"
  if (name.includes('ecg') || name.includes('√©lectrocardiogramme')) return "Explorations cardiologiques"
  if (name.includes('scanner') || name.includes('tdm')) return "Scanner (TDM)"
  if (name.includes('irm')) return "IRM"
  if (name.includes('radio')) {
    if (name.includes('thorax') || name.includes('poumon')) return "Imagerie thoracique"
    if (name.includes('abdom')) return "Imagerie abdominale"
    return "Imagerie standard"
  }
  if (name.includes('endoscopie')) return "Endoscopie"
  
  return "Autres examens"
}

function mapTherapeuticClass(classes: string[]): string {
  if (!classes || classes.length === 0) return "Autre"
  
  const classStr = classes.join(' ').toLowerCase()
  
  if (classStr.includes('antalgique') || classStr.includes('antipyr√©tique') || classStr.includes('parac√©tamol')) {
    return "Antalgique non opio√Øde"
  }
  if (classStr.includes('ains') || classStr.includes('anti-inflammatoire') || classStr.includes('ibuprof√®ne')) {
    return "Anti-inflammatoire non st√©ro√Ødien (AINS)"
  }
  if (classStr.includes('antibiotique') || classStr.includes('antibact√©rien')) {
    return "Antibiotique"
  }
  if (classStr.includes('cortico√Øde') || classStr.includes('corticost√©ro√Øde')) {
    return "Cortico√Øde"
  }
  if (classStr.includes('antihistaminique')) {
    return "Antihistaminique"
  }
  if (classStr.includes('ipp') || classStr.includes('pompe √† protons')) {
    return "Inhibiteur de la pompe √† protons"
  }
  
  return "Autre"
}

function formatAvailability(availability: any): string {
  if (!availability) return "Disponible Maurice"
  
  if (availability.public_centers && Array.isArray(availability.public_centers)) {
    const centers = availability.public_centers.slice(0, 3).join(', ')
    return centers ? `Disponible: ${centers}` : "Disponible secteur public"
  }
  
  return availability.locally_available ? 
    "Disponible secteur public et priv√©" : 
    "√Ä commander / Centres sp√©cialis√©s"
}

function extractFrequency(dosing: string): string {
  if (!dosing) return "3 fois par jour"
  
  const dosingLower = dosing.toLowerCase()
  
  if (dosingLower.includes('x 1/jour') || dosingLower.includes('1 fois')) return "1 fois par jour"
  if (dosingLower.includes('x 2/jour') || dosingLower.includes('2 fois')) return "2 fois par jour"
  if (dosingLower.includes('x 3/jour') || dosingLower.includes('3 fois')) return "3 fois par jour"
  if (dosingLower.includes('x 4/jour') || dosingLower.includes('4 fois')) return "4 fois par jour"
  if (dosingLower.includes('matin et soir')) return "Matin et soir"
  if (dosingLower.includes('au coucher')) return "Au coucher"
  
  return "3 fois par jour"
}

function calculateQuantity(dosing: string, duration: string): string {
  const daysMatch = duration?.match(/(\d+)\s*(jour|day)/i)
  const days = daysMatch ? parseInt(daysMatch[1]) : 7
  
  let dailyDoses = 3
  const dosingLower = dosing?.toLowerCase() || ''
  
  if (dosingLower.includes('x 1/jour') || dosingLower.includes('1 fois')) dailyDoses = 1
  else if (dosingLower.includes('x 2/jour') || dosingLower.includes('2 fois')) dailyDoses = 2
  else if (dosingLower.includes('x 4/jour') || dosingLower.includes('4 fois')) dailyDoses = 4
  
  const total = days * dailyDoses
  
  // Arrondir √† la bo√Æte sup√©rieure si n√©cessaire
  if (total <= 20) return `${total} comprim√©s`
  if (total <= 30) return "1 bo√Æte de 30"
  if (total <= 60) return "2 bo√Ætes de 30"
  
  return `${Math.ceil(total / 30)} bo√Ætes de 30`
}

function countWords(text: string): number {
  if (!text) return 0
  return text.split(/\s+/).filter(word => word.length > 0).length
}
