import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

export async function POST(request: NextRequest) {
  try {
    console.log("ü©∫ API Diagnostic IA - D√©but")

    let requestData: {
      patientData?: any
      clinicalData?: any
      questionsData?: any
    }

    try {
      requestData = await request.json()
      console.log("üìù Donn√©es re√ßues pour diagnostic IA")
    } catch (parseError) {
      console.error("‚ùå Erreur parsing JSON diagnostic:", parseError)
      return NextResponse.json(
        {
          error: "Format JSON invalide",
          success: false,
        },
        { status: 400 },
      )
    }

    const { patientData, clinicalData, questionsData } = requestData

    if (!patientData || !clinicalData) {
      console.log("‚ö†Ô∏è Donn√©es manquantes pour le diagnostic")
      return NextResponse.json(
        {
          error: "Donn√©es patient et cliniques requises",
          success: false,
        },
        { status: 400 },
      )
    }

    console.log(`üîç Diagnostic IA pour: ${patientData.firstName} ${patientData.lastName}`)

    const prompt = `
En tant que m√©decin expert avec expertise en m√©decine interne et tropicale, analysez ce cas clinique avec un niveau de D√âTAIL HOSPITALIER.

${/* ins√©rer les donn√©es patient/cliniques */}

G√âN√àRE un diagnostic m√©dical APPROFONDI et COMPLET :

{
  "diagnosis": {
    "primary": {
      "condition": "Diagnostic principal pr√©cis",
      "icd10": "Code CIM-10 exact",
      "confidence": 85,
      "detailedAnalysis": "Analyse APPROFONDIE (minimum 300 mots) : description compl√®te de la pathologie, physiopathologie d√©taill√©e, pr√©sentation clinique typique vs pr√©sentation chez ce patient, facteurs de risque pr√©sents, m√©canismes d√©clenchants, √©volution naturelle attendue",
      "clinicalRationale": "Raisonnement clinique D√âTAILL√â (minimum 250 mots) : pourquoi ce diagnostic est le plus probable, analyse sympt√¥me par sympt√¥me, corr√©lations anatomo-cliniques, chronologie √©vocatrice, signes pathognomoniques",
      "severity": "mild|moderate|severe",
      "severityAnalysis": "Analyse D√âTAILL√âE de la s√©v√©rit√© : crit√®res objectifs utilis√©s, scores cliniques applicables, impact fonctionnel, retentissement syst√©mique, facteurs de gravit√© pr√©sents/absents",
      "clinicalEvidence": "Preuves cliniques D√âTAILL√âES supportant ce diagnostic avec analyse critique de chaque √©l√©ment",
      "physiopathology": "M√©canismes physiopathologiques COMPLETS : cascade d'√©v√©nements, voies biochimiques, interaction organes/syst√®mes, facteurs aggravants",
      "epidemiology": "Contexte √©pid√©miologique : pr√©valence, facteurs de risque population, sp√©cificit√©s g√©ographiques (Maurice), variations saisonni√®res",
      "prognosis": {
        "immediate": "√âvolution attendue 24-72h avec facteurs influen√ßant",
        "shortTerm": "Pronostic 1-4 semaines avec crit√®res d'am√©lioration",
        "longTerm": "Pronostic √† long terme, s√©quelles potentielles, qualit√© de vie",
        "mortality": "Risque vital si applicable avec facteurs pronostiques"
      }
    },
    "differential": [
      {
        "condition": "Diagnostic diff√©rentiel principal",
        "probability": 25,
        "detailedDescription": "Description COMPL√àTE (minimum 200 mots) : d√©finition, physiopathologie, pr√©sentation clinique classique, particularit√©s √©volutives",
        "rationale": "Justification APPROFONDIE : √©l√©ments cliniques en faveur, similitudes avec le cas pr√©sent√©, m√©canismes physiopathologiques communs",
        "distinguishingFeatures": "Caract√©ristiques SP√âCIFIQUES permettant de diff√©rencier ce diagnostic du principal : signes pathognomoniques, chronologie diff√©rente, r√©ponse th√©rapeutique, examens discriminants",
        "ruleOutStrategy": "Strat√©gie D√âTAILL√âE pour √©liminer ce diagnostic : examens sp√©cifiques, crit√®res d'exclusion, √©volution surveillance"
      }
    ]
  },
  "recommendations": {
    "exams": [
      {
        "name": "Examen sp√©cifique",
        "code": "CODE",
        "category": "biologie|imagerie|fonctionnel|anatomopathologie",
        "detailedIndication": "Indication COMPL√àTE (minimum 100 mots) : pourquoi cet examen dans ce contexte pr√©cis, objectifs diagnostiques, timing optimal, alternative si non disponible",
        "expectedResults": {
          "diagnostic": "R√©sultats attendus si diagnostic principal correct",
          "differential": "R√©sultats orientant vers diagnostics diff√©rentiels",
          "normal": "Signification si examen normal",
          "pathological": "Interpr√©tation des anomalies possibles"
        },
        "priority": "high|medium|low",
        "urgency": "immediate|urgent|scheduled|elective",
        "practicalAspects": "Consid√©rations pratiques : pr√©paration, contre-indications, disponibilit√©, co√ªt, acceptabilit√© patient"
      }
    ],
    "medications": [
      {
        "name": "M√©dicament pr√©cis",
        "dosage": "Posologie exacte adapt√©e au patient",
        "frequency": "Fr√©quence avec justification",
        "duration": "Dur√©e avec crit√®res d'arr√™t",
        "detailedIndication": "Indication APPROFONDIE : m√©canisme th√©rapeutique, objectifs pr√©cis, crit√®res d'efficacit√© attendus",
        "mechanism": "M√©canisme d'action D√âTAILL√â dans ce contexte pathologique sp√©cifique",
        "monitoring": {
          "efficacy": "Crit√®res de surveillance de l'efficacit√©",
          "safety": "Surveillance des effets ind√©sirables",
          "laboratory": "Bilans biologiques de suivi",
          "clinical": "Signes cliniques √† surveiller"
        },
        "contraindications": "Contre-indications SP√âCIFIQUES √† ce patient",
        "interactions": "Interactions PERTINENTES avec traitements actuels",
        "alternatives": "Alternatives th√©rapeutiques si √©chec/intol√©rance avec justification"
      }
    ]
  },
  "clinicalConsiderations": {
    "symptomAnalysis": "Analyse EXHAUSTIVE de chaque sympt√¥me : signification s√©miologique, valeur diagnostique, m√©canismes sous-jacents, corr√©lations temporelles",
    "riskFactors": "Analyse D√âTAILL√âE des facteurs de risque : pr√©sents, absents, modifiables, impact sur le pronostic, mesures pr√©ventives",
    "prognosticFactors": "Facteurs pronostiques SP√âCIFIQUES : favorables, d√©favorables, modifiables, impact sur la prise en charge",
    "geographicContext": "Contexte g√©ographique Maurice PERTINENT : pathologies end√©miques, facteurs environnementaux, disponibilit√© th√©rapeutique, sp√©cificit√©s populationnelles",
    "seasonalFactors": "Facteurs saisonniers APPLICABLES : variations √©pid√©miologiques, vecteurs, conditions climatiques influen√ßant la pathologie"
  },
  "managementPlan": {
    "immediate": "Plan de prise en charge IMM√âDIATE : mesures urgentes, surveillance rapproch√©e, crit√®res d'hospitalisation, traitements symptomatiques",
    "shortTerm": "Prise en charge √† COURT TERME : traitements √©tiologiques, r√©√©valuations programm√©es, adaptations th√©rapeutiques, pr√©vention complications",
    "longTerm": "Suivi √† LONG TERME : surveillance √©volutive, pr√©vention r√©cidives, r√©habilitation, √©ducation th√©rapeutique, qualit√© de vie"
  }
}

EXIGENCES QUALIT√â MAXIMALE :
- Minimum 200-300 mots par section principale
- Langage m√©dical expert et pr√©cis
- R√©f√©rences aux recommandations actuelles
- Sp√©cificit√© au cas pr√©sent√© (√©viter g√©n√©ralit√©s)
- Justification de chaque d√©cision diagnostique/th√©rapeutique
- Int√©gration du contexte g√©ographique Maurice si pertinent
- Evidence-based medicine syst√©matique

Analysez comme un EXPERT HOSPITALO-UNIVERSITAIRE
`

    const result = await generateText({
      model: openai("gpt-4o"),
      prompt: prompt,
      temperature: 0.2,
      maxTokens: 3000,
    })

    console.log("üß† Diagnostic IA sympt√¥mes-first g√©n√©r√©")

    // Tentative de parsing JSON avec fallback robuste
    let diagnosticData
    try {
      // Nettoyer le texte avant parsing
      let cleanedText = result.text.trim()

      // Extraire le JSON s'il est entour√© de texte
      const jsonMatch = cleanedText.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        cleanedText = jsonMatch[0]
      }

      diagnosticData = JSON.parse(cleanedText)

      // Validation de la structure minimale
      if (!diagnosticData.diagnosis || !diagnosticData.diagnosis.primary) {
        throw new Error("Structure diagnostic invalide")
      }

      console.log(`‚úÖ Diagnostic sympt√¥mes-first pars√©: ${diagnosticData.diagnosis.primary.condition}`)
    } catch (parseError) {
      console.warn("‚ö†Ô∏è Erreur parsing JSON diagnostic, g√©n√©ration de fallback cibl√©")

      // Diagnostic de fallback adapt√© aux sympt√¥mes
      diagnosticData = generateSymptomBasedFallbackDiagnosis(patientData, clinicalData, questionsData, result.text)
    }

    const response = {
      success: true,
      diagnosis: diagnosticData.diagnosis,
      recommendations: diagnosticData.recommendations || {
        exams: [],
        medications: [],
      },
      clinicalConsiderations: diagnosticData.clinicalConsiderations || {},
      prognosis: diagnosticData.prognosis || "Pronostic √† √©valuer selon l'√©volution",
      followUp: diagnosticData.followUp || "Suivi √† programmer selon les r√©sultats",
      urgencyLevel: diagnosticData.urgencyLevel || 3,
      redFlags: diagnosticData.redFlags || [],
      metadata: {
        patientAge: patientData.age,
        patientGender: patientData.gender,
        chiefComplaint: clinicalData.chiefComplaint,
        aiModel: "gpt-4o",
        confidence: diagnosticData.diagnosis?.primary?.confidence || 75,
        generatedAt: new Date().toISOString(),
        location: "Maurice",
        approach: "symptom-based",
        diagnosticMethod: "symptoms_first_then_context",
      },
      rawAiResponse: result.text, // Pour debug
    }

    console.log(`‚úÖ Diagnostic IA sympt√¥mes-first retourn√©: ${diagnosticData.diagnosis.primary.condition}`)
    return NextResponse.json(response)
  } catch (error: any) {
    console.error("‚ùå Erreur Diagnostic IA:", error)
    return NextResponse.json(
      {
        error: "Erreur lors de la g√©n√©ration du diagnostic",
        details: error.message,
        success: false,
        timestamp: new Date().toISOString(),
      },
      { status: 500 },
    )
  }
}

function generateSymptomBasedFallbackDiagnosis(patientData: any, clinicalData: any, questionsData: any, aiText: string) {
  const symptoms = clinicalData.symptoms?.toLowerCase() || ""
  const chiefComplaint = clinicalData.chiefComplaint?.toLowerCase() || ""
  const combinedSymptoms = `${symptoms} ${chiefComplaint}`
  const age = patientData.age || 0
  const temperature = clinicalData.vitalSigns?.temperature || 0

  let primaryCondition = "Syndrome clinique √† pr√©ciser"
  let icd10 = "R53"
  let confidence = 70
  let severity = "moderate"
  let clinicalEvidence = "Sympt√¥mes non sp√©cifiques n√©cessitant exploration"

  // Diagnostic bas√© sur les SYMPT√îMES d'abord
  if (combinedSymptoms.includes("douleur") && combinedSymptoms.includes("thorax")) {
    // DOULEUR THORACIQUE - Approche cardiologique classique
    primaryCondition = "Douleur thoracique - √† pr√©ciser (cardiaque vs non cardiaque)"
    icd10 = "R07.89"
    confidence = 75
    clinicalEvidence = "Douleur thoracique n√©cessitant √©limination d'une origine cardiaque"
    
    const differential = [
      {
        condition: "Syndrome coronarien aigu",
        probability: 35,
        rationale: "Douleur thoracique - √©limination prioritaire",
        ruleOutTests: ["ECG", "Troponines", "Radiographie thoracique"]
      },
      {
        condition: "Douleur musculo-squelettique",
        probability: 25,
        rationale: "Cause fr√©quente de douleur thoracique",
        ruleOutTests: ["Examen clinique", "Antalgiques test"]
      },
      {
        condition: "Reflux gastro-≈ìsophagien",
        probability: 20,
        rationale: "Diagnostic diff√©rentiel classique",
        ruleOutTests: ["IPP test", "Fibroscopie si n√©cessaire"]
      }
    ]
    
    if (temperature > 38) {
      differential.push({
        condition: "Infection respiratoire",
        probability: 15,
        rationale: "Fi√®vre associ√©e - pneumopathie possible",
        ruleOutTests: ["Radiographie thoracique", "CRP", "H√©mocultures"]
      })
    }
    
    return buildFallbackResponse(primaryCondition, icd10, confidence, severity, clinicalEvidence, differential, "cardiac")
    
  } else if (combinedSymptoms.includes("fi√®vre") || temperature > 37.5) {
    // FI√àVRE - Approche infectieuse classique puis tropicale
    primaryCondition = "Syndrome f√©brile - origine √† d√©terminer"
    icd10 = "R50.9"
    confidence = 75
    clinicalEvidence = `Fi√®vre ${temperature}¬∞C n√©cessitant recherche √©tiologique`
    
    const differential = [
      {
        condition: "Infection respiratoire",
        probability: 30,
        rationale: "Cause fr√©quente de fi√®vre",
        ruleOutTests: ["Radiographie thoracique", "CRP", "H√©mocultures"]
      },
      {
        condition: "Infection urinaire",
        probability: 25,
        rationale: "Cause commune selon √¢ge et sexe",
        ruleOutTests: ["ECBU", "Bandelette urinaire"]
      },
      {
        condition: "Gastro-ent√©rite infectieuse",
        probability: 20,
        rationale: "Si troubles digestifs associ√©s",
        ruleOutTests: ["Coproculture", "Parasitologie"]
      }
    ]
    
    // Contexte tropical APR√àS les causes classiques
    if (combinedSymptoms.includes("articul") || combinedSymptoms.includes("douleur")) {
      differential.push({
        condition: "Arbovirose (dengue/chikungunya)",
        probability: 15,
        rationale: "Fi√®vre + arthralgies en contexte tropical",
        ruleOutTests: ["NS1 dengue", "IgM chikungunya", "Plaquettes"]
      })
    }
    
    return buildFallbackResponse(primaryCondition, icd10, confidence, severity, clinicalEvidence, differential, "infectious")
    
  } else if (combinedSymptoms.includes("c√©phal") || combinedSymptoms.includes("t√™te")) {
    // C√âPHAL√âES - Approche neurologique classique
    primaryCondition = "C√©phal√©es - √† caract√©riser"
    icd10 = "R51"
    confidence = 70
    clinicalEvidence = "C√©phal√©es n√©cessitant caract√©risation et recherche de signes d'alarme"
    
    const differential = [
      {
        condition: "C√©phal√©e de tension",
        probability: 40,
        rationale: "Cause la plus fr√©quente de c√©phal√©es",
        ruleOutTests: ["Examen neurologique", "Antalgiques test"]
      },
      {
        condition: "Migraine",
        probability: 25,
        rationale: "Surtout chez la femme jeune",
        ruleOutTests: ["Anamn√®se d√©taill√©e", "Calendrier migraineux"]
      },
      {
        condition: "Sinusite",
        probability: 20,
        rationale: "C√©phal√©es + contexte infectieux",
        ruleOutTests: ["Examen ORL", "Scanner sinus si n√©cessaire"]
      }
    ]
    
    if (temperature > 38) {
      differential.push({
        condition: "M√©ningite",
        probability: 10,
        rationale: "C√©phal√©es + fi√®vre - urgence diagnostique",
        ruleOutTests: ["Examen neurologique", "Ponction lombaire si indiqu√©e"]
      })
    }
    
    return buildFallbackResponse(primaryCondition, icd10, confidence, severity, clinicalEvidence, differential, "neurological")
    
  } else if (combinedSymptoms.includes("douleur") && combinedSymptoms.includes("abdomen")) {
    // DOULEUR ABDOMINALE - Approche gastro-ent√©rologique
    primaryCondition = "Douleur abdominale - √† localiser et caract√©riser"
    icd10 = "R10.9"
    confidence = 70
    clinicalEvidence = "Douleur abdominale n√©cessitant localisation et recherche de signes de gravit√©"
    
    const differential = [
      {
        condition: "Gastrite/Ulc√®re gastro-duod√©nal",
        probability: 30,
        rationale: "Cause fr√©quente de douleur √©pigastrique",
        ruleOutTests: ["Fibroscopie", "Recherche H. pylori"]
      },
      {
        condition: "Colique n√©phr√©tique",
        probability: 25,
        rationale: "Douleur lombaire irradiant vers les organes g√©nitaux",
        ruleOutTests: ["Scanner abdominal", "ECBU"]
      },
      {
        condition: "Appendicite",
        probability: 20,
        rationale: "Urgence chirurgicale √† √©liminer",
        ruleOutTests: ["Examen clinique", "√âchographie/Scanner"]
      }
    ]
    
    return buildFallbackResponse(primaryCondition, icd10, confidence, severity, clinicalEvidence, differential, "gastrointestinal")
    
  } else {
    // SYMPT√îMES NON SP√âCIFIQUES
    return buildFallbackResponse(
      "Syndrome clinique non sp√©cifique",
      "R53",
      60,
      "mild",
      "Sympt√¥mes n√©cessitant anamn√®se et examen clinique approfondis",
      [
        {
          condition: "Syndrome viral",
          probability: 40,
          rationale: "Cause fr√©quente de sympt√¥mes non sp√©cifiques",
          ruleOutTests: ["Observation clinique", "Biologie si n√©cessaire"]
        },
        {
          condition: "Troubles fonctionnels",
          probability: 30,
          rationale: "Absence de signes organiques",
          ruleOutTests: ["√âlimination causes organiques"]
        }
      ],
      "general"
    )
  }
}

function buildFallbackResponse(condition: string, icd10: string, confidence: number, severity: string, evidence: string, differential: any[], category: string) {
  return {
    diagnosis: {
      primary: {
        condition: condition,
        icd10: icd10,
        confidence: confidence,
        rationale: `Diagnostic de fallback bas√© sur l'analyse symptomatique: ${evidence}`,
        severity: severity,
        clinicalEvidence: evidence,
      },
      differential: differential,
    },
    recommendations: {
      exams: getExamsForCategory(category),
      medications: getMedicationsForCategory(category),
    },
    clinicalConsiderations: {
      symptomAnalysis: "Analyse bas√©e sur les sympt√¥mes pr√©sent√©s",
      riskFactors: "Facteurs de risque √† √©valuer selon le diagnostic",
      prognosticFactors: "Pronostic d√©pendant de la cause sous-jacente",
      geographicContext: "Contexte tropical consid√©r√© selon pertinence clinique",
      seasonalFactors: "Facteurs saisonniers √©valu√©s si applicable",
    },
    prognosis: "Pronostic g√©n√©ralement favorable avec diagnostic et traitement appropri√©s",
    followUp: "R√©√©valuation selon √©volution clinique et r√©sultats examens",
    urgencyLevel: category === "cardiac" ? 4 : 3,
    redFlags: getRedFlagsForCategory(category),
  }
}

function getExamsForCategory(category: string) {
  switch (category) {
    case "cardiac":
      return [
        {
          name: "ECG",
          code: "ECG001",
          category: "cardiologie",
          indication: "√âlimination syndrome coronarien aigu",
          priority: "high",
        },
        {
          name: "Troponines",
          code: "TROP001",
          category: "biologie",
          indication: "Marqueurs de n√©crose myocardique",
          priority: "high",
        },
      ]
    case "infectious":
      return [
        {
          name: "CRP",
          code: "CRP001",
          category: "biologie",
          indication: "Syndrome inflammatoire",
          priority: "medium",
        },
        {
          name: "H√©mocultures",
          code: "HEMOC001",
          category: "biologie",
          indication: "Recherche bact√©ri√©mie",
          priority: "medium",
        },
      ]
    case "neurological":
      return [
        {
          name: "Examen neurologique",
          code: "NEURO001",
          category: "clinique",
          indication: "Recherche signes neurologiques",
          priority: "high",
        },
      ]
    default:
      return [
        {
          name: "Bilan biologique standard",
          code: "BIO001",
          category: "biologie",
          indication: "√âvaluation g√©n√©rale",
          priority: "medium",
        },
      ]
  }
}

function getMedicationsForCategory(category: string) {
  switch (category) {
    case "cardiac":
      return [
        {
          name: "Aspirine",
          dosage: "75-100mg",
          frequency: "1x/jour",
          duration: "Selon diagnostic",
          indication: "Pr√©vention secondaire si syndrome coronarien",
          contraindications: ["Allergie", "Troubles coagulation"],
        },
      ]
    case "infectious":
      return [
        {
          name: "Parac√©tamol",
          dosage: "1g",
          frequency: "3x/jour",
          duration: "Selon sympt√¥mes",
          indication: "Antipyr√©tique et antalgique",
          contraindications: ["Allergie", "Insuffisance h√©patique"],
        },
      ]
    default:
      return [
        {
          name: "Traitement symptomatique",
          dosage: "Selon sympt√¥mes",
          frequency: "Selon besoin",
          duration: "Selon √©volution",
          indication: "Traitement adapt√© au diagnostic",
          contraindications: ["Selon m√©dicament choisi"],
        },
      ]
  }
}

function getRedFlagsForCategory(category: string) {
  switch (category) {
    case "cardiac":
      return ["Douleur constrictive", "Irradiation bras gauche", "Dyspn√©e", "Sueurs profuses"]
    case "infectious":
      return ["Fi√®vre >39¬∞C", "Alt√©ration √©tat g√©n√©ral", "Signes sepsis", "Purpura"]
    case "neurological":
      return ["C√©phal√©es brutales", "Raideur nuque", "Troubles conscience", "D√©ficit neurologique"]
    default:
      return ["Alt√©ration √©tat g√©n√©ral", "Fi√®vre √©lev√©e", "Douleur intense"]
  }
}
