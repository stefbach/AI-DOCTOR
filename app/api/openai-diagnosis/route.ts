// /app/api/openai-diagnosis/route.ts
import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// Fonction pour nettoyer et parser le JSON depuis la r√©ponse OpenAI
function cleanAndParseJSON(text: string) {
  try {
    // Supprimer les backticks markdown et autres formatages
    let cleanText = text
      .replace(/```json\s*/g, '')
      .replace(/```\s*/g, '')
      .replace(/^[\s\n]*/, '')
      .replace(/[\s\n]*$/, '')
      .trim()

    // Essayer de parser directement
    return JSON.parse(cleanText)
  } catch (firstError) {
    // Essayer de trouver le JSON dans le texte
    try {
      const jsonMatch = text.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
      throw new Error('Aucun JSON trouv√© dans la r√©ponse')
    } catch (secondError) {
      console.error('‚ùå Erreur parsing JSON:', {
        originalText: text.substring(0, 500) + '...',
        firstError: firstError.message,
        secondError: secondError.message
      })
      throw new Error(`Impossible de parser le JSON: ${secondError.message}`)
    }
  }
}

export async function POST(request: NextRequest) {
  try {
    const { patientData, clinicalData, questionsData } = await request.json()

    console.log('ü©∫ G√©n√©ration diagnostic complet OpenAI...')

    // Prompt optimis√© pour OpenAI avec instructions strictes JSON
    const prompt = `Tu es un m√©decin expert. G√©n√®re un diagnostic complet et des documents mauriciens.

DONN√âES PATIENT:
${JSON.stringify(patientData, null, 2)}

DONN√âES CLINIQUES:
${JSON.stringify(clinicalData, null, 2)}

R√âPONSES QUESTIONNAIRE IA:
${JSON.stringify(questionsData, null, 2)}

INSTRUCTIONS CRITIQUES:
1. Ta r√©ponse DOIT √™tre UNIQUEMENT un objet JSON valide
2. AUCUN texte avant ou apr√®s le JSON
3. PAS de backticks, PAS de markdown
4. Respecte EXACTEMENT la structure demand√©e

STRUCTURE JSON OBLIGATOIRE:
{
  "diagnosis": {
    "primary": {
      "condition": "Nom de la pathologie",
      "icd10": "Code CIM-10",
      "confidence": 85,
      "severity": "mild|moderate|severe",
      "detailedAnalysis": "Analyse d√©taill√©e du diagnostic",
      "clinicalRationale": "Justification clinique bas√©e sur les sympt√¥mes",
      "prognosis": "Pronostic et √©volution attendue"
    },
    "differential": [
      {
        "condition": "Diagnostic diff√©rentiel",
        "probability": 40,
        "rationale": "Pourquoi ce diagnostic est possible",
        "distinguishingFeatures": "√âl√©ments qui permettent de distinguer"
      }
    ]
  },
  "mauritianDocuments": {
    "consultation": {
      "header": {
        "title": "COMPTE-RENDU DE CONSULTATION M√âDICALE",
        "subtitle": "R√©publique de Maurice - M√©decine G√©n√©rale",
        "date": "${new Date().toLocaleDateString('fr-FR')}",
        "time": "${new Date().toLocaleTimeString('fr-FR')}",
        "physician": "Dr. ${patientData.physicianName || 'M√âDECIN G√âN√âRALISTE'}",
        "registration": "COUNCIL-${new Date().getFullYear()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}"
      },
      "patient": {
        "firstName": "${patientData.firstName}",
        "lastName": "${patientData.lastName}",
        "age": "${patientData.age} ans",
        "address": "Adresse √† compl√©ter - Maurice",
        "idNumber": "Carte d'identit√© mauricienne √† pr√©ciser",
        "weight": "${patientData.weight}kg",
        "height": "${patientData.height}cm"
      },
      "content": {
        "chiefComplaint": "Motif de consultation bas√© sur les sympt√¥mes",
        "history": "Histoire de la maladie d√©taill√©e",
        "examination": "Examen clinique avec constantes vitales",
        "diagnosis": "Diagnostic retenu",
        "plan": "Plan th√©rapeutique et suivi"
      }
    },
    "biology": {
      "header": {
        "title": "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
        "subtitle": "PRESCRIPTION D'EXAMENS BIOLOGIQUES",
        "date": "${new Date().toLocaleDateString('fr-FR')}",
        "number": "BIO-${Date.now()}-MU",
        "physician": "Dr. ${patientData.physicianName || 'M√âDECIN G√âN√âRALISTE'}",
        "registration": "COUNCIL-${new Date().getFullYear()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}"
      },
      "patient": {
        "firstName": "${patientData.firstName}",
        "lastName": "${patientData.lastName}",
        "age": "${patientData.age} ans",
        "address": "Adresse √† compl√©ter - Maurice",
        "idNumber": "Carte d'identit√© mauricienne √† pr√©ciser"
      },
      "prescriptions": [
        {
          "id": 1,
          "exam": "Nom de l'examen",
          "indication": "Indication clinique",
          "urgency": "Normal|Semi-urgent|Urgent",
          "fasting": "Oui|Non",
          "expectedResults": "R√©sultats attendus",
          "sampleType": "Type d'√©chantillon",
          "contraindications": "Contre-indications"
        }
      ]
    },
    "paraclinical": {
      "header": {
        "title": "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
        "subtitle": "PRESCRIPTION D'EXAMENS PARACLINIQUES",
        "date": "${new Date().toLocaleDateString('fr-FR')}",
        "number": "PARA-${Date.now()}-MU",
        "physician": "Dr. ${patientData.physicianName || 'M√âDECIN G√âN√âRALISTE'}",
        "registration": "COUNCIL-${new Date().getFullYear()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}"
      },
      "patient": {
        "firstName": "${patientData.firstName}",
        "lastName": "${patientData.lastName}",
        "age": "${patientData.age} ans",
        "address": "Adresse √† compl√©ter - Maurice",
        "idNumber": "Carte d'identit√© mauricienne √† pr√©ciser"
      },
      "prescriptions": [
        {
          "id": 1,
          "exam": "Type d'examen",
          "indication": "Indication",
          "urgency": "Normal|Semi-urgent|Urgent",
          "preparation": "Pr√©paration n√©cessaire",
          "contraindications": "Contre-indications",
          "duration": "Dur√©e estim√©e"
        }
      ]
    },
    "medication": {
      "header": {
        "title": "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
        "subtitle": "PRESCRIPTION M√âDICAMENTEUSE",
        "date": "${new Date().toLocaleDateString('fr-FR')}",
        "number": "MED-${Date.now()}-MU",
        "physician": "Dr. ${patientData.physicianName || 'M√âDECIN G√âN√âRALISTE'}",
        "registration": "COUNCIL-${new Date().getFullYear()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}"
      },
      "patient": {
        "firstName": "${patientData.firstName}",
        "lastName": "${patientData.lastName}",
        "age": "${patientData.age} ans",
        "address": "Adresse √† compl√©ter - Maurice",
        "idNumber": "Carte d'identit√© mauricienne √† pr√©ciser",
        "allergies": "${(patientData.allergies || []).join(', ') || 'Aucune'}"
      },
      "prescriptions": [
        {
          "id": 1,
          "dci": "D√©nomination Commune Internationale",
          "brand": "Nom commercial",
          "dosage": "Dosage",
          "frequency": "Fr√©quence",
          "duration": "Dur√©e",
          "indication": "Indication",
          "contraindications": "Contre-indications",
          "monitoring": "Surveillance n√©cessaire",
          "mauritianAvailability": "Disponibilit√© √† Maurice"
        }
      ]
    }
  }
}

R√âPONDS UNIQUEMENT AVEC LE JSON - AUCUN AUTRE TEXTE`

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "Tu es un m√©decin expert. Tu r√©ponds UNIQUEMENT en JSON valide, sans aucun formatage markdown ou texte suppl√©mentaire."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 4000,
    })

    const responseText = completion.choices[0]?.message?.content

    if (!responseText) {
      throw new Error('Aucune r√©ponse re√ßue d\'OpenAI')
    }

    console.log('üìù R√©ponse OpenAI (premiers 200 chars):', responseText.substring(0, 200))

    // Nettoyer et parser le JSON
    const parsedResponse = cleanAndParseJSON(responseText)

    // V√©rifier la structure
    if (!parsedResponse.diagnosis || !parsedResponse.mauritianDocuments) {
      throw new Error('Structure de r√©ponse invalide - manque diagnosis ou mauritianDocuments')
    }

    console.log('‚úÖ Diagnostic IA g√©n√©r√© avec succ√®s')

    return NextResponse.json({
      success: true,
      diagnosis: parsedResponse.diagnosis,
      mauritianDocuments: parsedResponse.mauritianDocuments,
      rawResponse: responseText.substring(0, 200) + '...' // Pour debug
    })

  } catch (error) {
    console.error('‚ùå Erreur Diagnostic IA Complet:', error)

    // Log d√©taill√© pour debug
    if (error instanceof Error) {
      console.error('Message:', error.message)
      console.error('Stack:', error.stack)
    }

    return NextResponse.json(
      {
        error: 'Erreur lors de la g√©n√©ration du diagnostic complet',
        details: error instanceof Error ? error.message : 'Erreur inconnue',
        success: false
      },
      { status: 500 }
    )
  }
}
