import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

export async function POST(request: NextRequest) {
  try {
    console.log("ü©∫ API Diagnostic IA Compl√®te - G√©n√©ration tous documents mauriciens")

    let requestData: {
      patientData?: any
      clinicalData?: any
      questionsData?: any
    }

    try {
      requestData = await request.json()
      console.log("üìù Donn√©es re√ßues pour diagnostic complet")
    } catch (parseError) {
      console.error("‚ùå Erreur parsing JSON:", parseError)
      return NextResponse.json(
        {
          error: "Format JSON invalide",
          success: false,
        },
        { status: 400 },
      )
    }

    const { patientData, clinicalData, questionsData } = requestData

    if (!patientData || !clinicalData) {
      console.log("‚ö†Ô∏è Donn√©es manquantes pour le diagnostic")
      return NextResponse.json(
        {
          error: "Donn√©es patient et cliniques requises",
          success: false,
        },
        { status: 400 },
      )
    }

    console.log(`üîç Diagnostic IA complet pour: ${patientData.firstName} ${patientData.lastName}`)

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // G√âN√âRATION DIAGNOSTIQUE ET DOCUMENTS EN UNE SEULE √âTAPE
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    const patientContext = `
PATIENT: ${patientData.firstName} ${patientData.lastName}, ${patientData.age} ans, ${patientData.gender}
ANTHROPOM√âTRIE: ${patientData.weight}kg, ${patientData.height}cm (IMC: ${calculateBMI(patientData)})
MOTIF: ${clinicalData.chiefComplaint || "Consultation"}
SYMPT√îMES: ${(clinicalData.symptoms || []).join(", ") || "Non sp√©cifi√©s"}
DOULEUR: ${clinicalData.painScale || 0}/10
CONSTANTES: T¬∞${clinicalData.vitalSigns?.temperature}¬∞C, FC ${clinicalData.vitalSigns?.heartRate}bpm, TA ${clinicalData.vitalSigns?.bloodPressureSystolic}/${clinicalData.vitalSigns?.bloodPressureDiastolic}mmHg
ANT√âC√âDENTS: ${(patientData.medicalHistory || []).join(", ") || "Aucun"}
ALLERGIES: ${(patientData.allergies || []).join(", ") || "Aucune"}
TRAITEMENTS: ${patientData.currentMedicationsText || "Aucun"}
ANAMN√àSE: ${questionsData?.responses?.map((r: any) => `${r.question}: ${r.answer}`).join(", ") || "Non r√©alis√©e"}
    `.trim()

    const completePrompt = `
Tu es un m√©decin expert mauricien. G√©n√®re un diagnostic COMPLET avec TOUS les documents m√©dicaux mauriciens modifiables.

${patientContext}

G√âN√àRE EXACTEMENT ce JSON avec TOUTES les sections :

{
  "success": true,
  "diagnosis": {
    "primary": {
      "condition": "Diagnostic principal pr√©cis",
      "icd10": "Code CIM-10",
      "confidence": 85,
      "severity": "mild|moderate|severe",
      "detailedAnalysis": "Analyse approfondie de la pathologie, physiopathologie, pr√©sentation clinique",
      "clinicalRationale": "Raisonnement clinique d√©taill√© sympt√¥me par sympt√¥me",
      "prognosis": "√âvolution attendue d√©taill√©e"
    },
    "differential": [
      {
        "condition": "Diagnostic diff√©rentiel",
        "probability": 25,
        "rationale": "Arguments pour ce diagnostic",
        "distinguishingFeatures": "√âl√©ments distinctifs"
      }
    ]
  },
  "mauritianDocuments": {
    "consultation": {
      "header": {
        "title": "COMPTE-RENDU DE CONSULTATION M√âDICALE",
        "subtitle": "R√©publique de Maurice - M√©decine G√©n√©rale",
        "date": "${new Date().toLocaleDateString("fr-FR")}",
        "time": "${new Date().toLocaleTimeString("fr-FR")}",
        "physician": "Dr. TIBOK IA DOCTOR",
        "registration": "COUNCIL-2024-IA-001"
      },
      "patient": {
        "firstName": "${patientData.firstName}",
        "lastName": "${patientData.lastName}",
        "age": "${patientData.age} ans",
        "address": "Adresse √† compl√©ter - Maurice",
        "idNumber": "Carte d'identit√© mauricienne √† pr√©ciser",
        "weight": "${patientData.weight}kg",
        "height": "${patientData.height}cm"
      },
      "content": {
        "chiefComplaint": "${clinicalData.chiefComplaint || "Motif de consultation √† pr√©ciser"}",
        "history": "Histoire d√©taill√©e de la maladie actuelle avec chronologie, sympt√¥mes associ√©s, facteurs d√©clenchants",
        "examination": "Examen clinique complet : constantes vitales, examen g√©n√©ral, examen orient√© selon sympt√¥mes",
        "diagnosis": "Diagnostic retenu avec argumentaire clinique",
        "plan": "Plan th√©rapeutique d√©taill√©, examens compl√©mentaires, suivi"
      }
    },
    "biology": {
      "header": {
        "title": "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
        "subtitle": "PRESCRIPTION D'EXAMENS BIOLOGIQUES",
        "date": "${new Date().toLocaleDateString("fr-FR")}",
        "number": "BIO-${Date.now()}-MU",
        "physician": "Dr. TIBOK IA DOCTOR",
        "registration": "COUNCIL-2024-IA-001"
      },
      "patient": {
        "firstName": "${patientData.firstName}",
        "lastName": "${patientData.lastName}",
        "age": "${patientData.age} ans",
        "address": "Adresse √† compl√©ter - Maurice",
        "idNumber": "Carte d'identit√© mauricienne √† pr√©ciser"
      },
      "prescriptions": [
        {
          "id": 1,
          "exam": "Examen biologique adapt√© au diagnostic",
          "indication": "Indication m√©dicale pr√©cise",
          "urgency": "Semi-urgent|Urgent|Programm√©",
          "fasting": "Oui|Non",
          "expectedResults": "R√©sultats attendus",
          "sampleType": "Type d'√©chantillon",
          "contraindications": "Contre-indications sp√©cifiques"
        }
      ]
    },
    "paraclinical": {
      "header": {
        "title": "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
        "subtitle": "PRESCRIPTION D'EXAMENS PARACLINIQUES",
        "date": "${new Date().toLocaleDateString("fr-FR")}",
        "number": "PARA-${Date.now()}-MU",
        "physician": "Dr. TIBOK IA DOCTOR",
        "registration": "COUNCIL-2024-IA-001"
      },
      "patient": {
        "firstName": "${patientData.firstName}",
        "lastName": "${patientData.lastName}",
        "age": "${patientData.age} ans",
        "address": "Adresse √† compl√©ter - Maurice",
        "idNumber": "Carte d'identit√© mauricienne √† pr√©ciser"
      },
      "prescriptions": [
        {
          "id": 1,
          "exam": "Examen paraclinique adapt√©",
          "indication": "Indication m√©dicale pr√©cise",
          "urgency": "Semi-urgent|Urgent|Programm√©",
          "preparation": "Pr√©paration n√©cessaire",
          "contraindications": "Contre-indications",
          "duration": "Dur√©e estim√©e"
        }
      ]
    },
    "medication": {
      "header": {
        "title": "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
        "subtitle": "PRESCRIPTION M√âDICAMENTEUSE",
        "date": "${new Date().toLocaleDateString("fr-FR")}",
        "number": "MED-${Date.now()}-MU",
        "physician": "Dr. TIBOK IA DOCTOR",
        "registration": "COUNCIL-2024-IA-001"
      },
      "patient": {
        "firstName": "${patientData.firstName}",
        "lastName": "${patientData.lastName}",
        "age": "${patientData.age} ans",
        "address": "Adresse √† compl√©ter - Maurice",
        "idNumber": "Carte d'identit√© mauricienne √† pr√©ciser",
        "allergies": "${(patientData.allergies || []).join(", ") || "Aucune"}"
      },
      "prescriptions": [
        {
          "id": 1,
          "dci": "DCI m√©dicament",
          "brand": "Marque disponible Maurice",
          "dosage": "Posologie adapt√©e",
          "frequency": "Fr√©quence de prise",
          "duration": "Dur√©e traitement",
          "indication": "Indication th√©rapeutique",
          "contraindications": "Contre-indications patient",
          "monitoring": "Surveillance n√©cessaire",
          "mauritianAvailability": "Disponibilit√© Maurice"
        }
      ]
    }
  },
  "editableFields": {
    "consultation": [
      "patient.address",
      "patient.idNumber", 
      "content.history",
      "content.examination",
      "content.diagnosis",
      "content.plan"
    ],
    "biology": [
      "patient.address",
      "patient.idNumber",
      "prescriptions[].indication",
      "prescriptions[].urgency"
    ],
    "paraclinical": [
      "patient.address", 
      "patient.idNumber",
      "prescriptions[].indication",
      "prescriptions[].urgency"
    ],
    "medication": [
      "patient.address",
      "patient.idNumber",
      "prescriptions[].dosage",
      "prescriptions[].frequency",
      "prescriptions[].duration"
    ]
  },
  "clinicalConsiderations": {
    "symptomAnalysis": "Analyse d√©taill√©e des sympt√¥mes",
    "riskFactors": "Facteurs de risque identifi√©s",
    "prognosticFactors": "√âl√©ments pronostiques",
    "geographicContext": "Sp√©cificit√©s Maurice (climat tropical, pathologies end√©miques)",
    "urgencyLevel": 1-5,
    "redFlags": ["Signes d'alarme √† surveiller"]
  },
  "metadata": {
    "patientAge": ${patientData.age},
    "patientGender": "${patientData.gender}",
    "chiefComplaint": "${clinicalData.chiefComplaint}",
    "aiModel": "gpt-4o",
    "confidence": 85,
    "generatedAt": "${new Date().toISOString()}",
    "location": "Maurice",
    "approach": "complete-mauritian-documents",
    "documentsGenerated": 4,
    "allEditable": true,
    "legallyCompliant": true
  }
}

IMPORTANT: 
- Adapte TOUS les champs au cas clinique sp√©cifique
- Prescris des examens/m√©dicaments PERTINENTS pour le diagnostic
- Respecte la r√©glementation mauricienne
- Tous les documents doivent √™tre coh√©rents entre eux
- Les prescriptions doivent √™tre s√©curis√©es (v√©rification allergies, interactions)
- Utilise les codes CIM-10 appropri√©s
`

    const result = await generateText({
      model: openai("gpt-4o"),
      prompt: completePrompt,
      temperature: 0.2,
      maxTokens: 4000,
    })

    console.log("üß† Diagnostic IA complet avec documents mauriciens g√©n√©r√©")

    // Parsing robuste avec fallback
    let completeData
    try {
      let cleanedText = result.text.trim()
      const jsonMatch = cleanedText.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        cleanedText = jsonMatch[0]
      }

      completeData = JSON.parse(cleanedText)

      if (!completeData.diagnosis || !completeData.mauritianDocuments) {
        throw new Error("Structure incompl√®te")
      }

      console.log(`‚úÖ Diagnostic complet pars√©: ${completeData.diagnosis.primary.condition}`)
    } catch (parseError) {
      console.warn("‚ö†Ô∏è Erreur parsing JSON, g√©n√©ration fallback")
      completeData = generateCompleteFallback(patientData, clinicalData, questionsData, result.text)
    }

    // Structure finale compatible avec l'interface d'√©dition
    const finalResponse = {
      success: true,
      diagnosis: completeData.diagnosis,
      mauritianDocuments: completeData.mauritianDocuments,
      editableFields: completeData.editableFields,
      clinicalConsiderations: completeData.clinicalConsiderations || {},
      metadata: completeData.metadata || {
        patientAge: patientData.age,
        patientGender: patientData.gender,
        generatedAt: new Date().toISOString(),
        documentsGenerated: 4,
        allEditable: true
      },
      rawAiResponse: result.text // Pour debug
    }

    console.log(`‚úÖ Diagnostic IA complet retourn√© avec 4 documents mauriciens modifiables`)
    return NextResponse.json(finalResponse)

  } catch (error: any) {
    console.error("‚ùå Erreur Diagnostic IA Complet:", error)
    return NextResponse.json(
      {
        error: "Erreur lors de la g√©n√©ration du diagnostic complet",
        details: error.message,
        success: false,
        timestamp: new Date().toISOString(),
      },
      { status: 500 },
    )
  }
}

// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// FONCTIONS UTILITAIRES
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

function calculateBMI(patientData: any): string {
  if (patientData?.weight && patientData?.height) {
    const bmi = patientData.weight / Math.pow(patientData.height / 100, 2)
    return bmi.toFixed(1)
  }
  return "N/A"
}

function generateCompleteFallback(patientData: any, clinicalData: any, questionsData: any, aiText: string) {
  const symptoms = clinicalData.symptoms?.join(", ").toLowerCase() || ""
  const chiefComplaint = clinicalData.chiefComplaint?.toLowerCase() || ""
  
  return {
    success: true,
    diagnosis: {
      primary: {
        condition: determineFallbackDiagnosis(symptoms, chiefComplaint),
        icd10: "R53",
        confidence: 70,
        severity: "moderate",
        detailedAnalysis: "Analyse bas√©e sur les sympt√¥mes pr√©sent√©s n√©cessitant exploration compl√©mentaire",
        clinicalRationale: `Sympt√¥mes: ${chiefComplaint}. N√©cessite anamn√®se et examen clinique approfondis`,
        prognosis: "√âvolution favorable attendue avec prise en charge appropri√©e"
      },
      differential: [
        {
          condition: "Syndrome viral",
          probability: 40,
          rationale: "Cause fr√©quente de sympt√¥mes non sp√©cifiques",
          distinguishingFeatures: "√âvolution spontan√©ment favorable"
        },
        {
          condition: "Troubles fonctionnels",
          probability: 30,
          rationale: "Absence de signes organiques √©vidents",
          distinguishingFeatures: "Examens compl√©mentaires normaux"
        }
      ]
    },
    mauritianDocuments: {
      consultation: {
        header: {
          title: "COMPTE-RENDU DE CONSULTATION M√âDICALE",
          subtitle: "R√©publique de Maurice - M√©decine G√©n√©rale",
          date: new Date().toLocaleDateString("fr-FR"),
          time: new Date().toLocaleTimeString("fr-FR"),
          physician: "Dr. TIBOK IA DOCTOR",
          registration: "COUNCIL-2024-IA-001"
        },
        patient: {
          firstName: patientData.firstName,
          lastName: patientData.lastName,
          age: `${patientData.age} ans`,
          address: "Adresse √† compl√©ter - Maurice",
          idNumber: "Carte d'identit√© mauricienne √† pr√©ciser",
          weight: `${patientData.weight}kg`,
          height: `${patientData.height}cm`
        },
        content: {
          chiefComplaint: clinicalData.chiefComplaint || "Motif de consultation √† pr√©ciser",
          history: `Patient de ${patientData.age} ans consultant pour ${clinicalData.chiefComplaint || "sympt√¥mes"}. √âvolution depuis ${clinicalData.symptomDuration || "dur√©e non pr√©cis√©e"}. ${symptoms || "Sympt√¥mes √† d√©tailler"}. Retentissement fonctionnel √† √©valuer.`,
          examination: `Constantes: TA ${clinicalData.vitalSigns?.bloodPressureSystolic || "?"}/${clinicalData.vitalSigns?.bloodPressureDiastolic || "?"}mmHg, FC ${clinicalData.vitalSigns?.heartRate || "?"}bpm, T¬∞ ${clinicalData.vitalSigns?.temperature || "?"}¬∞C. Douleur ${clinicalData.painScale || 0}/10. Examen g√©n√©ral: √©tat g√©n√©ral ${patientData.age < 65 ? "conserv√©" : "√† pr√©ciser"}. Examen orient√© selon sympt√¥mes √† compl√©ter.`,
          diagnosis: determineFallbackDiagnosis(symptoms, chiefComplaint),
          plan: "Traitement symptomatique adapt√©. Examens compl√©mentaires si n√©cessaire. R√©√©valuation programm√©e selon √©volution. Conseils hygi√©no-di√©t√©tiques."
        }
      },
      biology: {
        header: {
          title: "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
          subtitle: "PRESCRIPTION D'EXAMENS BIOLOGIQUES",
          date: new Date().toLocaleDateString("fr-FR"),
          number: `BIO-${Date.now()}-MU`,
          physician: "Dr. TIBOK IA DOCTOR",
          registration: "COUNCIL-2024-IA-001"
        },
        patient: {
          firstName: patientData.firstName,
          lastName: patientData.lastName,
          age: `${patientData.age} ans`,
          address: "Adresse √† compl√©ter - Maurice",
          idNumber: "Carte d'identit√© mauricienne √† pr√©ciser"
        },
        prescriptions: generateFallbackBiologyExams(symptoms, chiefComplaint, clinicalData)
      },
      paraclinical: {
        header: {
          title: "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
          subtitle: "PRESCRIPTION D'EXAMENS PARACLINIQUES",
          date: new Date().toLocaleDateString("fr-FR"),
          number: `PARA-${Date.now()}-MU`,
          physician: "Dr. TIBOK IA DOCTOR",
          registration: "COUNCIL-2024-IA-001"
        },
        patient: {
          firstName: patientData.firstName,
          lastName: patientData.lastName,
          age: `${patientData.age} ans`,
          address: "Adresse √† compl√©ter - Maurice",
          idNumber: "Carte d'identit√© mauricienne √† pr√©ciser"
        },
        prescriptions: generateFallbackParaclinicalExams(symptoms, chiefComplaint, clinicalData)
      },
      medication: {
        header: {
          title: "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
          subtitle: "PRESCRIPTION M√âDICAMENTEUSE",
          date: new Date().toLocaleDateString("fr-FR"),
          number: `MED-${Date.now()}-MU`,
          physician: "Dr. TIBOK IA DOCTOR",
          registration: "COUNCIL-2024-IA-001"
        },
        patient: {
          firstName: patientData.firstName,
          lastName: patientData.lastName,
          age: `${patientData.age} ans`,
          address: "Adresse √† compl√©ter - Maurice",
          idNumber: "Carte d'identit√© mauricienne √† pr√©ciser",
          allergies: (patientData.allergies || []).join(", ") || "Aucune"
        },
        prescriptions: generateFallbackMedications(symptoms, chiefComplaint, patientData, clinicalData)
      }
    },
    editableFields: {
      consultation: [
        "patient.address",
        "patient.idNumber",
        "content.history",
        "content.examination",
        "content.diagnosis",
        "content.plan"
      ],
      biology: [
        "patient.address",
        "patient.idNumber",
        "prescriptions[].indication",
        "prescriptions[].urgency"
      ],
      paraclinical: [
        "patient.address",
        "patient.idNumber",
        "prescriptions[].indication",
        "prescriptions[].urgency"
      ],
      medication: [
        "patient.address",
        "patient.idNumber",
        "prescriptions[].dosage",
        "prescriptions[].frequency",
        "prescriptions[].duration"
      ]
    },
    clinicalConsiderations: {
      symptomAnalysis: `Sympt√¥mes principaux: ${chiefComplaint}. N√©cessite √©valuation approfondie.`,
      riskFactors: `√Çge: ${patientData.age} ans. Ant√©c√©dents: ${(patientData.medicalHistory || []).join(", ") || "Aucun"}`,
      prognosticFactors: "Pronostic g√©n√©ralement favorable avec prise en charge adapt√©e",
      geographicContext: "Contexte tropical mauricien - Attention pathologies end√©miques",
      urgencyLevel: 2,
      redFlags: ["Aggravation des sympt√¥mes", "Fi√®vre persistante", "Alt√©ration √©tat g√©n√©ral"]
    },
    metadata: {
      patientAge: patientData.age,
      patientGender: patientData.gender,
      chiefComplaint: clinicalData.chiefComplaint,
      aiModel: "gpt-4o-fallback",
      confidence: 70,
      generatedAt: new Date().toISOString(),
      location: "Maurice",
      approach: "fallback-complete-documents",
      documentsGenerated: 4,
      allEditable: true,
      legallyCompliant: true
    }
  }
}

function determineFallbackDiagnosis(symptoms: string, chiefComplaint: string): string {
  const combined = `${symptoms} ${chiefComplaint}`.toLowerCase()
  
  if (combined.includes("douleur") && combined.includes("thorax")) {
    return "Douleur thoracique - √† pr√©ciser (cardiaque vs non cardiaque)"
  }
  if (combined.includes("fi√®vre") || combined.includes("temp√©rature")) {
    return "Syndrome f√©brile - origine √† d√©terminer"
  }
  if (combined.includes("c√©phal") || combined.includes("t√™te")) {
    return "C√©phal√©es - √† caract√©riser"
  }
  if (combined.includes("douleur") && combined.includes("abdomen")) {
    return "Douleur abdominale - √† localiser et caract√©riser"
  }
  if (combined.includes("toux") || combined.includes("respiratoire")) {
    return "Syndrome respiratoire - √† explorer"
  }
  
  return "Syndrome clinique √† pr√©ciser - √©valuation en cours"
}

function generateFallbackBiologyExams(symptoms: string, chiefComplaint: string, clinicalData: any) {
  const combined = `${symptoms} ${chiefComplaint}`.toLowerCase()
  const exams = []
  
  // Bilan de base
  exams.push({
    id: 1,
    exam: "NFS + Plaquettes",
    indication: "Bilan h√©matologique de base",
    urgency: "Semi-urgent",
    fasting: "Non",
    expectedResults: "Recherche an√©mie, infection, troubles h√©matologiques",
    sampleType: "Sang veineux",
    contraindications: "Aucune"
  })
  
  exams.push({
    id: 2,
    exam: "CRP + VS",
    indication: "Syndrome inflammatoire",
    urgency: "Semi-urgent",
    fasting: "Non",
    expectedResults: "√âl√©vation si processus inflammatoire",
    sampleType: "Sang veineux",
    contraindications: "Aucune"
  })
  
  // Examens sp√©cifiques selon sympt√¥mes
  if (combined.includes("douleur") && combined.includes("thorax")) {
    exams.push({
      id: 3,
      exam: "Troponines + CK-MB",
      indication: "Marqueurs cardiaques - √©limination syndrome coronarien",
      urgency: "Urgent",
      fasting: "Non",
      expectedResults: "Normaux si pas de n√©crose myocardique",
      sampleType: "Sang veineux",
      contraindications: "Aucune"
    })
  }
  
  if (combined.includes("fi√®vre") || (clinicalData.vitalSigns?.temperature && clinicalData.vitalSigns.temperature > 37.5)) {
    exams.push({
      id: exams.length + 1,
      exam: "H√©mocultures x2",
      indication: "Recherche bact√©ri√©mie",
      urgency: "Urgent",
      fasting: "Non",
      expectedResults: "Identification germe si bact√©ri√©mie",
      sampleType: "Sang veineux",
      contraindications: "Aucune"
    })
  }
  
  return exams
}

function generateFallbackParaclinicalExams(symptoms: string, chiefComplaint: string, clinicalData: any) {
  const combined = `${symptoms} ${chiefComplaint}`.toLowerCase()
  const exams = []
  
  if (combined.includes("douleur") && combined.includes("thorax")) {
    exams.push({
      id: 1,
      exam: "ECG",
      indication: "√âlimination trouble rythme/conduction, isch√©mie",
      urgency: "Urgent",
      preparation: "Repos 10 minutes, d√©shabillage thorax",
      contraindications: "Aucune",
      duration: "5 minutes"
    })
    
    exams.push({
      id: 2,
      exam: "Radiographie thoracique face",
      indication: "√âlimination pathologie pulmonaire/cardiaque",
      urgency: "Semi-urgent",
      preparation: "Retirer objets m√©talliques",
      contraindications: "Grossesse (protection)",
      duration: "5 minutes"
    })
  }
  
  if (combined.includes("c√©phal") || combined.includes("t√™te")) {
    exams.push({
      id: exams.length + 1,
      exam: "Scanner c√©r√©bral sans injection",
      indication: "√âlimination l√©sion intracr√¢nienne",
      urgency: "Selon contexte",
      preparation: "Aucune",
      contraindications: "Grossesse sans indication vitale",
      duration: "10 minutes"
    })
  }
  
  if (combined.includes("abdomen") || combined.includes("digestif")) {
    exams.push({
      id: exams.length + 1,
      exam: "√âchographie abdominale",
      indication: "Exploration douleur abdominale",
      urgency: "Semi-urgent",
      preparation: "√Ä jeun 6 heures",
      contraindications: "Aucune",
      duration: "20 minutes"
    })
  }
  
  return exams
}

function generateFallbackMedications(symptoms: string, chiefComplaint: string, patientData: any, clinicalData: any) {
  const combined = `${symptoms} ${chiefComplaint}`.toLowerCase()
  const medications = []
  const allergies = (patientData.allergies || []).map((a: string) => a.toLowerCase())
  
  // Traitement symptomatique de base
  if (!allergies.includes("parac√©tamol")) {
    medications.push({
      id: 1,
      dci: "Parac√©tamol",
      brand: "Doliprane / Efferalgan",
      dosage: patientData.age >= 65 ? "500mg" : "1g",
      frequency: "3 fois par jour si n√©cessaire",
      duration: "5 jours maximum",
      indication: "Traitement symptomatique douleur/fi√®vre",
      contraindications: allergies.includes("parac√©tamol") ? "ALLERGIE PATIENT" : "Insuffisance h√©patique s√©v√®re",
      monitoring: "Surveillance h√©patique si traitement prolong√©",
      mauritianAvailability: "Disponible toutes pharmacies Maurice"
    })
  }
  
  // Traitements sp√©cifiques selon sympt√¥mes
  if (combined.includes("douleur") && !allergies.includes("ibuprof√®ne") && patientData.age < 65) {
    medications.push({
      id: 2,
      dci: "Ibuprof√®ne",
      brand: "Advil / Brufen",
      dosage: "400mg",
      frequency: "2 fois par jour pendant les repas",
      duration: "3 jours maximum",
      indication: "Anti-inflammatoire pour douleur",
      contraindications: allergies.includes("ibuprof√®ne") ? "ALLERGIE PATIENT" : "Ulc√®re gastro-duod√©nal, insuffisance r√©nale",
      monitoring: "Surveillance digestive et r√©nale",
      mauritianAvailability: "Disponible pharmacies Maurice"
    })
  }
  
  if (combined.includes("toux")) {
    medications.push({
      id: medications.length + 1,
      dci: "Sirop simple",
      brand: "Sirop antitussif",
      dosage: "15ml",
      frequency: "3 fois par jour",
      duration: "7 jours",
      indication: "Toux s√®che irritative",
      contraindications: "Aucune connue",
      monitoring: "Efficacit√© clinique",
      mauritianAvailability: "Disponible pharmacies Maurice"
    })
  }
  
  return medications
}
