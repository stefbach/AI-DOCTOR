import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

export async function POST(request: NextRequest) {
  try {
    console.log("üîç API DIAGNOSTIC IA - D√©but de l'analyse")

    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        {
          error: "Cl√© API OpenAI manquante",
          success: false,
        },
        { status: 500 },
      )
    }

    const requestData = await request.json()
    console.log("üìù Donn√©es re√ßues:", {
      hasPatient: !!requestData.patientData,
      hasClinical: !!requestData.clinicalData,
      hasQuestions: !!requestData.questionsData,
    })

    const { patientData, clinicalData, questionsData } = requestData

    // Validation des donn√©es minimales
    if (!patientData && !clinicalData) {
      return NextResponse.json(
        {
          error: "Donn√©es patient ou cliniques requises",
          success: false,
        },
        { status: 400 },
      )
    }

    // Construction du prompt de diagnostic
    const diagnosticPrompt = createDiagnosticPrompt(patientData, clinicalData, questionsData)

    console.log("üß† G√©n√©ration du diagnostic avec OpenAI...")
    const result = await generateText({
      model: openai("gpt-4o"),
      prompt: diagnosticPrompt,
      system: `Vous √™tes un m√©decin expert sp√©cialis√© en diagnostic m√©dical avec une expertise approfondie en m√©decine interne, urgences et m√©decine tropicale.
  
  INSTRUCTIONS D√âTAILL√âES:
  - Analysez m√©ticuleusement TOUTES les donn√©es fournies (anamn√®se, examen clinique, questionnaire)
  - Proposez un diagnostic principal avec niveau de confiance bas√© sur l'evidence-based medicine
  - D√©veloppez un raisonnement diagnostique structur√© et d√©taill√©
  - Listez les diagnostics diff√©rentiels avec probabilit√©s et justifications
  - Recommandez des examens compl√©mentaires sp√©cifiques et justifi√©s
  - Sugg√©rez un plan th√©rapeutique d√©taill√© avec posologies et dur√©es
  - Identifiez les facteurs de risque et les complications potentielles
  - Proposez un plan de surveillance adapt√©
  - Int√©grez les sp√©cificit√©s li√©es √† l'√¢ge, au sexe et aux ant√©c√©dents
  - R√©pondez UNIQUEMENT en JSON valide avec un maximum de d√©tails cliniques
  - Soyez pr√©cis, professionnel et bas√© sur les guidelines internationales`,
      temperature: 0.1, // Plus d√©terministe pour la pr√©cision diagnostique
      maxTokens: 12000, // Consid√©rablement augment√© pour des diagnostics tr√®s d√©taill√©s
    })

    let diagnosticData
    try {
      // Nettoyage de la r√©ponse
      let cleanResponse = result.text.trim()
      cleanResponse = cleanResponse.replace(/```json\n?|\n?```/g, "")

      const firstBrace = cleanResponse.indexOf("{")
      const lastBrace = cleanResponse.lastIndexOf("}")

      if (firstBrace >= 0 && lastBrace > firstBrace) {
        cleanResponse = cleanResponse.substring(firstBrace, lastBrace + 1)
      }

      diagnosticData = JSON.parse(cleanResponse)
      console.log("‚úÖ Diagnostic pars√© avec succ√®s")
    } catch (parseError) {
      console.error("‚ùå Erreur parsing:", parseError)
      console.log("R√©ponse brute:", result.text)

      // Fallback avec diagnostic de base
      diagnosticData = generateFallbackDiagnosis(patientData, clinicalData, questionsData)
    }

    // Structuration de la r√©ponse
    const response = {
      success: true,
      timestamp: new Date().toISOString(),

      // Diagnostic principal
      primaryDiagnosis: {
        condition: diagnosticData.primaryDiagnosis?.condition || "Syndrome clinique n√©cessitant √©valuation",
        confidence: diagnosticData.primaryDiagnosis?.confidence || 70,
        reasoning: diagnosticData.primaryDiagnosis?.reasoning || "Bas√© sur les donn√©es cliniques disponibles",
        supportingEvidence: diagnosticData.primaryDiagnosis?.supportingEvidence || [],
        contradictingEvidence: diagnosticData.primaryDiagnosis?.contradictingEvidence || [],
        nextSteps: diagnosticData.primaryDiagnosis?.nextSteps || ["Examens compl√©mentaires"],
      },

      // Diagnostics diff√©rentiels
      differentialDiagnoses: diagnosticData.differentialDiagnoses || [],

      // Recommandations
      recommendedTests: diagnosticData.recommendedTests || ["Bilan biologique de base"],
      treatmentSuggestions: diagnosticData.treatmentSuggestions || ["Traitement symptomatique"],

      // Suivi
      followUpPlan: diagnosticData.followUpPlan || "R√©√©valuation clinique recommand√©e",
      riskFactors: diagnosticData.riskFactors || [],
      prognosisNotes: diagnosticData.prognosisNotes || "Pronostic √† d√©terminer",

      // M√©tadonn√©es
      confidence: diagnosticData.confidence || diagnosticData.primaryDiagnosis?.confidence || 70,

      metadata: {
        generatedAt: new Date().toISOString(),
        model: "gpt-4o",
        dataCompleteness: calculateDataCompleteness(patientData, clinicalData, questionsData),
      },
    }

    console.log("‚úÖ Diagnostic g√©n√©r√© avec succ√®s")
    return NextResponse.json(response)
  } catch (error: any) {
    console.error("‚ùå Erreur API Diagnostic:", error)

    return NextResponse.json(
      {
        success: false,
        error: "Erreur lors de la g√©n√©ration du diagnostic",
        details: error.message,
        timestamp: new Date().toISOString(),
      },
      { status: 500 },
    )
  }
}

function createDiagnosticPrompt(patientData: any, clinicalData: any, questionsData: any): string {
  return `
ANALYSE DIAGNOSTIQUE M√âDICALE

=== DONN√âES PATIENT ===
${JSON.stringify(patientData, null, 2)}

=== DONN√âES CLINIQUES ===
${JSON.stringify(clinicalData, null, 2)}

=== R√âPONSES QUESTIONNAIRE ===
${JSON.stringify(questionsData, null, 2)}

=== MISSION DIAGNOSTIQUE ===

Analysez ces donn√©es m√©dicales et fournissez un diagnostic complet.

R√âPONDEZ UNIQUEMENT AVEC CE FORMAT JSON √âTENDU:
{
  "primaryDiagnosis": {
    "condition": "Nom pr√©cis du diagnostic principal avec code CIM-10 si applicable",
    "confidence": 85,
    "reasoning": "Raisonnement diagnostique d√©taill√© √©tape par √©tape avec analyse des signes cliniques",
    "supportingEvidence": [
      "√âl√©ment clinique supportant 1 avec justification physiopathologique",
      "√âl√©ment clinique supportant 2 avec corr√©lation s√©miologique",
      "√âl√©ment anamnestique pertinent avec contexte clinique"
    ],
    "contradictingEvidence": [
      "√âl√©ment contre le diagnostic avec explication de l'√©cart"
    ],
    "nextSteps": [
      "Examen compl√©mentaire prioritaire avec justification",
      "Surveillance clinique sp√©cifique avec crit√®res",
      "Consultation sp√©cialis√©e si n√©cessaire avec d√©lai"
    ],
    "severity": "mild|moderate|severe|critical",
    "prognosis": "Pronostic d√©taill√© √† court et moyen terme",
    "complications": ["Complication potentielle 1", "Complication potentielle 2"],
    "pathophysiology": "Explication physiopathologique concise"
  },
  "differentialDiagnoses": [
    {
      "condition": "Diagnostic diff√©rentiel 1 avec code CIM-10",
      "probability": 60,
      "reasoning": "Justification d√©taill√©e avec analyse comparative",
      "investigationNeeded": "Examens sp√©cifiques pour confirmer/infirmer avec seuils d√©cisionnels",
      "clinicalPearls": "Points cl√©s diagnostiques et pi√®ges √† √©viter"
    }
  ],
  "recommendedTests": [
    {
      "test": "Nom de l'examen",
      "indication": "Justification m√©dicale pr√©cise",
      "priority": "urgent|high|medium|low",
      "expectedResults": "R√©sultats attendus selon l'hypoth√®se diagnostique",
      "interpretation": "Comment interpr√©ter les r√©sultats"
    }
  ],
  "treatmentSuggestions": [
    {
      "medication": "Nom du m√©dicament",
      "dosage": "Posologie pr√©cise",
      "duration": "Dur√©e avec justification",
      "indication": "Justification th√©rapeutique",
      "contraindications": ["Contre-indication 1", "Contre-indication 2"],
      "monitoring": "Surveillance n√©cessaire",
      "alternatives": "Alternatives th√©rapeutiques si √©chec"
    }
  ],
  "followUpPlan": {
    "shortTerm": "Plan de suivi √† 24-48h avec crit√®res de r√©√©valuation",
    "mediumTerm": "Suivi √† 1-2 semaines avec objectifs th√©rapeutiques",
    "longTerm": "Surveillance √† long terme et pr√©vention",
    "redFlags": ["Signal d'alarme 1", "Signal d'alarme 2"],
    "patientEducation": "Points cl√©s d'√©ducation th√©rapeutique"
  },
  "riskFactors": [
    {
      "factor": "Facteur de risque identifi√©",
      "impact": "Impact sur le pronostic",
      "management": "Prise en charge sp√©cifique"
    }
  ],
  "prognosisNotes": "Analyse pronostique d√©taill√©e avec facteurs influen√ßant l'√©volution",
  "confidence": 85,
  "evidenceLevel": "Niveau de preuve des recommandations (A, B, C)",
  "guidelines": ["R√©f√©rence guideline 1", "R√©f√©rence guideline 1"],
  "specialConsiderations": {
    "age": "Consid√©rations sp√©cifiques √† l'√¢ge",
    "gender": "Consid√©rations li√©es au sexe",
    "comorbidities": "Impact des comorbidit√©s",
    "drugInteractions": "Interactions m√©dicamenteuses potentielles"
  }
}

EXIGENCES:
- Analysez TOUTES les donn√©es fournies
- Soyez pr√©cis et professionnel
- Basez-vous sur des connaissances m√©dicales √©tablies
- Adaptez le niveau de confiance selon la qualit√© des donn√©es
- R√©pondez UNIQUEMENT en JSON valide
`
}

function generateFallbackDiagnosis(patientData: any, clinicalData: any, questionsData: any) {
  const chiefComplaint = clinicalData?.chiefComplaint || "Sympt√¥mes non sp√©cifi√©s"
  const age = patientData?.age || 0

  let primaryCondition = "Syndrome clinique n√©cessitant √©valuation m√©dicale"
  let confidence = 60

  // Diagnostic bas√© sur le motif de consultation
  if (chiefComplaint.toLowerCase().includes("douleur")) {
    primaryCondition = "Syndrome douloureux - √©valuation n√©cessaire"
    confidence = 65
  } else if (chiefComplaint.toLowerCase().includes("fi√®vre")) {
    primaryCondition = "Syndrome f√©brile"
    confidence = 70
  } else if (chiefComplaint.toLowerCase().includes("fatigue")) {
    primaryCondition = "Syndrome asth√©nique"
    confidence = 60
  }

  return {
    primaryDiagnosis: {
      condition: primaryCondition,
      confidence: confidence,
      reasoning: `Analyse bas√©e sur le motif de consultation: "${chiefComplaint}". √âvaluation m√©dicale compl√®te recommand√©e.`,
      supportingEvidence: [
        `Motif de consultation: ${chiefComplaint}`,
        `Patient de ${age} ans`,
        "Donn√©es cliniques collect√©es",
      ],
      contradictingEvidence: [],
      nextSteps: ["Examen clinique complet", "Examens compl√©mentaires selon orientation", "R√©√©valuation clinique"],
    },
    differentialDiagnoses: [
      {
        condition: "Pathologie organique sp√©cifique",
        probability: 50,
        reasoning: "√Ä explorer selon les sympt√¥mes pr√©sent√©s",
        investigationNeeded: "Examens biologiques et imagerie orient√©s",
      },
      {
        condition: "Pathologie fonctionnelle",
        probability: 40,
        reasoning: "En l'absence d'√©l√©ments organiques √©vidents",
        investigationNeeded: "√âvaluation psychosomatique",
      },
    ],
    recommendedTests: [
      "Bilan biologique standard (NFS, CRP, ionogramme)",
      "Examens d'imagerie selon orientation clinique",
      "Consultations sp√©cialis√©es si n√©cessaire",
    ],
    treatmentSuggestions: [
      "Traitement symptomatique adapt√©",
      "Mesures g√©n√©rales (repos, hydratation)",
      "Surveillance √©volution clinique",
    ],
    followUpPlan: "R√©√©valuation clinique dans 48-72h ou selon √©volution des sympt√¥mes",
    riskFactors: [],
    prognosisNotes: "Pronostic √† d√©terminer apr√®s √©valuation m√©dicale compl√®te",
    confidence: confidence,
  }
}

function calculateDataCompleteness(patientData: any, clinicalData: any, questionsData: any): number {
  let score = 0
  let maxScore = 0

  // Donn√©es patient (30%)
  maxScore += 30
  if (patientData?.age) score += 10
  if (patientData?.gender) score += 5
  if (patientData?.medicalHistory?.length > 0) score += 10
  if (patientData?.currentMedications?.length > 0) score += 5

  // Donn√©es cliniques (50%)
  maxScore += 50
  if (clinicalData?.chiefComplaint) score += 20
  if (clinicalData?.symptoms?.length > 0) score += 15
  if (clinicalData?.vitalSigns) score += 10
  if (clinicalData?.symptomDuration) score += 5

  // Questions (20%)
  maxScore += 20
  if (questionsData?.responses?.length > 0) score += 20

  return Math.round((score / maxScore) * 100)
}
