// /app/api/openai-diagnosis/route.ts
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  console.log('üî• API ROUTE ACCESSIBLE - D√âBUT')
  
  try {
    console.log('üî• Parsing body...')
    const body = await request.json()
    const { patientData, clinicalData, questionsData } = body
    
    console.log('üî• Donn√©es re√ßues:', {
      patient: patientData?.firstName,
      clinical: clinicalData?.chiefComplaint
    })
    
    console.log('üî• V√©rification API Key...')
    const apiKey = process.env.OPENAI_API_KEY
    console.log('üî• API Key pr√©sente:', !!apiKey)
    
    if (!apiKey) {
      throw new Error('OPENAI_API_KEY manquante dans .env.local')
    }
    
    // Pr√©paration donn√©es patient
    const patientName = `${patientData?.firstName || 'Patient'} ${patientData?.lastName || 'X'}`
    const age = patientData?.age || 30
    const complaint = clinicalData?.chiefComplaint || 'Consultation m√©dicale'
    const symptoms = (clinicalData?.symptoms || []).join(', ') || 'Non pr√©cis√©s'
    
    console.log('üî• Appel OpenAI API REST directement...')
    
    const prompt = `Tu es un m√©decin expert mauricien. Analyse ce cas clinique:

PATIENT: ${patientName}, ${age} ans
MOTIF: ${complaint}
SYMPT√îMES: ${symptoms}

G√©n√®re un diagnostic expert avec documents mauriciens.

R√âPONDS UNIQUEMENT EN JSON VALIDE SANS MARKDOWN:

{
  "diagnosis": {
    "primary": {
      "condition": "Diagnostic m√©dical pr√©cis",
      "icd10": "Code CIM-10",
      "confidence": 85,
      "severity": "moderate",
      "detailedAnalysis": "Analyse m√©dicale d√©taill√©e du cas clinique",
      "clinicalRationale": "Raisonnement clinique justifiant ce diagnostic",
      "prognosis": "√âvolution pronostique avec traitement"
    },
    "differential": [
      {
        "condition": "Premier diagnostic diff√©rentiel",
        "probability": 60,
        "rationale": "Arguments cliniques pour ce diagnostic"
      }
    ]
  },
  "mauritianDocuments": {
    "consultation": {
      "header": {
        "title": "COMPTE-RENDU DE CONSULTATION M√âDICALE",
        "subtitle": "R√©publique de Maurice - M√©decine G√©n√©rale",
        "date": "${new Date().toLocaleDateString('fr-FR')}",
        "physician": "Dr. M√âDECIN G√âN√âRALISTE"
      },
      "patient": {
        "firstName": "${patientData?.firstName || 'Patient'}",
        "lastName": "${patientData?.lastName || 'X'}",
        "age": "${age} ans"
      },
      "content": {
        "chiefComplaint": "Motif d√©taill√© de la consultation",
        "history": "Anamn√®se compl√®te avec histoire de la maladie",
        "examination": "Examen physique avec constantes vitales",
        "diagnosis": "Diagnostic m√©dical retenu",
        "plan": "Plan th√©rapeutique et de surveillance"
      }
    },
    "biology": {
      "header": {
        "title": "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
        "subtitle": "PRESCRIPTION D'EXAMENS BIOLOGIQUES"
      },
      "prescriptions": [
        {
          "exam": "NFS + CRP + VS",
          "indication": "Bilan inflammatoire et h√©matologique",
          "urgency": "Semi-urgent",
          "fasting": "Non"
        }
      ]
    },
    "paraclinical": {
      "header": {
        "title": "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
        "subtitle": "PRESCRIPTION D'EXAMENS PARACLINIQUES"
      },
      "prescriptions": [
        {
          "exam": "Radiographie thoracique de face",
          "indication": "Exploration thoraco-pulmonaire",
          "urgency": "Programm√©"
        }
      ]
    },
    "medication": {
      "header": {
        "title": "R√âPUBLIQUE DE MAURICE - ORDONNANCE M√âDICALE",
        "subtitle": "PRESCRIPTION M√âDICAMENTEUSE"
      },
      "prescriptions": [
        {
          "dci": "Parac√©tamol",
          "dosage": "1000mg",
          "frequency": "3 fois par jour si douleur",
          "duration": "5 jours maximum",
          "indication": "Traitement symptomatique antalgique"
        }
      ]
    }
  }
}`
    
    // APPEL DIRECT √Ä L'API REST OPENAI (sans SDK)
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: 'Tu es un m√©decin expert mauricien. R√©ponds UNIQUEMENT en JSON valide.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3,
        max_tokens: 2500,
      }),
    })
    
    console.log('üî• R√©ponse OpenAI re√ßue, status:', openaiResponse.status)
    
    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text()
      console.error('‚ùå Erreur OpenAI API:', errorText)
      throw new Error(`OpenAI API Error ${openaiResponse.status}: ${errorText}`)
    }
    
    const openaiData = await openaiResponse.json()
    const responseText = openaiData.choices[0]?.message?.content
    
    if (!responseText) {
      throw new Error('R√©ponse OpenAI vide')
    }
    
    console.log('üî• OpenAI a r√©pondu, parsing JSON...')
    console.log('üî• Longueur r√©ponse:', responseText.length)
    console.log('üî• D√©but r√©ponse:', responseText.substring(0, 100))
    
    // Parse JSON robuste
    let parsedResponse
    try {
      // Nettoyer le JSON de tout markdown ou formatage
      const cleanText = responseText
        .replace(/```json\s*/g, '')
        .replace(/```\s*/g, '')
        .replace(/^[\s\n]*/, '')
        .replace(/[\s\n]*$/, '')
        .trim()
      
      parsedResponse = JSON.parse(cleanText)
    } catch (parseError) {
      console.error('‚ùå Erreur parsing JSON:', parseError)
      console.error('‚ùå Texte √† parser:', responseText.substring(0, 500))
      
      // Tentative de r√©cup√©ration du JSON dans le texte
      try {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/)
        if (jsonMatch) {
          parsedResponse = JSON.parse(jsonMatch[0])
          console.log('üî• JSON r√©cup√©r√© avec regex')
        } else {
          throw new Error('Aucun JSON trouv√© dans la r√©ponse')
        }
      } catch (regexError) {
        throw new Error(`JSON invalide: ${parseError.message}`)
      }
    }
    
    // V√©rification structure
    if (!parsedResponse.diagnosis || !parsedResponse.mauritianDocuments) {
      console.error('‚ùå Structure invalide:', Object.keys(parsedResponse))
      throw new Error('Structure JSON incompl√®te')
    }
    
    // Post-traitement des placeholders (interpolation c√¥t√© serveur)
    const docs = parsedResponse.mauritianDocuments
    const currentDate = new Date().toLocaleDateString('fr-FR')
    
    // Mise √† jour des donn√©es r√©elles
    if (docs.consultation?.header) {
      docs.consultation.header.date = currentDate
    }
    if (docs.consultation?.patient) {
      docs.consultation.patient.firstName = patientData?.firstName || 'Patient'
      docs.consultation.patient.lastName = patientData?.lastName || 'X'
      docs.consultation.patient.age = `${age} ans`
    }
    
    console.log('‚úÖ Diagnostic expert g√©n√©r√© avec succ√®s!')
    console.log('üéØ Diagnostic principal:', parsedResponse.diagnosis.primary?.condition)
    console.log('üìÑ Documents g√©n√©r√©s:', Object.keys(docs))
    
    return NextResponse.json({
      success: true,
      diagnosis: parsedResponse.diagnosis,
      mauritianDocuments: docs,
      debug: {
        method: 'OpenAI REST API direct',
        responseLength: responseText.length,
        timestamp: new Date().toISOString()
      }
    })
    
  } catch (error) {
    console.error('‚ùå ERREUR COMPL√àTE:', error)
    
    if (error instanceof Error) {
      console.error('‚ùå Message:', error.message)
      console.error('‚ùå Stack:', error.stack?.substring(0, 300))
    }
    
    // Gestion erreurs sp√©cifiques
    if (error.message?.includes('API Error 401')) {
      return NextResponse.json({
        error: 'API Key OpenAI invalide',
        details: 'V√©rifiez votre cl√© API dans .env.local',
        success: false
      }, { status: 500 })
    }
    
    if (error.message?.includes('API Error 429')) {
      return NextResponse.json({
        error: 'Quota OpenAI d√©pass√©',
        details: 'Limite de taux ou cr√©dits insuffisants',
        success: false
      }, { status: 500 })
    }
    
    return NextResponse.json({
      error: 'Erreur g√©n√©ration diagnostic',
      details: error instanceof Error ? error.message : 'Erreur inconnue',
      success: false,
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}
