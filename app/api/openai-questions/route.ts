import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

// ===== DIAGNOSTIC SIMPLIFI√â =====
async function quickOpenAIDiagnostic() {
  try {
    const apiKey = process.env.OPENAI_API_KEY
    
    if (!apiKey) {
      return { working: false, error: "Cl√© API manquante" }
    }
    
    if (!apiKey.startsWith('sk-')) {
      return { working: false, error: "Format cl√© API invalide" }
    }

    // Test simple
    const { text } = await generateText({
      model: openai("gpt-4o"),
      prompt: "R√©pondez: TEST_OK",
      temperature: 0,
      maxTokens: 10,
    })

    return { 
      working: true, 
      response: text,
      keyPreview: `${apiKey.substring(0, 7)}...${apiKey.substring(apiKey.length - 4)}`
    }
    
  } catch (error: any) {
    return { 
      working: false, 
      error: error.message,
      errorType: error.name
    }
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log("üîç API Questions Ultra-Personnalis√©es - D√©but")

    // 1. PARSE REQUEST
    let requestData: {
      patientData?: any
      clinicalData?: any
      language?: string
    }

    try {
      requestData = await request.json()
      console.log("üìù Donn√©es re√ßues:", Object.keys(requestData))
    } catch (parseError) {
      return NextResponse.json({
        success: false,
        error: "Format JSON invalide",
        ai_suggestions: []
      }, { status: 400 })
    }

    const { patientData, clinicalData } = requestData

    // 2. DIAGNOSTIC OPENAI RAPIDE
    const aiDiagnostic = await quickOpenAIDiagnostic()
    console.log("ü§ñ Diagnostic OpenAI:", aiDiagnostic.working ? "‚úÖ OK" : `‚ùå ${aiDiagnostic.error}`)

    // 3. ANALYSE DONN√âES PATIENT
    const knownInfo = analyzePatientData(patientData, clinicalData)

    // 4. G√âN√âRATION QUESTIONS
    let questions = []
    let generationMethod = "fallback"
    let errorDetails = null

    if (aiDiagnostic.working) {
      try {
        console.log("ü§ñ G√©n√©ration questions IA...")
        questions = await generateQuestionsWithAI(patientData, clinicalData, knownInfo)
        generationMethod = "openai"
        console.log(`‚úÖ ${questions.length} questions IA g√©n√©r√©es`)
      } catch (aiError: any) {
        console.error("‚ùå Erreur g√©n√©ration IA:", aiError.message)
        errorDetails = aiError.message
        questions = generateFallbackQuestions(patientData, clinicalData, knownInfo)
      }
    } else {
      console.log("‚ö†Ô∏è OpenAI indisponible, utilisation fallback")
      errorDetails = aiDiagnostic.error
      questions = generateFallbackQuestions(patientData, clinicalData, knownInfo)
    }

    // 5. FORMATAGE R√âPONSE COMPATIBLE CLIENT
    const response = {
      success: true,
      timestamp: new Date().toISOString(),
      ai_suggestions: questions, // ‚Üê FORMAT ATTENDU PAR LE CLIENT
      questions: questions, // ‚Üê Garde aussi l'ancien format
      metadata: {
        aiGenerated: generationMethod === "openai",
        generationMethod: generationMethod,
        openaiWorking: aiDiagnostic.working,
        error: errorDetails,
        questionCount: questions.length,
        specificityLevel: "Ultra-Personnalis√©",
        diagnostic: {
          openaiStatus: aiDiagnostic.working ? "‚úÖ Fonctionnel" : `‚ùå ${aiDiagnostic.error}`,
          keyPreview: aiDiagnostic.keyPreview
        }
      }
    }

    console.log(`üéØ SUCC√àS: ${questions.length} questions g√©n√©r√©es via ${generationMethod}`)
    
    return NextResponse.json(response)

  } catch (globalError: any) {
    console.error("‚ùå ERREUR GLOBALE:", globalError.message)
    
    return NextResponse.json({
      success: false,
      error: "Erreur lors de la g√©n√©ration des questions",
      details: globalError.message,
      ai_suggestions: [], // ‚Üê FORMAT COMPATIBLE M√äME EN ERREUR
      questions: [],
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}

// ===== FONCTIONS AUXILIAIRES =====

function analyzePatientData(patientData: any, clinicalData: any) {
  return {
    age: patientData?.age || 0,
    gender: patientData?.gender || "",
    complaint: clinicalData?.chiefComplaint || "",
    hasAntecedents: !!(patientData?.medicalHistory?.length > 0),
    antecedents: patientData?.medicalHistory || [],
    urgencyLevel: assessUrgency(clinicalData)
  }
}

function assessUrgency(clinicalData: any): string {
  const complaint = (clinicalData?.chiefComplaint || "").toLowerCase()
  
  if (complaint.includes('douleur thoracique') || 
      complaint.includes('essoufflement s√©v√®re') || 
      complaint.includes('perte de conscience')) {
    return "urgent"
  }
  
  if (clinicalData?.painScale > 8) return "urgent"
  if (clinicalData?.painScale > 6) return "semi-urgent"
  
  return "standard"
}

async function generateQuestionsWithAI(patientData: any, clinicalData: any, knownInfo: any) {
  const prompt = buildPrompt(patientData, clinicalData, knownInfo)

  const { text } = await generateText({
    model: openai("gpt-4o"),
    prompt: prompt,
    temperature: 0.1,
    maxTokens: 2500,
  })

  // Parse JSON
  const cleanText = text.replace(/```json\n?/g, "").replace(/```\n?/g, "").trim()
  const jsonMatch = cleanText.match(/\[[\s\S]*\]/)

  if (jsonMatch) {
    const aiQuestions = JSON.parse(jsonMatch[0])
    
    // Filtrer et am√©liorer
    return aiQuestions
      .filter(q => q.question && q.question.length > 20) // √âviter questions trop courtes
      .map((q, index) => ({
        ...q,
        id: index + 1,
        aiGenerated: true,
        specificityScore: calculateSpecificity(q, knownInfo)
      }))
      .slice(0, 8)
  }

  throw new Error("Aucun JSON valide trouv√© dans la r√©ponse IA")
}

function buildPrompt(patientData: any, clinicalData: any, knownInfo: any): string {
  const age = knownInfo.age
  const gender = knownInfo.gender
  const complaint = knownInfo.complaint

  return `G√©n√©rez 6 questions m√©dicales ULTRA-SP√âCIFIQUES pour ce patient:

PROFIL UNIQUE:
- ${gender} de ${age} ans
- Motif: "${complaint}"
- Ant√©c√©dents: ${knownInfo.antecedents.join(', ') || 'Aucun'}

üéØ EXIGENCES ABSOLUES:
1. Chaque question DOIT mentionner l'√¢ge, le sexe OU le sympt√¥me sp√©cifique
2. Aucune question g√©n√©rique type "Comment vous sentez-vous ?"
3. Questions adapt√©es √† l'√¢ge (p√©diatrique si <18, g√©riatrique si >65)
4. Exploiter le sympt√¥me "${complaint}" pour diagnostic diff√©rentiel

EXEMPLES TRANSFORMATION:
‚ùå "Avez-vous des douleurs ?"
‚úÖ "Cette douleur abdominale chez un ${gender.toLowerCase()} de ${age} ans irradie-t-elle vers le dos ?"

‚ùå "Comment √ßa va ?"
‚úÖ "√Ä ${age} ans, cette fatigue vous emp√™che-t-elle de monter les escaliers ?"

FORMAT JSON STRICT:
[
  {
    "id": 1,
    "question": "Question ULTRA-sp√©cifique mentionnant √¢ge/sexe/sympt√¥me pr√©cis",
    "type": "multiple_choice",
    "options": ["Option m√©dicalement pr√©cise 1", "Option 2", "Option 3"],
    "category": "diagnostic_specifique",
    "priority": "high",
    "rationale": "Pourquoi cruciale pour CE patient de ${age} ans"
  }
]

G√©n√©rez maintenant pour ce ${gender.toLowerCase()} de ${age} ans avec "${complaint}".
R√âPONDEZ UNIQUEMENT LE JSON, rien d'autre.`
}

function generateFallbackQuestions(patientData: any, clinicalData: any, knownInfo: any) {
  const age = knownInfo.age
  const gender = knownInfo.gender
  const complaint = knownInfo.complaint

  const questions = []

  // Question 1: Sp√©cifique √† l'√¢ge
  if (age > 0) {
    if (age <= 18) {
      questions.push({
        id: 1,
        question: `√Ä ${age} ans, ces sympt√¥mes t'emp√™chent-ils de jouer ou d'aller √† l'√©cole ?`,
        type: "yes_no",
        category: "pediatric_impact",
        priority: "high",
        ageSpecific: true,
        specificityScore: 90
      })
    } else if (age > 65) {
      questions.push({
        id: 1,
        question: `√Ä ${age} ans, ces sympt√¥mes affectent-ils votre autonomie quotidienne ?`,
        type: "multiple_choice",
        options: ["Beaucoup", "Mod√©r√©ment", "Peu", "Pas du tout"],
        category: "geriatric_autonomy",
        priority: "high",
        ageSpecific: true,
        specificityScore: 85
      })
    } else {
      questions.push({
        id: 1,
        question: `Ces sympt√¥mes limitent-ils votre capacit√© de travail ou vos activit√©s quotidiennes ?`,
        type: "multiple_choice",
        options: ["Arr√™t complet", "Limitation importante", "G√™ne l√©g√®re", "Aucun impact"],
        category: "functional_impact",
        priority: "high",
        specificityScore: 70
      })
    }
  }

  // Question 2: Sp√©cifique au sympt√¥me
  if (complaint) {
    if (complaint.toLowerCase().includes('douleur thoracique')) {
      questions.push({
        id: 2,
        question: "Cette douleur thoracique irradie-t-elle vers le bras gauche, la m√¢choire ou le dos ?",
        type: "multiple_choice",
        options: ["Bras gauche", "M√¢choire", "Dos", "Plusieurs zones", "Aucune irradiation"],
        category: "chest_pain_radiation",
        priority: "high",
        symptomSpecific: true,
        specificityScore: 95
      })
    } else if (complaint.toLowerCase().includes('douleur abdominale')) {
      questions.push({
        id: 2,
        question: "Cette douleur abdominale est-elle localis√©e ou diffuse dans tout le ventre ?",
        type: "multiple_choice",
        options: ["Tr√®s localis√©e (point pr√©cis)", "Zone d√©limit√©e", "Diffuse", "Change d'endroit"],
        category: "abdominal_pain_localization",
        priority: "high",
        symptomSpecific: true,
        specificityScore: 90
      })
    } else if (complaint.toLowerCase().includes('fatigue')) {
      questions.push({
        id: 2,
        question: "Cette fatigue s'am√©liore-t-elle avec le repos ou persiste-t-elle m√™me au r√©veil ?",
        type: "multiple_choice",
        options: ["S'am√©liore avec repos", "Persiste au r√©veil", "Variable", "Empire avec repos"],
        category: "fatigue_pattern",
        priority: "high",
        symptomSpecific: true,
        specificityScore: 85
      })
    } else {
      questions.push({
        id: 2,
        question: `Concernant votre ${complaint.toLowerCase()}, √† quel moment est-ce le plus intense ?`,
        type: "multiple_choice",
        options: ["Au r√©veil", "En journ√©e", "Le soir", "La nuit", "Variable"],
        category: "symptom_timing",
        priority: "high",
        symptomSpecific: true,
        specificityScore: 75
      })
    }
  }

  // Question 3: Sp√©cifique au genre si pertinent
  if (gender === "F√©minin" && age >= 18 && age <= 50) {
    questions.push({
      id: 3,
      question: "Ces sympt√¥mes sont-ils li√©s √† votre cycle menstruel ou √† des changements hormonaux ?",
      type: "multiple_choice",
      options: ["Clairement li√©s au cycle", "Possiblement li√©s", "Aggrav√©s par hormones", "Aucun lien"],
      category: "hormonal_correlation",
      priority: "medium",
      genderSpecific: true,
      specificityScore: 80
    })
  }

  // Questions d'approfondissement sp√©cifiques
  questions.push({
    id: questions.length + 1,
    question: "Ces sympt√¥mes ressemblent-ils exactement √† quelque chose que vous avez d√©j√† v√©cu ?",
    type: "multiple_choice",
    options: ["Identiques √† un √©pisode pass√©", "Similaires mais diff√©rents", "Compl√®tement nouveaux", "Je ne sais pas"],
    category: "symptom_history_comparison",
    priority: "medium",
    specificityScore: 70
  })

  questions.push({
    id: questions.length + 1,
    question: "Y a-t-il des facteurs pr√©cis qui d√©clenchent ou aggravent ces sympt√¥mes ?",
    type: "text",
    category: "trigger_identification",
    priority: "medium",
    specificityScore: 65
  })

  questions.push({
    id: questions.length + 1,
    question: "Sur une √©chelle de 1 √† 10, comment ces sympt√¥mes affectent-ils votre qualit√© de vie ?",
    type: "scale",
    category: "quality_of_life_impact",
    priority: "medium",
    specificityScore: 60
  })

  return questions.slice(0, 8)
}

function calculateSpecificity(question: any, knownInfo: any): number {
  let score = 50 // Base
  
  const questionText = question.question.toLowerCase()
  
  // Bonus sp√©cificit√©
  if (questionText.includes(`${knownInfo.age} ans`)) score += 20
  if (questionText.includes(knownInfo.gender.toLowerCase())) score += 15
  if (questionText.includes(knownInfo.complaint.toLowerCase())) score += 20
  if (question.options && question.options.length > 2) score += 10
  
  return Math.min(score, 100)
}

// ===== ROUTE DE TEST =====
export async function GET() {
  const diagnostic = await quickOpenAIDiagnostic()
  
  return NextResponse.json({
    status: "Test OpenAI",
    timestamp: new Date().toISOString(),
    openai: diagnostic,
    recommendation: diagnostic.working 
      ? "‚úÖ OpenAI fonctionne - Cl√© API valide"
      : `‚ùå Probl√®me OpenAI: ${diagnostic.error}`
  })
}
