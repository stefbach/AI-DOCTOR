// /app/api/openai-questions/route.ts - VERSION CORRIG√âE AVEC FETCH DIRECT

import { NextRequest, NextResponse } from "next/server"

// ==================== FONCTION G√âN√âRATION IA AVEC FETCH DIRECT ====================

async function generateSimpleQuestions(patientText: string): Promise<any[]> {
  
  // PROMPT MINIMAL
  const prompt = `Tu es un m√©decin assistant pour t√©l√©consultation √† Maurice.

Patient dit : "${patientText}"

G√©n√®re 2 questions utiles que le m√©decin devrait poser.

R√©ponds SEULEMENT ce JSON :
{
  "questions": [
    {
      "medecin": "Conseil pour le m√©decin",
      "patient_simple": "Question en cr√©ole/fran√ßais simple",
      "patient_standard": "Question en fran√ßais standard"
    }
  ]
}`;

  try {
    console.log("ü§ñ Appel OpenAI avec fetch direct...")
    
    const result = await generateText({
  model: openai("gpt-4o", { apiKey: process.env.OPENAI_API_KEY }),
  prompt: extendedPrompt,      // ou advancedPrompt selon votre code
  temperature: 0.15,
  maxTokens: 3000,
});

    
    // ========== M√äME APPROCHE QUE DIAGNOSIS (QUI MARCHE) ==========
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Tu es un m√©decin assistant expert pour t√©l√©consultation Maurice. G√©n√®re UNIQUEMENT du JSON valide.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 800
      }),
    })
    
    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text()
      throw new Error(`OpenAI Error ${openaiResponse.status}: ${errorText}`)
    }
    
    const openaiData = await openaiResponse.json()
    const responseText = openaiData.choices[0]?.message?.content

    console.log("üì• R√©ponse brute:", responseText?.substring(0, 200));

    // Parse simple (m√™me logique qu'avant)
    let json = responseText.trim();
    
    // Trouve le JSON
    const start = json.indexOf('{');
    const end = json.lastIndexOf('}') + 1;
    
    if (start === -1 || end === 0) {
      throw new Error("Pas de JSON trouv√©");
    }
    
    json = json.substring(start, end);
    const parsed = JSON.parse(json);
    
    if (!parsed.questions) {
      throw new Error("Pas de questions dans la r√©ponse");
    }

    console.log("‚úÖ Parse OK:", parsed.questions.length, "questions");
    return parsed.questions;

  } catch (error) {
    console.error("‚ùå Erreur IA:", error);
    
    // FALLBACK GARANTI (m√™me qu'avant)
    return [
      {
        medecin: "Question de base - chronologie sympt√¥mes",
        patient_simple: "Depi kan to gagn√© sa probl√®me la ?",
        patient_standard: "Depuis quand avez-vous ce probl√®me ?"
      },
      {
        medecin: "Pr√©cision sympt√¥mes principaux",
        patient_simple: "Ki to senti exactement ?",
        patient_standard: "Que ressentez-vous exactement ?"
      }
    ];
  }
}

// ==================== QUESTIONS FALLBACK MAURICE ====================

function getFallbackQuestions(symptoms: string[]): any[] {
  
  if (symptoms.includes('fi√®vre') || symptoms.includes('fever')) {
    return [
      {
        medecin: "Fi√®vre d√©tect√©e - D√©pistage dengue/chikungunya Maurice",
        patient_simple: "To la fi√®vre li mont√©-descendre ou li reste m√™me hauteur ?",
        patient_standard: "Votre fi√®vre monte et descend ou reste √† la m√™me temp√©rature ?",
        examen: "Regardez votre peau : voyez-vous des petits points rouges ?"
      },
      {
        medecin: "Exposition vectorielle Maurice",
        patient_simple: "To gagn√© beaucoup piq√ªre moustique ces derniers jours ?",
        patient_standard: "Avez-vous eu beaucoup de piq√ªres de moustiques r√©cemment ?",
        contexte_maurice: "Saison dengue/chikungunya selon p√©riode"
      }
    ];
  }
  
  if (symptoms.includes('douleur') || symptoms.includes('mal')) {
    return [
      {
        medecin: "Localisation douleur pour diagnostic diff√©rentiel",
        patient_simple: "Montre moi avec to doigt exact kot li faire mal",
        patient_standard: "Montrez-moi avec votre doigt exactement o√π √ßa fait mal",
        examen: "Appuyez doucement sur la zone et dites-moi si √ßa fait plus mal"
      }
    ];
  }
  
  if (symptoms.includes('toux') || symptoms.includes('cough')) {
    return [
      {
        medecin: "Toux - √©valuation gravit√© sans auscultation",
        patient_simple: "Kan to tousse, to crache quelque chose ?",
        patient_standard: "Quand vous toussez, crachez-vous quelque chose ?",
        examen: "Placez votre main sur votre poitrine et toussez fort"
      }
    ];
  }
  
  // Questions g√©n√©rales
  return [
    {
      medecin: "Anamn√®se de base - chronologie",
      patient_simple: "Depi kan sa probl√®me la commencer ?",
      patient_standard: "Depuis quand ce probl√®me a-t-il commenc√© ?"
    },
    {
      medecin: "√âvaluation s√©v√©rit√©",
      patient_simple: "Lor √©chelle 1 √† 10, ki niveau to probl√®me ?",
      patient_standard: "Sur une √©chelle de 1 √† 10, √† quel niveau est votre probl√®me ?"
    }
  ];
}

// ==================== D√âTECTION SYMPT√îMES SIMPLE ====================

function detectSymptoms(text: string): string[] {
  const symptoms: string[] = [];
  const lowerText = text.toLowerCase();
  
  // Fi√®vre
  if (/fi√®vre|fever|chaud|temp√©rature/.test(lowerText)) {
    symptoms.push('fi√®vre');
  }
  
  // Douleur
  if (/mal|douleur|pain|faire mal/.test(lowerText)) {
    symptoms.push('douleur');
  }
  
  // Toux
  if (/toux|cough|tousse/.test(lowerText)) {
    symptoms.push('toux');
  }
  
  // Ventre
  if (/ventre|abdomen|estomac/.test(lowerText)) {
    symptoms.push('douleur_abdominale');
  }
  
  // Naus√©es
  if (/naus√©e|vomit|mal.*c≈ìur/.test(lowerText)) {
    symptoms.push('naus√©e');
  }
  
  return symptoms;
}

// ==================== API ENDPOINTS ====================

// GET - Test simple
export async function GET() {
  try {
    console.log("üß™ Test g√©n√©ration IA avec fetch direct...");
    
    const testQuestions = await generateSimpleQuestions("mo gagn√© mal dan ventre depi hier");
    
    return NextResponse.json({
      success: true,
      test: true,
      questions: testQuestions,
      message: "Test IA fonctionnel avec fetch direct",
      method: "direct_fetch_like_diagnosis"
    });
    
  } catch (error: any) {
    console.error("‚ùå Test √©chou√©:", error);
    
    return NextResponse.json({
      success: false,
      test: true,
      error: error.message,
      fallback: getFallbackQuestions(['douleur']),
      method_tried: "direct_fetch"
    });
  }
}

// POST - Vraie utilisation
export async function POST(request: NextRequest) {
  try {
    console.log("ü©∫ D√©but assistant t√©l√©consultation avec fetch direct...");
    
    const body = await request.json();
    const patientText = body.patient_discourse_real_time || body.patientData?.symptoms || "";
    
    if (!patientText) {
      return NextResponse.json({
        success: false,
        error: "Texte patient requis",
        exemple: {
          patient_discourse_real_time: "mo gagn√© mal dan ventre"
        }
      }, { status: 400 });
    }
    
    console.log("üìù Texte patient:", patientText.substring(0, 100));
    
    // D√©tection sympt√¥mes
    const symptoms = detectSymptoms(patientText);
    console.log("üîç Sympt√¥mes:", symptoms);
    
    // Essai g√©n√©ration IA avec fetch direct
    let questions;
    let aiSuccess = false;
    
    try {
      questions = await generateSimpleQuestions(patientText);
      aiSuccess = true;
      console.log("‚úÖ IA r√©ussie avec fetch direct");
    } catch (aiError) {
      console.warn("‚ö†Ô∏è IA √©chou√©e m√™me avec fetch, fallback:", aiError);
      questions = getFallbackQuestions(symptoms);
    }
    
    // Formatage final (identique √† avant)
    const formattedQuestions = questions.map((q, index) => ({
      id: `q_${Date.now()}_${index}`,
      timing: "immediate",
      priority: index === 0 ? "essential" : "important",
      
      // Pour le m√©decin
      physician_prompt: q.medecin,
      
      // Pour le patient
      patient_formulations: {
        simple: q.patient_simple,
        standard: q.patient_standard || q.patient_simple,
        technical: q.patient_standard || q.patient_simple
      },
      
      // Examen physique si pr√©sent
      physical_guidance: q.examen ? {
        instruction_patient: q.examen,
        what_to_observe: "R√©action du patient",
        red_flags_visual: ["Douleur intense", "D√©fense"]
      } : null,
      
      // Maurice
      maurice_adaptation: {
        cultural_sensitivity: q.contexte_maurice || "Adaptation mauricienne standard",
        language_options: ["cr√©ole", "fran√ßais"],
        local_epidemiology: symptoms.includes('fi√®vre') ? "Surveillance arboviroses" : "Standard"
      },
      
      clinical_rationale: q.medecin,
      ai_reasoning: aiSuccess ? "G√©n√©ration IA fetch direct" : "Fallback automatique"
    }));
    
    return NextResponse.json({
      success: true,
      ai_suggestions: formattedQuestions,
      
      // Contexte
      context: {
        symptoms_detected: symptoms,
        ai_generation_success: aiSuccess,
        ai_method: aiSuccess ? "direct_fetch_openai" : "fallback",
        language_detected: /mo|to|ena/.test(patientText) ? "cr√©ole" : "fran√ßais"
      },
      
      // Maurice sp√©cifique
      mauritius_context: {
        seasonal_alerts: symptoms.includes('fi√®vre') ? 
          ["Surveillance dengue active", "Pic moustiques saison chaude"] : 
          ["Pas d'alerte saisonni√®re"],
        cultural_notes: [
          "Famille souvent pr√©sente en t√©l√©",
          "M√©decine traditionnelle courante"
        ]
      },
      
      timestamp: new Date().toISOString(),
      fixed_method: "direct_fetch_like_diagnosis_api"
    });
    
  } catch (error: any) {
    console.error("‚ùå Erreur globale:", error);
    
    return NextResponse.json({
      success: false,
      error: error.message,
      
      // Questions de secours absolues
      emergency_questions: [
        {
          id: "emergency_1",
          physician_prompt: "Question de s√©curit√© - syst√®me IA indisponible",
          patient_formulations: {
            simple: "Ki zot probl√®me principal zordi ?",
            standard: "Quel est votre probl√®me principal aujourd'hui ?",
            technical: "D√©crivez votre motif de consultation"
          },
          timing: "immediate",
          priority: "essential"
        }
      ],
      
      manual_mode: {
        message: "Mode manuel recommand√©",
        basic_questions: [
          "Motif de consultation ?",
          "Depuis quand ?",
          "M√©dicaments pris ?",
          "Signes inqui√©tants ?"
        ]
      },
      
      debug_info: {
        method_used: "direct_fetch_attempt",
        same_as_working_diagnosis_api: true
      }
    }, { status: 500 });
  }
}

// ==================== EXPORT UTILITAIRES ====================

export { generateSimpleQuestions, getFallbackQuestions, detectSymptoms };
