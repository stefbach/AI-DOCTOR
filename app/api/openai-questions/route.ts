import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

// ===== CONFIGURATION ET DIAGNOSTIC OPENAI =====
async function validateAndTestOpenAI() {
  const apiKey = process.env.OPENAI_API_KEY
  
  // Validation de base
  if (!apiKey) {
    return { 
      isValid: false, 
      error: "OPENAI_API_KEY non d√©finie dans l'environnement",
      keyPreview: "Aucune cl√©"
    }
  }
  
  if (!apiKey.startsWith('sk-')) {
    return { 
      isValid: false, 
      error: "Cl√© API invalide - doit commencer par 'sk-'",
      keyPreview: apiKey.substring(0, 10) + "..."
    }
  }
  
  if (apiKey.length < 50) {
    return { 
      isValid: false, 
      error: "Cl√© API trop courte",
      keyPreview: apiKey.substring(0, 10) + "..."
    }
  }

  // Test de connexion r√©el
  try {
    console.log("üß™ Test connexion OpenAI...")
    
    const { text, usage } = await generateText({
      model: openai("gpt-4o"),
      prompt: "R√©pondez exactement: CONNEXION_OK_2024",
      temperature: 0,
      maxTokens: 10,
    })

    console.log("‚úÖ Test OpenAI r√©ussi:", text.trim())
    
    return {
      isValid: true,
      testResponse: text.trim(),
      usage: usage,
      keyPreview: `${apiKey.substring(0, 7)}...${apiKey.substring(apiKey.length - 4)}`,
      model: "gpt-4o"
    }
    
  } catch (error: any) {
    console.error("‚ùå Test OpenAI √©chou√©:", error.message)
    
    return {
      isValid: false,
      error: error.message,
      errorType: error.name,
      errorCode: error.code || "UNKNOWN",
      keyPreview: `${apiKey.substring(0, 7)}...${apiKey.substring(apiKey.length - 4)}`
    }
  }
}

export async function POST(request: NextRequest) {
  console.log("üè• === G√âN√âRATEUR QUESTIONS T√âL√âM√âDECINE IA ===")
  
  try {
    // 1. PARSE ET VALIDATION REQUEST
    let requestData: {
      patientData?: any
      clinicalData?: any
      language?: string
      patient_discourse_real_time?: any
    }

    try {
      requestData = await request.json()
      console.log("üìù Donn√©es patient re√ßues:", Object.keys(requestData))
    } catch (parseError) {
      console.error("‚ùå Erreur parsing JSON:", parseError)
      return NextResponse.json({
        success: false,
        error: "Format JSON invalide",
        ai_suggestions: []
      }, { status: 400 })
    }

    const { patientData, clinicalData } = requestData

    // 2. VALIDATION ET TEST OPENAI
    const openaiStatus = await validateAndTestOpenAI()
    console.log("ü§ñ Status OpenAI:", openaiStatus.isValid ? "‚úÖ FONCTIONNEL" : `‚ùå ${openaiStatus.error}`)

    // 3. ANALYSE PROFIL PATIENT
    const patientProfile = analyzePatientForTelemedicine(patientData, clinicalData)
    console.log("üë§ Profil patient analys√©:", {
      age: patientProfile.age,
      gender: patientProfile.gender,
      complaint: patientProfile.primaryComplaint,
      complexity: patientProfile.complexityLevel
    })

    // 4. G√âN√âRATION QUESTIONS
    let questions = []
    let generationMethod = "fallback"
    let aiError = null

    if (openaiStatus.isValid) {
      try {
        console.log("ü§ñ G√©n√©ration questions IA t√©l√©m√©decine...")
        questions = await generateTelemedicineQuestionsWithAI(patientProfile, openaiStatus)
        generationMethod = "ai_telemedicine"
        console.log(`‚úÖ ${questions.length} questions IA t√©l√©m√©decine g√©n√©r√©es`)
      } catch (aiGenerationError: any) {
        console.error("‚ùå Erreur g√©n√©ration IA:", aiGenerationError.message)
        aiError = aiGenerationError.message
        questions = generateTelemedicineFallbackQuestions(patientProfile)
        generationMethod = "fallback_telemedicine"
      }
    } else {
      console.log("‚ö†Ô∏è OpenAI indisponible, utilisation questions t√©l√©m√©decine optimis√©es")
      aiError = openaiStatus.error
      questions = generateTelemedicineFallbackQuestions(patientProfile)
      generationMethod = "fallback_telemedicine"
    }

    // 5. VALIDATION ET OPTIMISATION QUESTIONS
    questions = optimizeQuestionsForTelemedicine(questions, patientProfile)
    
    // 6. FORMATAGE R√âPONSE FINALE
    const response = {
      success: true,
      timestamp: new Date().toISOString(),
      ai_suggestions: questions,
      questions: questions, // Compatibilit√©
      metadata: {
        aiGenerated: generationMethod === "ai_telemedicine",
        generationMethod: generationMethod,
        openaiWorking: openaiStatus.isValid,
        patientProfile: {
          ageGroup: patientProfile.ageGroup,
          complexityLevel: patientProfile.complexityLevel,
          telemedicineAdapted: true
        },
        questionStats: {
          total: questions.length,
          highPriority: questions.filter(q => q.priority === "high").length,
          specificToPatient: questions.filter(q => q.patientSpecific).length,
          avgSpecificityScore: Math.round(questions.reduce((sum, q) => sum + (q.specificityScore || 0), 0) / questions.length)
        },
        diagnostic: {
          openaiStatus: openaiStatus.isValid ? "‚úÖ Fonctionnel" : `‚ùå ${openaiStatus.error}`,
          keyPreview: openaiStatus.keyPreview,
          testResponse: openaiStatus.testResponse,
          aiError: aiError
        }
      }
    }

    console.log(`üéØ SUCC√àS: ${questions.length} questions t√©l√©m√©decine g√©n√©r√©es via ${generationMethod}`)
    console.log(`üìä Sp√©cificit√© moyenne: ${response.metadata.questionStats.avgSpecificityScore}/100`)
    
    return NextResponse.json(response)

  } catch (globalError: any) {
    console.error("‚ùå ERREUR GLOBALE:", globalError)
    
    return NextResponse.json({
      success: false,
      error: "Erreur g√©n√©ration questions t√©l√©m√©decine",
      details: globalError.message,
      ai_suggestions: generateEmergencyQuestions(),
      questions: generateEmergencyQuestions(),
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}

// ===== ANALYSE PROFIL PATIENT POUR T√âL√âM√âDECINE =====
function analyzePatientForTelemedicine(patientData: any, clinicalData: any) {
  const age = patientData?.age || 0
  const gender = patientData?.gender || ""
  const primaryComplaint = clinicalData?.chiefComplaint || ""
  const painScale = clinicalData?.painScale || 0
  const symptoms = clinicalData?.symptoms || []
  const antecedents = patientData?.medicalHistory || []
  const medications = patientData?.currentMedications || []

  // Cat√©gorisation √¢ge
  let ageGroup = "adult"
  if (age < 18) ageGroup = "pediatric"
  else if (age > 65) ageGroup = "geriatric"
  else if (age >= 18 && age <= 35) ageGroup = "young_adult"

  // Niveau de complexit√© pour t√©l√©m√©decine
  let complexityLevel = "standard"
  if (painScale > 8 || primaryComplaint.toLowerCase().includes('thoracique') || 
      primaryComplaint.toLowerCase().includes('conscience') || 
      primaryComplaint.toLowerCase().includes('urgence')) {
    complexityLevel = "urgent"
  } else if (antecedents.length > 2 || medications.length > 3) {
    complexityLevel = "complex"
  }

  // Sp√©cialit√©s pertinentes
  const relevantSpecialties = []
  if (primaryComplaint.toLowerCase().includes('cardiaque') || primaryComplaint.toLowerCase().includes('thoracique')) {
    relevantSpecialties.push('cardiologie')
  }
  if (age > 65) relevantSpecialties.push('g√©riatrie')
  if (age < 18) relevantSpecialties.push('p√©diatrie')
  if (gender === "F√©minin" && age >= 18 && age <= 50) {
    relevantSpecialties.push('gyn√©cologie')
  }

  return {
    age,
    gender,
    ageGroup,
    primaryComplaint,
    painScale,
    symptoms,
    antecedents,
    medications,
    complexityLevel,
    relevantSpecialties,
    telemedicineContext: {
      requiresVisualExam: assessVisualExamNeed(primaryComplaint),
      requiresImmediateAttention: complexityLevel === "urgent",
      suitableForRemoteConsult: assessRemoteSuitability(primaryComplaint, painScale)
    }
  }
}

function assessVisualExamNeed(complaint: string): boolean {
  const visualRequiredPatterns = ['eruption', 'rash', 'plaie', 'blessure', 'gonflement', 'rougeur']
  return visualRequiredPatterns.some(pattern => complaint.toLowerCase().includes(pattern))
}

function assessRemoteSuitability(complaint: string, painScale: number): boolean {
  if (painScale > 8) return false
  const unsuitable = ['douleur thoracique', 'essoufflement s√©v√®re', 'perte de conscience']
  return !unsuitable.some(pattern => complaint.toLowerCase().includes(pattern))
}

// ===== G√âN√âRATION QUESTIONS IA T√âL√âM√âDECINE =====
async function generateTelemedicineQuestionsWithAI(patientProfile: any, openaiStatus: any) {
  const prompt = buildTelemedicinePrompt(patientProfile)
  
  console.log("üìù Envoi prompt t√©l√©m√©decine √† OpenAI...")
  
  try {
    const { text, usage } = await generateText({
      model: openai("gpt-4o"),
      prompt: prompt,
      temperature: 0.2, // L√©g√®rement plus cr√©atif pour la m√©decine
      maxTokens: 3000,
    })

    console.log("üìÑ R√©ponse OpenAI re√ßue:", text.substring(0, 100) + "...")
    console.log("üìä Usage:", usage)

    // Nettoyage et parsing
    const cleanText = text
      .replace(/```json\n?/g, "")
      .replace(/```\n?/g, "")
      .replace(/^\s*```\s*/, "")
      .replace(/\s*```\s*$/, "")
      .trim()

    // Recherche du JSON
    let jsonMatch = cleanText.match(/\[[\s\S]*?\]/)
    
    if (!jsonMatch) {
      // Tentative avec recherche plus large
      jsonMatch = cleanText.match(/\[[\s\S]*\]/)
    }

    if (jsonMatch) {
      const aiQuestions = JSON.parse(jsonMatch[0])
      console.log(`‚úÖ ${aiQuestions.length} questions AI pars√©es`)
      
      // Enrichissement et validation
      return aiQuestions
        .filter(q => q.question && q.question.length > 15)
        .map((q, index) => ({
          ...q,
          id: index + 1,
          aiGenerated: true,
          telemedicineOptimized: true,
          patientSpecific: isPatientSpecific(q, patientProfile),
          specificityScore: calculateTelemedicineSpecificity(q, patientProfile),
          remoteConsultSuitable: true
        }))
        .slice(0, 8)
    } else {
      throw new Error("Aucun JSON valide trouv√© dans la r√©ponse OpenAI")
    }
    
  } catch (error: any) {
    console.error("‚ùå Erreur d√©taill√©e g√©n√©ration IA:", {
      message: error.message,
      name: error.name,
      stack: error.stack?.substring(0, 300)
    })
    throw error
  }
}

function buildTelemedicinePrompt(patientProfile: any): string {
  const { age, gender, primaryComplaint, ageGroup, complexityLevel, antecedents } = patientProfile

  return `# G√âN√âRATION QUESTIONS T√âL√âM√âDECINE IA

## PROFIL PATIENT UNIQUE
- ${gender} de ${age} ans (${ageGroup})
- Motif principal: "${primaryComplaint}"
- Ant√©c√©dents: ${antecedents.length > 0 ? antecedents.join(', ') : 'Aucun connu'}
- Complexit√©: ${complexityLevel}
- Contexte: CONSULTATION √Ä DISTANCE

## DIRECTIVES T√âL√âM√âDECINE SP√âCIFIQUES

üéØ **SP√âCIFICIT√â MAXIMALE REQUISE:**
1. Chaque question DOIT exploiter l'√¢ge exact (${age} ans), le sexe (${gender}) OU le sympt√¥me ("${primaryComplaint}")
2. Questions adapt√©es √† la consultation √† DISTANCE (pas d'examen physique direct)
3. Focus sur l'histoire clinique, sympt√¥mes d√©crits, contexte personnel
4. √âviter questions n√©cessitant examen physique direct

üè• **ADAPTATION T√âL√âM√âDECINE:**
- Questions permettant √©valuation √† distance
- Descriptions d√©taill√©es des sympt√¥mes
- Facteurs d√©clenchants, chronologie pr√©cise
- Impact fonctionnel quantifiable
- Signes d'alarme √† rechercher

## EXEMPLES TRANSFORMATION T√âL√âM√âDECINE

‚ùå **INADAPT√â:** "Montrez-moi o√π vous avez mal"
‚úÖ **T√âL√âM√âDECINE:** "Sur une silhouette du corps, cette douleur se situe-t-elle plut√¥t c√¥t√© droit, gauche, au centre ou diffuse ?"

‚ùå **G√âN√âRIQUE:** "Comment vous sentez-vous ?"
‚úÖ **SP√âCIFIQUE:** "Chez un ${gender.toLowerCase()} de ${age} ans, cette ${primaryComplaint.toLowerCase()} vous emp√™che-t-elle de monter un √©tage d'escalier ?"

‚ùå **INADAPT√â:** "Je vais palper votre abdomen"
‚úÖ **T√âL√âM√âDECINE:** "Cette douleur abdominale augmente-t-elle quand vous toussez ou quand vous appuyez l√©g√®rement dessus ?"

## ADAPTATIONS OBLIGATOIRES PAR √ÇGE

${ageGroup === 'pediatric' ? `### P√âDIATRIE (${age} ans):
- Questions simples, compr√©hensibles par l'enfant/parents
- Sympt√¥mes d√©crits par observation parentale
- Impact sur jeu, √©cole, sommeil
- Comparaison avec √©tats ant√©rieurs` : ''}

${ageGroup === 'young_adult' ? `### JEUNE ADULTE (${age} ans):
- Facteurs stress, travail, √©tudes
- ${gender === 'F√©minin' ? 'Cycles menstruels, contraception' : 'Activit√© physique intense'}
- Habitudes vie (sommeil, alimentation, √©crans)` : ''}

${ageGroup === 'geriatric' ? `### G√âRIATRIE (${age} ans):
- Autonomie, chutes, confusion
- Observance m√©dicamenteuse
- Isolement social, moral
- Capacit√©s fonctionnelles pr√©cises` : ''}

## ADAPTATION SYMPT√îME "${primaryComplaint}"

${primaryComplaint.toLowerCase().includes('douleur') ? `### DOULEUR:
- Localisation pr√©cise (anatomie), irradiation
- Qualit√© (br√ªlure, crampe, piq√ªre, serrement)
- Facteurs d√©clenchants/soulageants pr√©cis
- √âchelle 0-10 + impact fonctionnel` : ''}

${primaryComplaint.toLowerCase().includes('fatigue') ? `### FATIGUE:
- Matinale vs vesp√©rale
- Li√©e effort vs permanente
- R√©cup√©ration avec repos
- Impact activit√©s quotidiennes mesurable` : ''}

## FORMAT JSON STRICT T√âL√âM√âDECINE

[
  {
    "id": 1,
    "question": "Question ULTRA-sp√©cifique mentionnant ${age} ans/${gender}/${primaryComplaint} et adapt√©e t√©l√©m√©decine",
    "type": "multiple_choice",
    "options": ["R√©ponse m√©dicalement pr√©cise 1", "R√©ponse pr√©cise 2", "R√©ponse pr√©cise 3", "Autre/Ne sais pas"],
    "category": "telemedicine_${complexityLevel}",
    "priority": "high",
    "rationale": "Pourquoi cette question est cruciale pour CE patient de ${age} ans en t√©l√©consultation",
    "telemedicine_adapted": true
  }
]

## CONTRAINTES ABSOLUES
- 6 questions maximum
- Chaque question adapt√©e consultation √† distance
- Aucune question g√©n√©rique applicable √† tous
- Exploitation obligatoire: √¢ge ${age} ans + sexe ${gender} + sympt√¥me "${primaryComplaint}"
- Questions permettant diagnostic diff√©rentiel √† distance

G√©n√©rez maintenant 6 questions ULTRA-SP√âCIFIQUES pour ce ${gender.toLowerCase()} de ${age} ans avec "${primaryComplaint}" en t√©l√©consultation.

R√âPONDEZ UNIQUEMENT AVEC LE JSON, rien d'autre.`
}

// ===== G√âN√âRATION FALLBACK T√âL√âM√âDECINE =====
function generateTelemedicineFallbackQuestions(patientProfile: any) {
  console.log("üîÑ G√©n√©ration questions fallback t√©l√©m√©decine sp√©cialis√©es")
  
  const { age, gender, primaryComplaint, ageGroup, complexityLevel, antecedents } = patientProfile
  const questions = []

  // Question 1: Sp√©cifique √¢ge + t√©l√©m√©decine
  if (ageGroup === 'pediatric') {
    questions.push({
      id: 1,
      question: `√Ä ${age} ans, peux-tu me dire si cette ${primaryComplaint.toLowerCase()} t'emp√™che de jouer comme d'habitude ?`,
      type: "multiple_choice",
      options: ["Je ne peux plus jouer du tout", "Je joue moins qu'avant", "Je joue un peu moins", "Je joue normalement"],
      category: "pediatric_functional_telemedicine",
      priority: "high",
      patientSpecific: true,
      telemedicineOptimized: true,
      specificityScore: 95
    })
  } else if (ageGroup === 'geriatric') {
    questions.push({
      id: 1,
      question: `√Ä ${age} ans, cette ${primaryComplaint.toLowerCase()} affecte-t-elle votre capacit√© √† vous lever d'une chaise sans aide ?`,
      type: "multiple_choice",
      options: ["Impossible sans aide", "Tr√®s difficile", "L√©g√®rement difficile", "Aucune difficult√©"],
      category: "geriatric_autonomy_telemedicine",
      priority: "high",
      patientSpecific: true,
      telemedicineOptimized: true,
      specificityScore: 90
    })
  } else {
    questions.push({
      id: 1,
      question: `Cette ${primaryComplaint.toLowerCase()} limite-t-elle votre capacit√© √† effectuer votre travail habituel ?`,
      type: "multiple_choice",
      options: ["Arr√™t de travail n√©cessaire", "Limitation importante", "G√™ne l√©g√®re au travail", "Aucun impact professionnel"],
      category: "adult_occupational_impact_telemedicine",
      priority: "high",
      patientSpecific: true,
      telemedicineOptimized: true,
      specificityScore: 85
    })
  }

  // Question 2: Sp√©cifique sympt√¥me + t√©l√©m√©decine
  if (primaryComplaint.toLowerCase().includes('douleur thoracique')) {
    questions.push({
      id: 2,
      question: "Cette douleur thoracique ressemble-t-elle √† une sensation de serrement, br√ªlure, piq√ªre ou pression ?",
      type: "multiple_choice",
      options: ["Serrement/√©tau", "Br√ªlure intense", "Piq√ªre/coup de poignard", "Pression/poids", "Autre sensation"],
      category: "chest_pain_quality_telemedicine",
      priority: "high",
      patientSpecific: true,
      telemedicineOptimized: true,
      specificityScore: 95
    })
  } else if (primaryComplaint.toLowerCase().includes('douleur abdominale')) {
    questions.push({
      id: 2,
      question: "Cette douleur abdominale est-elle localis√©e en un point pr√©cis ou diffuse dans plusieurs zones ?",
      type: "multiple_choice",
      options: ["Point tr√®s pr√©cis (1 doigt)", "Zone de la taille d'une main", "Diffuse dans tout le ventre", "Change d'endroit"],
      category: "abdominal_pain_localization_telemedicine",
      priority: "high",
      patientSpecific: true,
      telemedicineOptimized: true,
      specificityScore: 90
    })
  } else if (primaryComplaint.toLowerCase().includes('fatigue')) {
    questions.push({
      id: 2,
      question: "Cette fatigue est-elle pr√©sente d√®s le r√©veil ou appara√Æt-elle au cours de la journ√©e ?",
      type: "multiple_choice",
      options: ["Fatigue intense d√®s le r√©veil", "Appara√Æt dans la matin√©e", "Se d√©veloppe l'apr√®s-midi", "Surtout le soir"],
      category: "fatigue_chronology_telemedicine",
      priority: "high",
      patientSpecific: true,
      telemedicineOptimized: true,
      specificityScore: 85
    })
  } else {
    questions.push({
      id: 2,
      question: `Pouvez-vous d√©crire pr√©cis√©ment comment cette ${primaryComplaint.toLowerCase()} a commenc√© ?`,
      type: "multiple_choice",
      options: ["Brutalement en quelques minutes", "Progressivement sur quelques heures", "Graduellement sur plusieurs jours", "Impossible √† d√©terminer"],
      category: "symptom_onset_telemedicine",
      priority: "high",
      patientSpecific: true,
      telemedicineOptimized: true,
      specificityScore: 80
    })
  }

  // Question 3: Genre + √¢ge sp√©cifique pour t√©l√©m√©decine
  if (gender === "F√©minin" && age >= 18 && age <= 50) {
    questions.push({
      id: 3,
      question: `Chez une femme de ${age} ans, ces sympt√¥mes surviennent-ils √† des moments sp√©cifiques de votre cycle menstruel ?`,
      type: "multiple_choice",
      options: ["Juste avant les r√®gles", "Pendant les r√®gles", "√Ä l'ovulation (milieu cycle)", "Aucun lien avec le cycle"],
      category: "hormonal_correlation_telemedicine",
      priority: "medium",
      patientSpecific: true,
      telemedicineOptimized: true,
      specificityScore: 85
    })
  } else if (gender === "Masculin" && age > 50) {
    questions.push({
      id: 3,
      question: `Ces sympt√¥mes s'accompagnent-ils de difficult√©s urinaires ou de changements dans vos habitudes mictionnelles ?`,
      type: "multiple_choice",
      options: ["Difficult√© √† uriner", "Envies plus fr√©quentes", "R√©veil nocturne pour uriner", "Aucun probl√®me urinaire"],
      category: "male_urogenital_screening_telemedicine",
      priority: "medium",
      patientSpecific: true,
      telemedicineOptimized: true,
      specificityScore: 80
    })
  }

  // Question 4: Ant√©c√©dents sp√©cifiques t√©l√©m√©decine
  if (antecedents.length > 0) {
    const mainAntecedent = antecedents[0]
    questions.push({
      id: questions.length + 1,
      question: `Avec votre ant√©c√©dent de ${mainAntecedent}, ces nouveaux sympt√¥mes ressemblent-ils √† ce que vous avez d√©j√† v√©cu ?`,
      type: "multiple_choice",
      options: ["Identiques aux √©pisodes pass√©s", "Similaires mais plus intenses", "Similaires mais diff√©rents", "Compl√®tement nouveaux"],
      category: "antecedent_comparison_telemedicine",
      priority: "medium",
      patientSpecific: true,
      telemedicineOptimized: true,
      specificityScore: 85
    })
  }

  // Question 5: Impact fonctionnel quantifiable t√©l√©m√©decine
  questions.push({
    id: questions.length + 1,
    question: "Sur une √©chelle de 0 √† 10, √† combien √©valuez-vous l'impact de ces sympt√¥mes sur votre qualit√© de vie quotidienne ?",
    type: "scale",
    scaleMin: 0,
    scaleMax: 10,
    scaleLabels: ["Aucun impact", "Impact maximal"],
    category: "functional_impact_scale_telemedicine",
    priority: "medium",
    patientSpecific: true,
    telemedicineOptimized: true,
    specificityScore: 75
  })

  // Question 6: Facteurs d√©clenchants t√©l√©m√©decine
  questions.push({
    id: questions.length + 1,
    question: "Y a-t-il des activit√©s, aliments, positions ou situations qui d√©clenchent ou aggravent ces sympt√¥mes ?",
    type: "text",
    placeholder: "D√©crivez les facteurs d√©clenchants si vous en avez identifi√©s...",
    category: "trigger_identification_telemedicine",
    priority: "medium",
    patientSpecific: false,
    telemedicineOptimized: true,
    specificityScore: 70
  })

  return questions.slice(0, 8)
}

// ===== OPTIMISATION QUESTIONS T√âL√âM√âDECINE =====
function optimizeQuestionsForTelemedicine(questions: any[], patientProfile: any) {
  return questions.map(q => ({
    ...q,
    // S'assurer que toutes les questions sont optimis√©es t√©l√©m√©decine
    telemedicineOptimized: true,
    remoteConsultSuitable: true,
    // Recalculer sp√©cificit√© si n√©cessaire
    specificityScore: q.specificityScore || calculateTelemedicineSpecificity(q, patientProfile),
    // Ajouter m√©tadonn√©es t√©l√©m√©decine
    requiresVisualExam: assessQuestionVisualNeed(q.question),
    criticalForDiagnosis: q.priority === "high"
  }))
}

function assessQuestionVisualNeed(question: string): boolean {
  const visualKeywords = ['couleur', 'aspect', 'forme', 'apparence', 'voir', 'montrer']
  return visualKeywords.some(keyword => question.toLowerCase().includes(keyword))
}

// ===== FONCTIONS UTILITAIRES =====
function isPatientSpecific(question: any, patientProfile: any): boolean {
  const questionText = question.question.toLowerCase()
  
  return questionText.includes(`${patientProfile.age} ans`) ||
         questionText.includes(patientProfile.gender.toLowerCase()) ||
         questionText.includes(patientProfile.primaryComplaint.toLowerCase()) ||
         (question.ageSpecific || question.genderSpecific || question.symptomSpecific) === true
}

function calculateTelemedicineSpecificity(question: any, patientProfile: any): number {
  let score = 40 // Base pour t√©l√©m√©decine
  
  const questionText = question.question.toLowerCase()
  
  // Bonus sp√©cificit√© patient
  if (questionText.includes(`${patientProfile.age} ans`)) score += 25
  if (questionText.includes(patientProfile.gender.toLowerCase())) score += 20
  if (questionText.includes(patientProfile.primaryComplaint.toLowerCase())) score += 25
  
  // Bonus adaptation t√©l√©m√©decine
  if (question.telemedicineOptimized) score += 10
  if (question.type === "multiple_choice" && question.options?.length > 3) score += 5
  if (question.category?.includes('telemedicine')) score += 5
  
  // Bonus complexit√©
  if (question.question.length > 50) score += 5
  
  return Math.min(score, 100)
}

function generateEmergencyQuestions() {
  return [
    {
      id: 1,
      question: "Pouvez-vous d√©crire vos sympt√¥mes principaux ?",
      type: "text",
      category: "emergency_basic",
      priority: "high",
      specificityScore: 50
    },
    {
      id: 2,
      question: "Sur une √©chelle de 1 √† 10, √©valuez l'intensit√© de vos sympt√¥mes",
      type: "scale",
      category: "emergency_severity",
      priority: "high",
      specificityScore: 60
    }
  ]
}

// ===== ROUTE DE TEST =====
export async function GET() {
  console.log("üß™ Test diagnostic t√©l√©m√©decine...")
  
  const openaiStatus = await validateAndTestOpenAI()
  
  return NextResponse.json({
    service: "G√©n√©rateur Questions T√©l√©m√©decine IA",
    timestamp: new Date().toISOString(),
    openai_status: openaiStatus,
    recommendation: openaiStatus.isValid 
      ? "‚úÖ Service op√©rationnel - Questions IA disponibles"
      : `‚ùå Mode fallback - ${openaiStatus.error}`,
    test_endpoint: "POST avec patientData et clinicalData"
  })
}
