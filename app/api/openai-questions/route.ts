import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

export async function POST(request: NextRequest) {
  try {
    console.log("ü§ñ API Questions IA - D√©but")

    let requestData: {
      patientData?: any
      clinicalData?: any
    }

    try {
      requestData = await request.json()
      console.log("üìù Donn√©es re√ßues pour questions IA")
    } catch (parseError) {
      console.error("‚ùå Erreur parsing JSON questions:", parseError)
      return NextResponse.json(
        {
          error: "Format JSON invalide",
          success: false,
        },
        { status: 400 },
      )
    }

    const { patientData, clinicalData } = requestData

    if (!patientData || !clinicalData) {
      console.log("‚ö†Ô∏è Donn√©es manquantes pour g√©n√©rer les questions")
      return NextResponse.json(
        {
          error: "Donn√©es patient et cliniques requises",
          success: false,
        },
        { status: 400 },
      )
    }

    console.log(`üîç G√©n√©ration questions pour: ${patientData.firstName} ${patientData.lastName}`)

    // Analyser les donn√©es pour √©viter les redondances
    const askedElements = extractAlreadyAskedElements(patientData, clinicalData)
    
    const prompt = `
En tant que CLINICIEN EXPERT √† l'√Æle Maurice, g√©n√©rez des questions diagnostiques √âQUILIBR√âES et DIDACTIQUES combinant expertise m√©dicale et accessibilit√© patient.

APPROCHE EXPERTE √âQUILIBR√âE:
1. **Questions accessibles** (70%) : Compr√©hensibles par tous, langage simple
2. **Questions techniques** (30%) : Scores cliniques avec EXPLICATIONS claires
3. **P√©dagogie m√©dicale** : Expliquer POURQUOI chaque question est importante
4. **Diagnostic diff√©rentiel** par probabilit√© mais expliqu√© simplement
5. **Red flags** d√©crits en termes compr√©hensibles
6. **√âquilibre** : Pas que des scores, mais aussi ressenti patient

PATIENT (Analyse compl√®te du terrain):
- ${patientData.firstName} ${patientData.lastName}, ${patientData.age} ans, ${patientData.gender}
- IMC: ${calculateBMI(patientData.weight, patientData.height)} (${getBMICategory(patientData.weight, patientData.height)})
- Facteurs de risque CV: ${getCardiovascularRisk(patientData)}
- Terrain immunologique: ${getImmuneStatus(patientData)}
- Allergies: ${patientData.allergies?.join(", ") || "Aucune"} ${patientData.otherAllergies ? "+ " + patientData.otherAllergies : ""}
- Ant√©c√©dents stratifi√©s: ${patientData.medicalHistory?.join(", ") || "Aucun"} ${patientData.otherMedicalHistory ? "+ " + patientData.otherMedicalHistory : ""}
- Th√©rapeutiques: ${patientData.currentMedicationsText || "Aucun"}
- Facteurs de risque: Tabac: ${patientData.lifeHabits?.smoking || "Non renseign√©"}, Alcool: ${patientData.lifeHabits?.alcohol || "Non renseign√©"}

DONN√âES CLINIQUES (Analyse s√©miologique avanc√©e):
- Motif principal: ${clinicalData.chiefComplaint || "Non renseign√©"}
- S√©miologie: ${clinicalData.symptoms || "Non renseign√©"}
- Examen physique: ${clinicalData.physicalExam || "Non renseign√©"}
- Param√®tres vitaux: T¬∞${clinicalData.vitalSigns?.temperature || "?"}¬∞C, TA ${clinicalData.vitalSigns?.bloodPressure || "?"}, FC ${clinicalData.vitalSigns?.heartRate || "?"}/min

√âL√âMENTS DOCUMENT√âS (ne pas redemander):
${askedElements.map(element => `- ${element}`).join('\n')}

CONTEXTE MAURICIEN (√âpid√©miologie locale int√©gr√©e):
- Pathologies end√©miques dans le diagnostic diff√©rentiel: Dengue, chikungunya, paludisme, leptospirose, fi√®vre typho√Øde
- R√©sistances locales connues, patterns √©pid√©miologiques
- Facteurs environnementaux (climat tropical, saison cyclonique)

EXPERTISE CLINIQUE √âQUILIBR√âE PAR SYNDROME:

**DOULEUR THORACIQUE** (Approche mixte):
- Questions accessibles: intensit√©, localisation, d√©clencheurs, ressenti
- Questions techniques: Score HEART (EXPLIQU√â = √©valuation du risque cardiaque en 5 crit√®res)
- Explication : "Ce score nous aide √† √©valuer si votre douleur pourrait venir du c≈ìur"

**SYNDROME F√âBRILE** (Approche mixte):
- Questions accessibles: d√©but, √©volution, sympt√¥mes associ√©s, impact
- Questions techniques: Crit√®res SIRS (EXPLIQU√â = signes d'infection g√©n√©rale grave)
- Explication : "Ces signes nous disent si l'infection s'√©tend dans votre corps"

**C√âPHAL√âES** (Approche mixte):
- Questions accessibles: type de douleur, d√©clencheurs, fr√©quence
- Questions techniques: Red flags (EXPLIQU√âS = signes d'urgence neurologique)
- Explication : "Ces questions identifient les maux de t√™te qui n√©cessitent une attention imm√©diate"

**AUTRES SYNDROMES / SYMPT√îMES** (Approche dynamique)¬†:
- Identifiez le syst√®me concern√© (digestif, respiratoire, urinaire, neurologique, musculo‚Äësquelettique, dermatologique, etc.) √† partir du motif de consultation et des sympt√¥mes.
- Questions accessibles¬†: localisation du sympt√¥me, nature (douleur, g√™ne, modification d‚Äôune fonction), dur√©e et √©volution, facteurs d√©clenchants ou aggravants, sympt√¥mes associ√©s (fi√®vre, diarrh√©e, dyspn√©e, vomissements, √©ruption, etc.), contexte (voyage, alimentation, prise de m√©dicaments).
- Questions techniques¬†: scores ou crit√®res sp√©cifiques seulement lorsqu‚Äôils sont pertinents (p.¬†ex. score de Ranson pour pancr√©atite, qSOFA pour infection s√©v√®re), avec explications simples‚Äâ; n‚Äôutilisez un score que si les sympt√¥mes en sugg√®rent la n√©cessit√©.
- Explication¬†: ces questions servent √† distinguer les causes fr√©quentes et b√©nignes des pathologies graves¬†; commencez par explorer les causes courantes avant d‚Äô√©voquer des diagnostics s√©v√®res.


G√âN√âRATION √âQUILIBR√âE - 5-8 QUESTIONS MIXTES:

R√âPARTITION OBLIGATOIRE:
- 3-4 questions ACCESSIBLES (langage simple, exp√©rience patient)
- 2-3 questions TECHNIQUES (scores expliqu√©s, orient√©es diagnostic)
- 1 question GLOBALE (impact, inqui√©tudes, attentes)

Format JSON didactique requis:
{
  "questions": [
    {
      "id": 1,
      "question": "Question en langage accessible ou technique selon le type",
      "type": "multiple_choice",
      "options": ["Option claire", "Option compr√©hensible", "Option explicite", "Option accessible"],
      "rationale": "Justification SIMPLE et CLAIRE du pourquoi de cette question",
      "category": "accessible|technical|global",
      "complexity_level": "simple|moderate|advanced",
      "medical_explanation": "Explication didactique de l'int√©r√™t m√©dical",
      "clinical_score": "HEART|SIRS|qSOFA - UNIQUEMENT si question technique",
      "score_explanation": "Explication claire et simple de ce qu'est ce score",
      "patient_benefit": "Pourquoi cette question aide le patient",
      "diagnostic_value": "high|medium|low"
    }
  ]
}

R√àGLES √âQUILIBRE OBLIGATOIRES:
‚úì 70% questions simples et accessibles
‚úì 30% questions techniques AVEC explications
‚úì Scores cliniques EXPLIQU√âS en termes simples
‚úì Rationale TOUJOURS compr√©hensible par le patient
‚úì √âviter le jargon m√©dical non expliqu√©
‚úì Inclure questions sur ressenti/inqui√©tudes patient
‚úì √âquilibrer expertise et humanit√©

Format JSON expert requis:
{
  "questions": [
    {
      "id": 1,
      "question": "Question diagnostique pr√©cise utilisant terminologie m√©dicale appropri√©e et scores valid√©s",
      "type": "multiple_choice",
      "options": ["R√©ponse avec crit√®res pr√©cis/scores", "Option bas√©e guidelines", "Crit√®re physiopathologique", "√âl√©ment pronostique/red flag"],
      "rationale": "Justification bas√©e sur litt√©rature m√©dicale, guidelines internationales et scores valid√©s",
      "category": "risk_stratification|phenotyping|differential_diagnosis|red_flags|prognostic_factors",
      "diagnostic_value": "high|medium|low",
      "clinical_score": "HEART|SIRS|qSOFA|IHS|TIMI|ABCD2|Wells|autre_score_valid√©",
      "evidence_level": "A|B|C selon guidelines ESC/AHA/IHS/IDSA",
      "clinical_pearls": "√âl√©ment clinique expert sp√©cifique, pi√®ge diagnostique √† √©viter",
      "red_flags": "Signes d'alarme sp√©cifiques n√©cessitant prise en charge urgente",
      "physiopathology": "M√©canisme physiopathologique sous-jacent"
    }
  ]
}

CRIT√àRES EXPERT √âQUILIBR√âS OBLIGATOIRES:
‚úì Questions accessibles en langage simple (majorit√©)
‚úì Questions techniques avec explications didactiques (minorit√©)
‚úì Scores cliniques EXPLIQU√âS quand utilis√©s
‚úì Rationale compr√©hensible par patient non-m√©decin
‚úì √âquilibre expertise/humanit√©/accessibilit√©
‚úì Red flags d√©crits simplement mais pr√©cis√©ment
‚úì √âviter jargon m√©dical non expliqu√©
‚úì Inclure ressenti et impact sur qualit√© de vie
‚úì Questions pratiques et concr√®tes

R√àGLES EXPERT DIDACTIQUE:
- Adapter les questions au syndrome principal¬†: pour chaque sympt√¥me, commencez par explorer les causes courantes et b√©nignes (infections virales, intoxications alimentaires, effets m√©dicamenteux, troubles fonctionnels, etc.) et n‚Äôaborder des pathologies graves que si des signes d‚Äôalarme cliniques ou des r√©sultats paracliniques l‚Äôexigent.
- Utiliser scores cliniques UNIQUEMENT si n√©cessaire ET expliqu√©s
- Privil√©gier questions compr√©hensibles par tous
- Expliquer POURQUOI chaque question est utile
- √âquilibrer technique et humain
- √âviter questions trop complexes sans b√©n√©fice
- Contexte mauricien int√©gr√© naturellement
- Pas de questions d'exposition tropicale
`

    const result = await generateText({
      model: openai("gpt-4o"),
      prompt: prompt,
      temperature: 0.2,
      maxTokens: 2000,
    })

    console.log("üß† Questions IA g√©n√©r√©es")

    // Tentative de parsing JSON avec fallback am√©lior√©
    let questionsData
    try {
      let cleanedText = result.text.trim()
      const jsonMatch = cleanedText.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        cleanedText = jsonMatch[0]
      }

      questionsData = JSON.parse(cleanedText)

      if (!questionsData.questions || !Array.isArray(questionsData.questions)) {
        throw new Error("Structure JSON invalide")
      }

      // Validation et d√©duplication avec approche experte
      questionsData.questions = deduplicateExpertQuestions(questionsData.questions, askedElements)
      
      // √âvaluation du niveau m√©dical
      const medicalAssessment = assessMedicalExpertLevel(questionsData.questions)
      
      console.log(`‚úÖ ${questionsData.questions.length} questions expertes pars√©es - Niveau: ${medicalAssessment.level}`)
    } catch (parseError) {
      console.warn("‚ö†Ô∏è Erreur parsing JSON, g√©n√©ration de questions de fallback niveau expert")
      questionsData = generateSmartFallbackQuestions(patientData, clinicalData, askedElements)
      
      // √âvaluation du fallback
      const medicalAssessment = assessMedicalExpertLevel(questionsData.questions)
      questionsData.medicalAssessment = medicalAssessment
    }

    // √âvaluation finale du niveau m√©dical si pas d√©j√† fait
    const finalAssessment = questionsData.medicalAssessment || assessMedicalExpertLevel(questionsData.questions)

    const response = {
      success: true,
      questions: questionsData.questions,
      metadata: {
        // Donn√©es patient de base
        patientAge: patientData.age,
        patientGender: patientData.gender,
        patientBMI: calculateBMI(patientData.weight, patientData.height),
        patientBMICategory: getBMICategory(patientData.weight, patientData.height),
        
        // Stratification des risques
        cardiovascularRisk: getCardiovascularRisk(patientData),
        immuneStatus: getImmuneStatus(patientData),
        
        // Donn√©es cliniques
        chiefComplaint: clinicalData.chiefComplaint,
        vitalSigns: clinicalData.vitalSigns,
        
        // M√©tadonn√©es de g√©n√©ration
        questionsCount: questionsData.questions.length,
        generatedAt: new Date().toISOString(),
        aiModel: "gpt-4o",
        
        // Contexte et approche
        location: "Maurice",
        approach: "expert-balanced-didactic",
        medicalLevel: finalAssessment.level,
        medicalScore: finalAssessment.score,
        questionBalance: finalAssessment.balance,
        
        // Exclusions et filtres
        excludedElements: askedElements,
        tropicalExposureQuestionsExcluded: true,
        
        // Analyse qualit√© experte √©quilibr√©e
        expertFeatures: {
          accessibleQuestions: questionsData.questions.filter(q => q.category === 'accessible').length,
          technicalQuestionsExplained: questionsData.questions.filter(q => q.category === 'technical' && q.score_explanation).length,
          globalQuestions: questionsData.questions.filter(q => q.category === 'global').length,
          clinicalScoresUsed: questionsData.questions.filter(q => q.clinical_score).length,
          explainedScores: questionsData.questions.filter(q => q.score_explanation).length,
          patientBenefitExplained: questionsData.questions.filter(q => q.patient_benefit).length,
          medicalExplanations: questionsData.questions.filter(q => q.medical_explanation).length,
        },
        
        // D√©tails de l'√©valuation
        qualityAssessment: finalAssessment.details,
        
        // Guidelines et scores utilis√©s
        clinicalScoresAvailable: ["HEART", "SIRS", "qSOFA", "IHS", "ABCD2", "Wells", "Framingham", "Charlson", "Karnofsky"],
        guidelinesReferenced: ["ESC", "AHA", "IHS", "IDSA", "European Stroke Organisation"],
      },
      
      // Recommandations cliniques pour le m√©decin
      clinicalRecommendations: {
        urgencyLevel: determineUrgencyLevel(questionsData.questions),
        suggestedWorkup: suggestWorkup(patientData, clinicalData),
        redFlagAlerts: extractRedFlags(questionsData.questions),
        followUpRecommendations: generateFollowUpRecommendations(finalAssessment, patientData)
      }
    }

    console.log(`‚úÖ Questions niveau EXPERT √âQUILIBR√â g√©n√©r√©es: ${questionsData.questions.length} - Niveau: ${finalAssessment.level} - √âquilibre: ${finalAssessment.balance.accessible}A/${finalAssessment.balance.technical}T/${finalAssessment.balance.global}G`)
    return NextResponse.json(response)
  } catch (error: any) {
    console.error("‚ùå Erreur Questions IA:", error)
    return NextResponse.json(
      {
        error: "Erreur lors de la g√©n√©ration des questions niveau expert √©quilibr√©",
        details: error.message,
        success: false,
        timestamp: new Date().toISOString(),
      },
      { status: 500 },
    )
  }
}

function extractAlreadyAskedElements(patientData: any, clinicalData: any): string[] {
  const askedElements: string[] = []

  // Donn√©es patient disponibles
  if (patientData.age) askedElements.push("√¢ge du patient")
  if (patientData.gender) askedElements.push("sexe du patient")
  if (patientData.weight && patientData.height) askedElements.push("poids et taille (IMC calculable)")
  if (patientData.allergies?.length) askedElements.push("allergies connues")
  if (patientData.medicalHistory?.length) askedElements.push("ant√©c√©dents m√©dicaux")
  if (patientData.currentMedicationsText) askedElements.push("m√©dicaments actuels")
  if (patientData.lifeHabits?.smoking) askedElements.push("habitudes tabagiques")
  if (patientData.lifeHabits?.alcohol) askedElements.push("consommation d'alcool")

  // Donn√©es cliniques disponibles
  if (clinicalData.chiefComplaint) askedElements.push("motif de consultation")
  if (clinicalData.symptoms) askedElements.push("sympt√¥mes principaux")
  if (clinicalData.physicalExam) askedElements.push("donn√©es d'examen physique")
  if (clinicalData.vitalSigns?.temperature) askedElements.push("temp√©rature")
  if (clinicalData.vitalSigns?.bloodPressure) askedElements.push("tension art√©rielle")
  if (clinicalData.vitalSigns?.heartRate) askedElements.push("fr√©quence cardiaque")

  return askedElements
}

// Helper pour s√©curiser les donn√©es textuelles
function safeStringConversion(data: any): string {
  try {
    if (!data) return ""
    if (typeof data === 'string') return data.toLowerCase()
    if (Array.isArray(data)) return data.join(' ').toLowerCase()
    if (typeof data === 'object') return Object.values(data).join(' ').toLowerCase()
    return String(data).toLowerCase()
  } catch (error) {
    console.warn("Erreur lors de la conversion de donn√©es:", error)
    return ""
  }
}

function calculateBMI(weight: number, height: number): string {
  if (!weight || !height) return "non calculable"
  const heightM = height / 100
  const bmi = weight / (heightM * heightM)
  return bmi.toFixed(1)
}

function getBMICategory(weight: number, height: number): string {
  if (!weight || !height) return "non √©valuable"
  const heightM = height / 100
  const bmi = weight / (heightM * heightM)
  
  if (bmi < 18.5) return "Insuffisance pond√©rale (facteur de risque)"
  if (bmi < 25) return "Poids normal"
  if (bmi < 30) return "Surpoids (facteur de risque CV)"
  if (bmi < 35) return "Ob√©sit√© mod√©r√©e (haut risque CV)"
  return "Ob√©sit√© s√©v√®re (tr√®s haut risque CV)"
}

function getCardiovascularRisk(patientData: any): string {
  const risks = []
  const age = patientData.age
  const gender = patientData.gender
  
  // Facteurs de risque CV majeurs
  if (age > 45 && gender === "Masculin") risks.push("√Çge + sexe masculin")
  if (age > 55 && gender === "F√©minin") risks.push("√Çge + sexe f√©minin")
  if (patientData.lifeHabits?.smoking === "Oui") risks.push("Tabagisme actif")
  if (patientData.medicalHistory?.includes("Diab√®te")) risks.push("Diab√®te")
  if (patientData.medicalHistory?.includes("HTA")) risks.push("HTA")
  if (patientData.medicalHistory?.includes("Hypercholest√©rol√©mie")) risks.push("Dyslipid√©mie")
  if (patientData.medicalHistory?.includes("Ant√©c√©dents familiaux CV")) risks.push("ATCD familiaux CV")
  
  const bmi = calculateBMI(patientData.weight, patientData.height)
  if (parseFloat(bmi) >= 30) risks.push("Ob√©sit√©")
  
  return risks.length > 0 ? risks.join(", ") : "Faible risque CV"
}

function getImmuneStatus(patientData: any): string {
  const immunoRisks = []
  
  if (patientData.age > 65) immunoRisks.push("√Çge > 65 ans")
  if (patientData.medicalHistory?.includes("Diab√®te")) immunoRisks.push("Diab√®te")
  if (patientData.medicalHistory?.includes("Insuffisance r√©nale")) immunoRisks.push("IRC")
  if (patientData.medicalHistory?.includes("Cancer")) immunoRisks.push("N√©oplasie")
  
  const medications = safeStringConversion(patientData.currentMedicationsText)
  if (medications.includes("cortico√Ødes")) immunoRisks.push("Corticoth√©rapie")
  if (medications.includes("immunosuppresseur")) immunoRisks.push("Immunosuppression")
  
  return immunoRisks.length > 0 ? `Terrain fragilis√©: ${immunoRisks.join(", ")}` : "Terrain immunocomp√©tent"
}

function deduplicateExpertQuestions(questions: any[], askedElements: string[]): any[] {
  return questions.filter(question => {
    const questionText = question.question.toLowerCase()
    
    // √âviter les questions redondantes avec approche experte
    const redundantKeywords = [
      { keywords: ["√¢ge", "ans"], element: "√¢ge du patient" },
      { keywords: ["poids", "p√®se", "imc"], element: "poids et taille" },
      { keywords: ["taille", "mesure"], element: "poids et taille" },
      { keywords: ["allergique", "allergie"], element: "allergies connues" },
      { keywords: ["m√©dicament", "traitement", "m√©dication"], element: "m√©dicaments actuels" },
      { keywords: ["fume", "tabac", "cigarette"], element: "habitudes tabagiques" },
      { keywords: ["boit", "alcool", "boisson"], element: "consommation d'alcool" },
      { keywords: ["temp√©rature", "fi√®vre"], element: "temp√©rature" },
      { keywords: ["tension", "pression"], element: "tension art√©rielle" },
      { keywords: ["exposition", "moustique", "piq√ªre", "tropical"], element: "contexte mauricien" },
    ]

    return !redundantKeywords.some(({ keywords, element }) => 
      keywords.some(keyword => questionText.includes(keyword)) && 
      (askedElements.includes(element) || element === "contexte mauricien")
    )
  })
}

// Fonction d'√©valuation du niveau m√©dical des questions g√©n√©r√©es - approche √©quilibr√©e
function assessMedicalExpertLevel(questions: any[]): {
  level: string;
  score: number;
  details: string[];
  balance: { accessible: number; technical: number; global: number };
} {
  let expertScore = 0
  const totalQuestions = questions.length
  const details: string[] = []
  const balance = { accessible: 0, technical: 0, global: 0 }

  questions.forEach((q, index) => {
    let questionScore = 0
    
    // Comptage pour √©quilibre
    if (q.category === 'accessible') balance.accessible++
    else if (q.category === 'technical') balance.technical++
    else if (q.category === 'global') balance.global++
    
    // Crit√®res niveau expert √©quilibr√© (scoring)
    if (q.clinical_score && q.score_explanation) {
      questionScore += 3
      details.push(`Q${index + 1}: Score clinique expliqu√© (${q.clinical_score})`)
    }
    if (q.medical_explanation) {
      questionScore += 2
      details.push(`Q${index + 1}: Explication m√©dicale didactique`)
    }
    if (q.patient_benefit) {
      questionScore += 2
      details.push(`Q${index + 1}: B√©n√©fice patient expliqu√©`)
    }
    if (q.complexity_level === 'simple' && q.rationale) {
      questionScore += 2
      details.push(`Q${index + 1}: Question accessible avec rationale claire`)
    }
    if (q.category === 'technical' && q.score_explanation) {
      questionScore += 2
      details.push(`Q${index + 1}: Question technique avec explication`)
    }
    if (q.category === 'global') {
      questionScore += 1
      details.push(`Q${index + 1}: Dimension humaine/globale`)
    }
    if (q.diagnostic_value === 'high') {
      questionScore += 1
    }

    expertScore += questionScore
  })

  const averageScore = expertScore / totalQuestions
  
  // √âvaluation de l'√©quilibre
  const accessibleRatio = balance.accessible / totalQuestions
  const technicalRatio = balance.technical / totalQuestions
  const globalRatio = balance.global / totalQuestions
  
  // Bonus pour √©quilibre id√©al (70% accessible, 30% technique/global)
  let balanceBonus = 0
  if (accessibleRatio >= 0.6 && accessibleRatio <= 0.8) balanceBonus += 1
  if (technicalRatio >= 0.2 && technicalRatio <= 0.4) balanceBonus += 1
  if (globalRatio >= 0.1) balanceBonus += 0.5

  const finalScore = averageScore + balanceBonus

  let level: string
  if (finalScore >= 10) level = "Expert √©quilibr√©+ (niveau professeur patient-centr√©)"
  else if (finalScore >= 8) level = "Expert √©quilibr√© (sp√©cialiste didactique)"
  else if (finalScore >= 6) level = "Avanc√© √©quilibr√© (m√©decin exp√©riment√© accessible)"  
  else if (finalScore >= 4) level = "Interm√©diaire √©quilibr√© (m√©decin g√©n√©raliste didactique)"
  else level = "Basique (questions simples)"

  return {
    level,
    score: Math.round(finalScore * 10) / 10,
    details,
    balance
  }
}

function generateSmartFallbackQuestions(patientData: any, clinicalData: any, askedElements: string[]) {
  // Utilisation de la fonction helper s√©curis√©e
  const symptoms = safeStringConversion(clinicalData.symptoms)
  const chiefComplaint = safeStringConversion(clinicalData.chiefComplaint)
  const combinedSymptoms = `${symptoms} ${chiefComplaint}`

  let questions = []

  if (combinedSymptoms.includes("douleur") && (combinedSymptoms.includes("thorax") || combinedSymptoms.includes("poitrine"))) {
    // Questions √©quilibr√©es cardiologiques (accessibles + techniques)
    questions = [
      {
        id: 1,
        question: "Comment d√©cririez-vous votre douleur thoracique en quelques mots simples?",
        type: "multiple_choice",
        options: [
          "Comme un poids ou une pression sur la poitrine", 
          "Comme une br√ªlure ou des picotements",
          "Comme un coup de poignard ou une d√©chirure",
          "Difficile √† d√©crire, sensation bizarre"
        ],
        rationale: "La fa√ßon dont vous d√©crivez votre douleur nous aide √† comprendre d'o√π elle pourrait venir",
        category: "accessible",
        complexity_level: "simple",
        medical_explanation: "Les diff√©rents types de douleur thoracique orientent vers diff√©rentes causes possibles",
        patient_benefit: "Aide le m√©decin √† mieux comprendre votre ressenti et orienter le diagnostic",
        diagnostic_value: "high"
      },
      {
        id: 2,
        question: "Selon l'√©valuation HEART (un score m√©dical d'√©valuation du risque cardiaque), votre douleur pr√©sente-t-elle des caract√©ristiques inqui√©tantes?",
        type: "multiple_choice",
        options: [
          "Douleur typique: oppressante, au centre, d√©clench√©e par l'effort",
          "Douleur atypique: quelques caract√©ristiques seulement", 
          "Douleur non-cardiaque: localis√©e, positionnelle",
          "Je ne sais pas comment la caract√©riser"
        ],
        rationale: "Le score HEART nous aide √† √©valuer rapidement si votre douleur pourrait venir du c≈ìur",
        category: "technical",
        complexity_level: "moderate",
        clinical_score: "HEART",
        score_explanation: "HEART est un score simple qui √©value 5 crit√®res pour d√©terminer le risque que la douleur vienne du c≈ìur",
        medical_explanation: "Ce score valid√© permet une √©valuation standardis√©e du risque cardiaque",
        patient_benefit: "Permet de d√©terminer rapidement si des examens cardiaques urgents sont n√©cessaires",
        diagnostic_value: "high"
      },
      {
        id: 3,
        question: "Comment cette douleur impacte-t-elle votre vie quotidienne en ce moment?",
        type: "multiple_choice",
        options: [
          "Je peux faire toutes mes activit√©s normalement",
          "Je dois ralentir ou √©viter certains efforts", 
          "J'ai du mal √† faire mes activit√©s habituelles",
          "Je suis tr√®s limit√©(e) dans mes mouvements"
        ],
        rationale: "Comprendre l'impact sur votre quotidien nous aide √† √©valuer la gravit√© et l'urgence",
        category: "global",
        complexity_level: "simple",
        medical_explanation: "L'√©valuation fonctionnelle est essentielle pour adapter la prise en charge",
        patient_benefit: "Assure que votre qualit√© de vie est prise en compte dans le traitement",
        diagnostic_value: "medium"
      }
    ]
  } else if (combinedSymptoms.includes("fi√®vre") || (clinicalData.vitalSigns?.temperature && parseFloat(String(clinicalData.vitalSigns.temperature)) > 37.5)) {
    // Questions √©quilibr√©es infectiologiques (accessibles + techniques)
    questions = [
      {
        id: 1,
        question: "Comment votre fi√®vre √©volue-t-elle depuis qu'elle a commenc√©?",
        type: "multiple_choice",
        options: [
          "Elle reste haute en permanence",
          "Elle monte et descend plusieurs fois par jour",
          "Elle appara√Æt par √©pisodes puis dispara√Æt compl√®tement", 
          "Elle diminue progressivement depuis le d√©but"
        ],
        rationale: "Le comportement de la fi√®vre nous donne des indices importants sur le type d'infection",
        category: "accessible",
        complexity_level: "simple",
        medical_explanation: "Les patterns f√©briles diff√©rents sugg√®rent diff√©rents types d'infections",
        patient_benefit: "Aide √† identifier le type d'infection pour mieux la traiter",
        diagnostic_value: "high"
      },
      {
        id: 2,
        question: "Pr√©sentez-vous des signes SIRS (signes d'infection g√©n√©ralis√©e) qui pourraient indiquer une infection s√©v√®re?",
        type: "multiple_choice",
        options: [
          "Oui: fi√®vre √©lev√©e + c≈ìur qui bat vite + respiration rapide",
          "Partiellement: seulement un ou deux de ces signes",
          "Non: juste de la fi√®vre sans autres signes", 
          "Je ne sais pas reconna√Ætre ces signes"
        ],
        rationale: "Les crit√®res SIRS nous aident √† d√©tecter rapidement si l'infection devient grave",
        category: "technical", 
        complexity_level: "moderate",
        clinical_score: "SIRS",
        score_explanation: "SIRS = Syndrome de R√©ponse Inflammatoire Syst√©mique, soit des signes que l'infection s'√©tend dans tout le corps",
        medical_explanation: "Ces crit√®res permettent de d√©tecter pr√©cocement un sepsis n√©cessitant une prise en charge urgente",
        patient_benefit: "D√©tection rapide des infections graves pour un traitement adapt√©",
        diagnostic_value: "high"
      },
      {
        id: 3,
        question: "Quelles sont vos principales inqui√©tudes concernant cette fi√®vre?",
        type: "multiple_choice",
        options: [
          "J'ai peur que ce soit grave et que √ßa s'aggrave",
          "Je m'inqui√®te de ne pas pouvoir travailler/m'occuper de ma famille",
          "Je crains les complications ou la contagion", 
          "Je ne suis pas particuli√®rement inquiet(e)"
        ],
        rationale: "Vos inqui√©tudes nous aident √† adapter notre approche et nos explications",
        category: "global",
        complexity_level: "simple",
        medical_explanation: "La dimension psychologique et sociale est importante dans la prise en charge",
        patient_benefit: "Permet d'adapter les soins √† vos pr√©occupations personnelles",
        diagnostic_value: "medium"
      }
    ]
  } else if (combinedSymptoms.includes("c√©phal") || combinedSymptoms.includes("t√™te")) {
    // Questions √©quilibr√©es neurologiques (accessibles + techniques)
    questions = [
      {
        id: 1,
        question: "Si vous deviez expliquer votre mal de t√™te √† un proche, comment le d√©cririez-vous?",
        type: "multiple_choice",
        options: [
          "Comme si ma t√™te allait exploser, tr√®s intense",
          "Comme un marteau qui tape r√©guli√®rement",
          "Comme un √©tau qui serre tout autour", 
          "Une douleur sourde et constante"
        ],
        rationale: "La description de votre douleur nous aide √† comprendre quel type de mal de t√™te vous avez",
        category: "accessible",
        complexity_level: "simple",
        medical_explanation: "Les diff√©rents types de c√©phal√©es ont des caract√©ristiques sp√©cifiques",
        patient_benefit: "Aide √† identifier le type de mal de t√™te pour un traitement adapt√©",
        diagnostic_value: "high"
      },
      {
        id: 2, 
        question: "Votre mal de t√™te pr√©sente-t-il des 'red flags' (signes d'alarme) qui n√©cessiteraient une attention m√©dicale urgente?",
        type: "multiple_choice",
        options: [
          "Oui: d√©but tr√®s brutal + fi√®vre + raideur dans la nuque",
          "Oui: mal de t√™te inhabituel + troubles de la vision/parole",
          "Non: mal de t√™te 'normal' sans signes inqui√©tants", 
          "Je ne sais pas identifier ces signes d'alarme"
        ],
        rationale: "Ces signes d'alarme nous disent si votre mal de t√™te n√©cessite des examens urgents",
        category: "technical",
        complexity_level: "moderate",
        score_explanation: "Red flags = signes qui peuvent indiquer une urgence neurologique n√©cessitant des examens imm√©diats",
        medical_explanation: "Certains maux de t√™te peuvent r√©v√©ler des probl√®mes graves n√©cessitant une prise en charge urgente",
        patient_benefit: "D√©tection rapide des maux de t√™te dangereux pour un traitement d'urgence si n√©cessaire",
        diagnostic_value: "high"
      },
      {
        id: 3,
        question: "Comment ce mal de t√™te affecte-t-il votre capacit√© √† fonctionner au quotidien?",
        type: "multiple_choice",
        options: [
          "Je peux continuer mes activit√©s sans probl√®me",
          "Je dois adapter ou r√©duire certaines activit√©s",
          "J'ai beaucoup de difficult√©s √† faire mes t√¢ches habituelles", 
          "Je suis compl√®tement bloqu√©(e), incapable de faire quoi que ce soit"
        ],
        rationale: "L'impact sur votre vie quotidienne nous aide √† adapter l'intensit√© du traitement",
        category: "global",
        complexity_level: "simple",
        medical_explanation: "L'√©valuation fonctionnelle guide les d√©cisions th√©rapeutiques",
        patient_benefit: "S'assure que le traitement prend en compte votre qualit√© de vie",
        diagnostic_value: "medium"
      }
    ]
  } else {
    // Questions √©quilibr√©es g√©n√©rales (accessibles + techniques)
    questions = [
      {
        id: 1,
        question: "Si vous deviez d√©crire vos sympt√¥mes √† quelqu'un qui ne vous conna√Æt pas, que diriez-vous?",
        type: "multiple_choice",
        options: [
          "C'est quelque chose de nouveau et d'inqui√©tant",
          "C'est familier, j'ai d√©j√† eu √ßa avant", 
          "C'est difficile √† expliquer, c'est bizarre",
          "C'est g√™nant mais pas dramatique"
        ],
        rationale: "Votre propre perception nous aide √† mieux comprendre ce que vous ressentez",
        category: "accessible",
        complexity_level: "simple",
        medical_explanation: "Le ressenti du patient est un √©l√©ment diagnostique important",
        patient_benefit: "Permet de partir de votre exp√©rience personnelle",
        diagnostic_value: "medium"
      },
      {
        id: 2,
        question: "Selon une √©valuation m√©dicale globale de votre √©tat, dans quelle cat√©gorie d'urgence vous situeriez-vous?",
        type: "multiple_choice",
        options: [
          "Urgence vitale: √ßa se d√©grade vite, j'ai besoin d'aide tout de suite",
          "Urgent: √ßa m'inqui√®te, je ne veux pas que √ßa empire", 
          "Peut attendre: c'est g√™nant mais pas dramatique",
          "Consultation normale: je veux juste comprendre ce qui se passe"
        ],
        rationale: "Votre perception de l'urgence nous aide √† prioriser votre prise en charge",
        category: "technical",
        complexity_level: "moderate",
        score_explanation: "Classification m√©dicale standard pour √©valuer le niveau d'urgence des sympt√¥mes",
        medical_explanation: "L'auto-√©valuation du patient compl√®te l'√©valuation m√©dicale objective",
        patient_benefit: "Assure que vos pr√©occupations sont entendues et prises en compte",
        diagnostic_value: "high"
      },
      {
        id: 3,
        question: "Qu'attendez-vous le plus de cette consultation m√©dicale?",
        type: "multiple_choice",
        options: [
          "√ätre rassur√©(e) que ce n'est rien de grave",
          "Obtenir un diagnostic clair et des explications", 
          "Recevoir un traitement efficace rapidement",
          "Comprendre comment √©viter que √ßa recommence"
        ],
        rationale: "Vos attentes nous aident √† adapter notre approche pour mieux vous aider",
        category: "global",
        complexity_level: "simple",
        medical_explanation: "La prise en compte des attentes du patient am√©liore la satisfaction et l'observance",
        patient_benefit: "Garantit que la consultation r√©pond √† vos besoins sp√©cifiques",
        diagnostic_value: "low"
      }
    ]
  }

  // Filtrer les questions redondantes avec approche experte
  questions = deduplicateExpertQuestions(questions, askedElements)

  return { questions }
}

// Fonctions helper pour les recommandations cliniques expertes
function determineUrgencyLevel(questions: any[]): string {
  const redFlagCount = questions.filter(q => q.red_flags).length
  const riskStratCount = questions.filter(q => q.category === 'risk_stratification').length
  
  if (redFlagCount > 0) return "URGENT - Red flags identifi√©s"
  if (riskStratCount >= 2) return "PRIORITAIRE - Stratification de risque n√©cessaire"
  return "STANDARD - Surveillance clinique"
}

function suggestWorkup(patientData: any, clinicalData: any): string[] {
  const workup = []
  
  // Utilisation de la fonction helper s√©curis√©e  
  const symptoms = safeStringConversion(clinicalData.symptoms)
  const chiefComplaint = safeStringConversion(clinicalData.chiefComplaint)
  const combinedSymptoms = `${symptoms} ${chiefComplaint}`
  
  if (combinedSymptoms.includes("thorax") || combinedSymptoms.includes("poitrine")) {
    workup.push("ECG 12 d√©rivations + troponines", "Rx thorax", "√âcho-cardiographie si clinique √©vocatrice")
  }
  
  if (combinedSymptoms.includes("fi√®vre") || (clinicalData.vitalSigns?.temperature && parseFloat(String(clinicalData.vitalSigns.temperature)) > 37.5)) {
    workup.push("H√©mocultures x2", "CRP + PCT", "ECBU", "NFS + CRP + ionogramme")
  }
  
  if (combinedSymptoms.includes("c√©phal") || combinedSymptoms.includes("t√™te")) {
    workup.push("Fond d'≈ìil + examen neurologique", "TDM c√©r√©brale si red flags", "PL si suspicion m√©ningite")
  }
  
  // Bilan selon terrain
  if (getCardiovascularRisk(patientData).includes("Haut risque")) {
    workup.push("Bilan lipidique + HbA1c")
  }
  
  return workup.length > 0 ? workup : ["Bilan biologique standard selon orientation clinique"]
}

function extractRedFlags(questions: any[]): string[] {
  return questions
    .filter(q => q.red_flags)
    .map(q => q.red_flags)
    .filter((flag, index, array) => array.indexOf(flag) === index) // D√©duplication
}

function generateFollowUpRecommendations(assessment: any, patientData: any): string[] {
  const recommendations = []
  
  if (assessment.score >= 7) {
    recommendations.push("Avis sp√©cialis√© recommand√© selon orientation diagnostique")
  }
  
  if (patientData.age > 65 || getCardiovascularRisk(patientData).includes("Haut risque")) {
    recommendations.push("Surveillance rapproch√©e - R√©√©valuation sous 48-72h")
  }
  
  recommendations.push("Documentation compl√®te des r√©ponses aux questions pour suivi longitudinal")
  recommendations.push("R√©√©valuation clinique si aggravation des sympt√¥mes")
  
  return recommendations
}
